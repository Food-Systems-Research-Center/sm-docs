{
  "hash": "1da5b6e4c05c7f99b97b67fd59d24f28",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"bnlearn\"\nformat:\n  html:\n    fig-dpi: 200\n    code-fold: false\neditor_options: \n  chunk_output_type: console\nwarnings: false\n---\n\n\n\n\n::: {.callout-note collapse='false' title='Caution'}\nMetrics and analyses for the Frontiers special issue are works in progress. There are some metric cleanliness issues here that I'm putting off for now until we work back through the county metrics.\n:::\n\nTesting out a Bayesian Network with structural learning to identify drivers in our food systems data. Playing around with county level metrics. Note that when we do this for real it should probably be aggregated at indicator level.\n\n## Housekeeping\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# if (!require('graph')) BiocManager::install('graph')\n# if (!require('Rgraphviz')) BiocManager::install('Rgraphviz')\n\npacman::p_load(\n  dplyr,\n  bnlearn,\n  # conflicted,\n  stringr,\n  purrr,\n  tidyr,\n  skimr,\n  knitr,\n  reactable,\n  graph,\n  Rgraphviz\n)\n\nsource('dev/data_pipeline_functions.R')\nsource('dev/get_reactable.R')\n\nconflicted::conflicts_prefer(\n  dplyr::filter(),\n  dplyr::select(),\n  base::setdiff(),\n  base::intersect(),\n  base::union(),\n  .quiet = TRUE\n)\n```\n:::\n\n\n\n\n## Wrangling\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pull county time series variables\nvars <- readRDS('data/frontiers/county_time_series_vars.rds')\nsm_data <- readRDS('data/sm_data.rds')[['metrics']]\n\n# Get county variables only, and lose CT\ndat <- sm_data %>% \n  filter(\n    str_length(fips) == 5,\n    variable_name %in% vars,\n    value != -666666666,\n    str_detect(fips, '^09', negate = TRUE)\n  ) %>% \n  mutate(across(c(year, value), ~ as.numeric(.x)))\nget_str(dat)\n\n# Get latest year only, then pivot wider for analysis\ndat <- dat %>% \n  get_latest_year(add_suffix = FALSE) %>% \n  pivot_wider(\n    id_cols = fips,\n    values_from = value,\n    names_from = variable_name\n  )\nget_str(dat)\n\n# Check missing\n(skim_out <- skim(dat))\n\n# Ditch vars that are > 50% missing\nmis <- skim_out %>% \n  filter(complete_rate < 0.5) %>% \n  pull(skim_variable)\ndat <- select(dat, -any_of(mis))\nget_str(dat)\n# Noice\n```\n:::\n\n\n\n\n## Toy Example\n\nMake a mini version of data to play with, just go through the motions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmini <- dat %>% \n  select(\n    gini, \n    ftmProdRatio, \n    cropDiversity,\n    farmIncomePF,\n    medianAcresPF\n  )\n```\n:::\n\n\n\n\nNote that we have a few missing values to deal with.\n\n### Preprocessing\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Discretize continuous variables. Not sure why we'd really want this though\ndiscretize(mini) \n\n# Remove highly correlated variables\ndedup(mini) \n# Not removing anything for our small set apparently\n```\n:::\n\n\n\n\n### Imputation\n\nImpute missing values based on specified DAG.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndag <- model2network(\"[gini][ftmProdRatio|medianAcresPF][cropDiversity|gini:medianAcresPF][farmIncomePF|gini][medianAcresPF|gini:farmIncomePF]\")\ndfitted = bn.fit(dag, mini)\nimp <- impute(dfitted, data = mini, method = 'bayes-lw') # or parents\n```\n:::\n\n\n\n\n### Structural Learning\n\nUse imputed dataset for structural learning\n\n#### Constraint Based\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndag_pc <- pc.stable(imp) # PC\ndag_gs <- gs(imp) # Grow-Shrink\ndag_iamb <- iamb(imp) # Incremental Association\ndag_inter_iamb <- inter.iamb(imp) # Interleaved Incremental Association\n# and others\n\n# Plot one\nplot(dag_pc)\n```\n\n::: {.cell-output-display}\n![](bnlearn_files/figure-html/unnamed-chunk-6-1.png){width=1400}\n:::\n:::\n\n\n\n\nCompare outputs:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndags <- mget(c('dag_pc', 'dag_gs', 'dag_iamb', 'dag_inter_iamb'))\nscores <- map_dbl(dags, ~ score(.x, imp)) %>%  \n  bind_cols() %>% \n  mutate(names(dags), .before = everything()) %>% \n  setNames(c('model', 'bic'))\nknitr::kable(scores)\n```\n\n::: {.cell-output-display}\n\n\n|model          |       bic|\n|:--------------|---------:|\n|dag_pc         | -827.6001|\n|dag_gs         | -827.6001|\n|dag_iamb       | -827.6001|\n|dag_inter_iamb | -827.6001|\n\n\n:::\n:::\n\n\n\n\n\n#### Score Based\n\nWith hill climbing algorithm:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndag <- hc(imp)\nprint(dag)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  Bayesian network learned via Score-based methods\n\n  model:\n   [cropDiversity][farmIncomePF][medianAcresPF|farmIncomePF][gini|medianAcresPF]\n   [ftmProdRatio|gini:cropDiversity:medianAcresPF]\n  nodes:                                 5 \n  arcs:                                  5 \n    undirected arcs:                     0 \n    directed arcs:                       5 \n  average markov blanket size:           2.80 \n  average neighbourhood size:            2.00 \n  average branching factor:              1.00 \n\n  learning algorithm:                    Hill-Climbing \n  score:                                 BIC (Gauss.) \n  penalization coefficient:              2.038769 \n  tests used in the learning procedure:  30 \n  optimized:                             TRUE \n```\n\n\n:::\n:::\n\n\n\n\nIn output, each node is shown in brackets with its parents after the pipe, separated by colons.\n\nPlot it:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(dag)\n```\n\n::: {.cell-output-display}\n![](bnlearn_files/figure-html/unnamed-chunk-9-1.png){width=1400}\n:::\n:::\n\n\n\n\n##### Whitelists and Blacklists\n\nUsing prior knowledge to set some constraints in structural learning. Let's say that $ftmProdRatio \\rightarrow cropDiversity$ and $gini \\rightarrow medianAcresPF$. Score-based algorithms have no undirected arcs, only directed.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Whitelist\nwl = data.frame(\n  from = c('ftmProdRatio', 'gini'),\n  to = c('cropDiversity', 'medianAcresPF')\n)\n\ndag_cons <- hc(imp, whitelist = wl)\nplot(\n  dag_cons,\n  highlight = c('gini'),\n  color = 'royalblue'\n)\n```\n\n::: {.cell-output-display}\n![](bnlearn_files/figure-html/unnamed-chunk-10-1.png){width=1400}\n:::\n:::\n\n\n\n\n### Plotting\n\nHighlight Markov Blanket for gini\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n  dag_cons,\n  highlight = c('gini', mb(dag_cons, 'gini')),\n  color = 'royalblue'\n)\n```\n\n::: {.cell-output-display}\n![](bnlearn_files/figure-html/unnamed-chunk-11-1.png){width=1400}\n:::\n:::\n\n\n\n\nMore plotting options with graphviz:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphviz.plot(\n  dag_cons,\n  shape = 'ellipse',\n  fontsize = 10,\n  main = 'Wicked DAG',\n  sub = 'Subtitle for Wicked DAG',\n  layout = 'neato'\n)\n```\n\n::: {.cell-output-display}\n![](bnlearn_files/figure-html/unnamed-chunk-12-1.png){width=1400}\n:::\n:::\n\n\n\n\n\n### Parameter Learning\n\nAKA fitting the model. We can use `method = 'bayes'` for discrete data only. Otherwise it is using maximum likelihood. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(fitted <- bn.fit(dag, imp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  Bayesian network parameters\n\n  Parameters of node gini (Gaussian distribution)\n\nConditional density: gini | medianAcresPF\nCoefficients:\n  (Intercept)  medianAcresPF  \n 0.4639066334  -0.0002200612  \nStandard deviation of the residuals: 0.02635921 \n\n  Parameters of node ftmProdRatio (Gaussian distribution)\n\nConditional density: ftmProdRatio | gini + cropDiversity + medianAcresPF\nCoefficients:\n  (Intercept)           gini  cropDiversity  medianAcresPF  \n -0.020025383    2.237925194   -0.179204416   -0.001608439  \nStandard deviation of the residuals: 0.1109027 \n\n  Parameters of node cropDiversity (Gaussian distribution)\n\nConditional density: cropDiversity\nCoefficients:\n(Intercept)  \n  0.7714477  \nStandard deviation of the residuals: 0.353584 \n\n  Parameters of node farmIncomePF (Gaussian distribution)\n\nConditional density: farmIncomePF\nCoefficients:\n(Intercept)  \n   28477.16  \nStandard deviation of the residuals: 19566.49 \n\n  Parameters of node medianAcresPF (Gaussian distribution)\n\nConditional density: medianAcresPF | farmIncomePF\nCoefficients:\n  (Intercept)   farmIncomePF  \n67.0689691884  -0.0006880739  \nStandard deviation of the residuals: 31.04546 \n```\n\n\n:::\n:::\n\n\n\n\nCoefficients are $\\beta$s. \n\n### Extract\n\nPull various outputs\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Methods\n# AIC, BIC, plot, as.igrpah, as.lm, as.graphAM, as.grpahNEL\n# coef, degree, fitted, logLik, nodes, print, residuals, score\n\n# Coefficients (LM coefs for continuous data)\ncoef(fitted)\n\n# Residuals, fitted values\nresiduals(fitted)\nfitted.values(fitted)\n\n# log likelihood\nlogLik(dag, imp)\n\n# sigma - standard deviations of residuals\nsigma(fitted)\n```\n:::\n\n\n\n\n\n### Evaluate Model\n\nResidual plots:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbn.fit.qqplot(fitted)\n```\n\n::: {.cell-output-display}\n![](bnlearn_files/figure-html/unnamed-chunk-15-1.png){width=1400}\n:::\n:::\n\n\n\n\nLooks like we need to log transform income per farm.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbn.fit.xyplot(fitted)\n```\n\n::: {.cell-output-display}\n![](bnlearn_files/figure-html/unnamed-chunk-16-1.png){width=1400}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbn.fit.histogram(fitted)\n```\n\n::: {.cell-output-display}\n![](bnlearn_files/figure-html/unnamed-chunk-17-1.png){width=1400}\n:::\n:::\n\n\n\n\nAnd various stats:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Shannon entropy\nH(fitted)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13.53705\n```\n\n\n:::\n\n```{.r .cell-code}\n# Kullback-Leibler divergence to copmare two fitted networks\n# KL(fitted)\n\n# Scores. Default is BIC\nscore(dag, imp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -824.2672\n```\n\n\n:::\n\n```{.r .cell-code}\n# -g for gaussian (continuous) networks, -cg for hybrid\nscore(dag, imp, type = 'loglik-g')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -793.6857\n```\n\n\n:::\n\n```{.r .cell-code}\nscore(dag, imp, type = 'aic-g')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -808.6857\n```\n\n\n:::\n\n```{.r .cell-code}\nscore(dag, imp, type = 'bic-g')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -824.2672\n```\n\n\n:::\n\n```{.r .cell-code}\nscore(dag, imp, type = 'ebic-g') # additional penalty for dense networks\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -840.3616\n```\n\n\n:::\n\n```{.r .cell-code}\nscore(dag, imp, type = 'bge') # Gaussian posterior density\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -966.6023\n```\n\n\n:::\n\n```{.r .cell-code}\n# and others...\n```\n:::\n\n\n\n\n\n## State Data \n\nLet's try this with our aggregated indicators from the state data. Counties are a bit of a mess right now. \n\n### Preprocessing\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscores <- readRDS('data/raw_minmax_geo.rds')\nget_str(scores)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nrowws_df [50 × 63] (S3: rowwise_df/tbl_df/tbl/data.frame)\n $ state                                      : chr [1:50] \"AL\" \"AK\" \"AZ\" \"AR\"..\n $ indic_access to land                       : num [1:50] 0.363 0.219 0.198 0..\n $ indic_wealth/income distribution           : num [1:50] 0.275 0.684 0.373 0..\n $ indic_income stability                     : num [1:50] 0.08724 0.06626 0.2..\n $ indic_operations diversification           : num [1:50] 0.013147 0.39392 0...\n $ indic_use of ag/farm/crop insurance        : num [1:50] 0.2314 0.21962 0 0...\n $ indic_carbon fluxes                        : num [1:50] 0.346 0.751 0.879 0..\n $ indic_carbon stocks                        : num [1:50] 0.1654 0.3674 0.018..\n $ indic_embodied carbon                      : num [1:50] 0.05821 0.00615 0.0..\n $ indic_forest health                        : num [1:50] 0.25 0.4275 0.1041 ..\n $ indic_biodiversity                         : num [1:50] 0.572 0.298 0.574 0..\n $ indic_land use diversity                   : num [1:50] 0.954307 0.587913 0..\n $ indic_sensitive or rare habitats           : num [1:50] 0.642 0.7319 0.6918..\n $ indic_water quality                        : num [1:50] 0.581 0.585 0.449 0..\n $ indic_water quantity                       : num [1:50] 0.712 0.915 0.42 0...\n $ indic_educational attainment               : num [1:50] 0.2323 0.4223 0.447..\n $ indic_access to culturally appropriate food: num [1:50] 0.1563 0.3824 0.081..\n $ indic_dietary quality                      : num [1:50] 0.36 0.352 0.352 0...\n $ indic_food access                          : num [1:50] 0.1684 0.2286 0.106..\n $ indic_food affordability                   : num [1:50] 0.498 0.526 0.35 0...\n $ indic_mental health tbd                    : num [1:50] 0.352 0.34 0.312 0...\n $ indic_access to care                       : num [1:50] 0.198 0.435 0.313 0..\n $ indic_housing supply and quality           : num [1:50] 0.621 0.616 0.633 0..\n $ indic_physical health tbd                  : num [1:50] 0.274 0.585 0.507 0..\n $ indic_total quantity exported              : num [1:50] 0.068031 0 0.068105..\n $ indic_production species diversity         : num [1:50] 0.5496 0.2917 0.653..\n $ indic_production inputs                    : num [1:50] 0.8 1 0.619 0.305 0..\n $ indic_total quantity food products         : num [1:50] 0.107721 0.000613 0..\n $ indic_total quantity forest products       : num [1:50] 0.635061 0.000087 0..\n $ indic_total quantity non-food ag products  : num [1:50] 0.19143 0.00143 0.0..\n $ indic_value added market                   : num [1:50] 0.01481 0.30841 0.0..\n $ indic_crop failure                         : num [1:50] 0.95 1 0.967 0.391 ..\n $ indic_social connectedness                 : num [1:50] 0.417 0.406 0.314 0..\n $ indic_community safety                     : num [1:50] 0.749 0.384 0.896 0..\n $ indic_diverse representation               : num [1:50] 0.45 0.53 0.638 0.3..\n $ indic_age diversity                        : num [1:50] 0.3774 0.7547 0.113..\n $ indic_gender diversity                     : num [1:50] 0.274 0.9229 1 0.48..\n $ indic_racial diversity                     : num [1:50] 0.28454 0.34292 0.8..\n $ indic_participatory governance             : num [1:50] 0.3192 0.514 0.4967..\n $ index_access to capital/credit             : num [1:50] 0.363 0.219 0.198 0..\n $ index_community economy                    : num [1:50] 0.275 0.684 0.373 0..\n $ index_food business resilience             : num [1:50] 0.0643 0.179 0.0834..\n $ index_carbon, ghg, nutrients               : num [1:50] 0.1493 0.1193 0.101..\n $ index_forest                               : num [1:50] 0.25 0.4275 0.1041 ..\n $ index_species and habitat                  : num [1:50] 0.705 0.5042 0.4883..\n $ index_water                                : num [1:50] 0.643 0.732 0.434 0..\n $ index_education                            : num [1:50] 0.2323 0.4223 0.447..\n $ index_food security                        : num [1:50] 0.262 0.357 0.181 0..\n $ index_mental health                        : num [1:50] 0.352 0.34 0.312 0...\n $ index_physical health                      : num [1:50] 0.323 0.54 0.465 0...\n $ index_imports vs exports                   : num [1:50] 0.068031 0 0.068105..\n $ index_production diversity                 : num [1:50] 0.5496 0.2917 0.653..\n $ index_production margins                   : num [1:50] 0.17305 0.00749 0.0..\n $ index_waste and losses                     : num [1:50] 0.95 1 0.967 0.391 ..\n $ index_community embeddedness               : num [1:50] 0.417 0.406 0.314 0..\n $ index_community livability                 : num [1:50] 0.5809 0.4514 0.756..\n $ index_food and farmworker diversity        : num [1:50] 0.3087 0.6205 0.453..\n $ index_food system governance               : num [1:50] 0.3192 0.514 0.4967..\n $ dimen_economics                            : num [1:50] 0.186 0.299 0.183 0..\n $ dimen_environment                          : num [1:50] 0.361 0.37 0.218 0...\n $ dimen_health                               : num [1:50] 0.288 0.408 0.329 0..\n $ dimen_production                           : num [1:50] 0.28 0.2702 0.1884 ..\n $ dimen_social                               : num [1:50] 0.393 0.492 0.481 0..\n```\n\n\n:::\n\n```{.r .cell-code}\ndf <- scores %>% \n  select(matches('^indic')) %>% \n  setNames(c(str_remove(names(.), 'indic_') %>% str_replace_all(' ', '_')))\nget_str(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nrowws_df [50 × 38] (S3: rowwise_df/tbl_df/tbl/data.frame)\n $ access_to_land                       : num [1:50] 0.363 0.219 0.198 0.435 0..\n $ wealth/income_distribution           : num [1:50] 0.275 0.684 0.373 0.328 0..\n $ income_stability                     : num [1:50] 0.08724 0.06626 0.20328 0..\n $ operations_diversification           : num [1:50] 0.013147 0.39392 0.05679 ..\n $ use_of_ag/farm/crop_insurance        : num [1:50] 0.2314 0.21962 0 0.29855 ..\n $ carbon_fluxes                        : num [1:50] 0.346 0.751 0.879 0.436 0..\n $ carbon_stocks                        : num [1:50] 0.1654 0.3674 0.0185 0.32..\n $ embodied_carbon                      : num [1:50] 0.05821 0.00615 0.06465 0..\n $ forest_health                        : num [1:50] 0.25 0.4275 0.1041 0.3586..\n $ biodiversity                         : num [1:50] 0.572 0.298 0.574 0.489 0..\n $ land_use_diversity                   : num [1:50] 0.954307 0.587913 0.29319..\n $ sensitive_or_rare_habitats           : num [1:50] 0.642 0.7319 0.6918 0.419..\n $ water_quality                        : num [1:50] 0.581 0.585 0.449 0.454 0..\n $ water_quantity                       : num [1:50] 0.712 0.915 0.42 0.791 0...\n $ educational_attainment               : num [1:50] 0.2323 0.4223 0.4479 0.15..\n $ access_to_culturally_appropriate_food: num [1:50] 0.1563 0.3824 0.0818 0.07..\n $ dietary_quality                      : num [1:50] 0.36 0.352 0.352 0.768 0...\n $ food_access                          : num [1:50] 0.1684 0.2286 0.1061 0.12..\n $ food_affordability                   : num [1:50] 0.498 0.526 0.35 0.172 0...\n $ mental_health_tbd                    : num [1:50] 0.352 0.34 0.312 0.339 0...\n $ access_to_care                       : num [1:50] 0.198 0.435 0.313 0.247 0..\n $ housing_supply_and_quality           : num [1:50] 0.621 0.616 0.633 0.536 0..\n $ physical_health_tbd                  : num [1:50] 0.274 0.585 0.507 0.377 0..\n $ total_quantity_exported              : num [1:50] 0.068031 0 0.068105 0.174..\n $ production_species_diversity         : num [1:50] 0.5496 0.2917 0.6537 0.37..\n $ production_inputs                    : num [1:50] 0.8 1 0.619 0.305 0.533 0..\n $ total_quantity_food_products         : num [1:50] 0.107721 0.000613 0.07753..\n $ total_quantity_forest_products       : num [1:50] 0.635061 0.000087 0.00048..\n $ total_quantity_non-food_ag_products  : num [1:50] 0.19143 0.00143 0.02043 0..\n $ value_added_market                   : num [1:50] 0.01481 0.30841 0.04466 0..\n $ crop_failure                         : num [1:50] 0.95 1 0.967 0.391 0.636 ..\n $ social_connectedness                 : num [1:50] 0.417 0.406 0.314 0.388 0..\n $ community_safety                     : num [1:50] 0.749 0.384 0.896 0.677 0..\n $ diverse_representation               : num [1:50] 0.45 0.53 0.638 0.34 0.41..\n $ age_diversity                        : num [1:50] 0.3774 0.7547 0.1132 0.58..\n $ gender_diversity                     : num [1:50] 0.274 0.9229 1 0.4825 0.4..\n $ racial_diversity                     : num [1:50] 0.28454 0.34292 0.82326 0..\n $ participatory_governance             : num [1:50] 0.3192 0.514 0.4967 0.011..\n```\n\n\n:::\n\n```{.r .cell-code}\n# Get rid of county, also FFF variables\n# get_str(dat)\n# df <- dat %>% \n#   select(-any_of(c('fips', matches('FFF$'))))\n# get_str(df)\n\n# Remove highly correlated variables\nthreshold <- 0.5\ndf <- dedup(df, threshold = threshold)\n```\n:::\n\n\n\n\nThreshold of correlations at 0.5 brings us down from 58 variables to 21 variables.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Imputation\n# dag <- hc(df)\n# dfitted = bn.fit(dag, df)\n# imp <- impute(dfitted, data = df, method = 'bayes-lw')\n```\n:::\n\n\n\n\n### Structural Learning\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodels <- list(\n  dag_pc = pc.stable(df),\n  dag_gs = gs(df),\n  dag_iamb = iamb(df),\n  dag_inter_iamb = inter.iamb(df),\n  dag_hc = hc(df),\n  dag_mmhc = mmhc(df)\n)\n# map(models, ~ try(score(.x, df)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphviz.plot(\n  models$dag_pc,\n  layout = 'fdp',\n  shape = 'ellipse',\n  fontsize = 18,\n  main = 'Force Directed Indicator Network',\n  sub = 'Max-Min Hill Climbing Algorithm'\n)\n```\n\n::: {.cell-output-display}\n![](bnlearn_files/figure-html/unnamed-chunk-22-1.png){width=1400}\n:::\n:::\n\n\n\n\n### Explore Influence\n\n#### Markov Blankets\n\nOne way we can assess influential indicators is with Markov blankets.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get Markov blankets\nblankets <- map(names(df), \\(var) {\n  mb(models$dag_mmhc, var)\n})\n\n# Get number of nodes in each blanket\nblanket_sizes <- map_dbl(blankets, ~ length(.x)) %>% \n  as.data.frame() %>% \n  mutate(names(df), .before = everything()) %>% \n  setNames(c('var', 'size')) %>% \n  arrange(desc(size))\n\n# Show node count\nget_reactable(blanket_sizes)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"reactable html-widget html-fill-item\" id=\"htmlwidget-d5e8a4416cca7328860a\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d5e8a4416cca7328860a\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"var\":[\"wealth/income_distribution\",\"operations_diversification\",\"educational_attainment\",\"food_access\",\"housing_supply_and_quality\",\"production_inputs\",\"diverse_representation\",\"biodiversity\",\"age_diversity\",\"access_to_land\",\"use_of_ag/farm/crop_insurance\",\"carbon_stocks\",\"land_use_diversity\",\"total_quantity_forest_products\",\"income_stability\",\"water_quality\",\"production_species_diversity\",\"community_safety\",\"water_quantity\",\"dietary_quality\",\"food_affordability\"],\"size\":[6,5,5,4,4,4,4,3,3,2,2,2,2,2,1,1,1,1,0,0,0]},\"columns\":[{\"id\":\"var\",\"name\":\"var\",\"type\":\"character\"},{\"id\":\"size\",\"name\":\"size\",\"type\":\"numeric\"}],\"resizable\":true,\"filterable\":true,\"searchable\":true,\"defaultPageSize\":10,\"showPageSizeOptions\":true,\"onClick\":\"select\",\"highlight\":true,\"bordered\":true,\"striped\":true,\"compact\":true,\"style\":{\"fontSize\":\"14px\"},\"dataKey\":\"7e30820b151dc07e01bc8ce67fef2835\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n\n#### Arc Strengths\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check arc strengths\n# arc.strength(dag_hc, data = df)\n```\n:::\n\n\n\n\n\n### Other Things\n\n- Bootstrapped arc stability\n- Hybrid structural learning algorithms (MMHC)\n- Whitelisting and blacklisting\n- Add covariates (no omitted variables)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/core-js-2.5.3/shim.min.js\"></script>\n<script src=\"../site_libs/react-18.2.0/react.min.js\"></script>\n<script src=\"../site_libs/react-18.2.0/react-dom.min.js\"></script>\n<script src=\"../site_libs/reactwidget-2.0.0/react-tools.js\"></script>\n<link href=\"../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../site_libs/reactable-0.4.4/reactable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/reactable-binding-0.4.4/reactable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}