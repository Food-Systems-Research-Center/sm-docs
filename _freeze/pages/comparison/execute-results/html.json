{
  "hash": "9d0b566760950cb38291bbddefdaea37",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Comparison of Aggregation Methods\"\nformat:\n  html:\n    fig-dpi: 200\neditor_options: \n  chunk_output_type: console\nwarnings: false\nexecute:\n  freeze: true\n---\n\n\n\n\nIn the last page we created 18 sets of scores by state based on combinations of three transformatino methods (raw, winsor, box cox), three rescaling methods (z-scores, min max, rank) and two aggregation methods (arithmetic, geometric). Here, we will explore differences between them in terms of state distributions and rankings.\n\nNote that each set of spider plots are scaled to the minimum and maximum of any single state in that dimension, given the rescaling and aggregation methods. This means in the case of min-max scaling, for example, raw metrics are scaled from 0 to 1, arithmetic and geometric means consolidate values to dimension scores, and these sets of dimension scores are scaled on the plot from the lowest to the highest value of any state. A \"perfect\" score here means that it is the best of any state. Plots show dimension values for Vermont in green. The dotted purple polygon behind it is the median of US states. Arithmetic means are on the left, and geometric on the right.\n\nBe aware that spider/radar charts can be hard to interpret, and sometimes misleading [The Radar Chart and its Caveats](https://www.data-to-viz.com/caveat/spider.html). The order of variables makes a big impact on the area of chart, and area is not a terribly reliable way to show differences, as it increases quadratically as variables increase linearly. Will explore some other ways to show this information, but using these for now as they are quite popular in the literature for sustainability metrics.\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n# Min Max\n\nWe are starting with min max normalization, which is probably the most intuitive transformation. Every metric is scaled from 0 to 1, so the lowest value from any state becomes 0, and the highest value from any state becomes 1. Indicators, indices, and dimensions are then aggregated using arithmetic or geometric means.\n\nThe transformation is easy to understand, but has some drawbacks, including being quite sensitive to outliers. Strong outliers in either direction could condense the rest of the distribution, making it seem like most states are very low or very high.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load state score data\ndat <- readRDS('data/state_score_iterations.rds')\n# get_str(dat)\n\n# Custom function to create spider plots\nget_vt_spiders(dat, 'raw_minmax')\n```\n\n::: {.cell-output-display}\n![](comparison_files/figure-html/unnamed-chunk-2-1.png){width=2000}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_vt_spiders(dat, 'winsor_minmax')\n```\n\n::: {.cell-output-display}\n![](comparison_files/figure-html/unnamed-chunk-3-1.png){width=2000}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_vt_spiders(dat, 'boxcox_minmax')\n```\n\n::: {.cell-output-display}\n![](comparison_files/figure-html/unnamed-chunk-4-1.png){width=2000}\n:::\n:::\n\n\n\n\n# Z-Scores\n\nZ-scores are standardized values. We subtract the mean from every metric to center it at 0, then divide by the standard deviation to get units in terms of standard deviations. This should be more robust to outliers than the min-max method; extreme values have no effect on values. However, rescaling Z-scores to fit the spider plots might have a similar effect.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_vt_spiders(dat, 'raw_zscore')\n```\n\n::: {.cell-output-display}\n![](comparison_files/figure-html/unnamed-chunk-5-1.png){width=2000}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_vt_spiders(dat, 'winsor_zscore')\n```\n\n::: {.cell-output-display}\n![](comparison_files/figure-html/unnamed-chunk-6-1.png){width=2000}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_vt_spiders(dat, 'boxcox_zscore')\n```\n\n::: {.cell-output-display}\n![](comparison_files/figure-html/unnamed-chunk-7-1.png){width=2000}\n:::\n:::\n\n\n\n\n# Rank\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_vt_spiders(dat, 'raw_rank')\n```\n\n::: {.cell-output-display}\n![](comparison_files/figure-html/unnamed-chunk-8-1.png){width=2000}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_vt_spiders(dat, 'winsor_rank')\n```\n\n::: {.cell-output-display}\n![](comparison_files/figure-html/unnamed-chunk-9-1.png){width=2000}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_vt_spiders(dat, 'boxcox_rank')\n```\n\n::: {.cell-output-display}\n![](comparison_files/figure-html/unnamed-chunk-10-1.png){width=2000}\n:::\n:::\n\n\n\n\n# References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}