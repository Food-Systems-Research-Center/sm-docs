[
  {
    "objectID": "pages/metric_counts.html",
    "href": "pages/metric_counts.html",
    "title": "Metric Counts",
    "section": "",
    "text": "Here we will see how much the dimension scores for Vermont change when we reduce certain indicators with many metrics to a single metric. We do this for an indicator in every dimension except social, which really doesn’t have any metrics to spare currently.\nNote that this should be redone more systematically and across all metrics to compare them at some point, rather than a picking just a few. On to-do list.\n\n\nCode\n# Load data for aggregations\nstate_key &lt;- readRDS('data/sm_data.rds')[['state_key']]\nmetrics_df &lt;- readRDS('data/metrics_df.rds')\nnormed_data &lt;- readRDS('data/normalized_metrics_df.rds')\nframework &lt;- readRDS('data/filtered_frame.rds')\n\n# Test out process\noriginal_scores &lt;- get_all_aggregations(\n  normed_data = normed_data['minmax'],\n  framework = framework,\n  state_key = state_key,\n  metrics_df = metrics_df\n)\n\n\n\n1 Reduce Physical Health Metrics\nFirst let’s take the physical health tbd indicator and reduce it to only lifeExpectancy.\n\n\nCode\n# Remove everything from physical health tbd except life expectancy\nto_remove &lt;- framework %&gt;% \n  dplyr::filter(\n    indicator == 'physical health tbd', \n    variable_name != 'lifeExpectancy'\n  ) %&gt;% \n  dplyr::pull(variable_name)\n\n# Get dimension scores\nto_life &lt;- get_all_aggregations(\n  normed_data = normed_data['minmax'],\n  framework = framework,\n  state_key = state_key,\n  metrics_df = metrics_df,\n  to_remove = to_remove\n)\n\n\nNow the same for drugOverdoseDeaths\n\n\nCode\n# Remove everything from physical health tbd except life expectancy\nto_remove &lt;- framework %&gt;% \n  dplyr::filter(\n    indicator == 'physical health tbd', \n    variable_name != 'drugOverdoseDeaths'\n  ) %&gt;% \n  pull(variable_name)\n\n# Get dimension scores\nto_overdose &lt;- get_all_aggregations(\n  normed_data = normed_data['minmax'],\n  framework = framework,\n  state_key = state_key,\n  metrics_df = metrics_df,\n  to_remove = to_remove\n)\n\n\nFinally, we can compare the health dimension score and rank for the original framework against the physical health tbd indicator as represented by only life expectancy or only drug overdoses.\n\n\nCode\ndf &lt;- map_dfr(list(original_scores, to_life, to_overdose), ~ {\n  .x$minmax_geometric$dimension_scores %&gt;% \n    as.data.frame() %&gt;%\n    dplyr::filter(str_length(state) == 2) %&gt;% \n    mutate(\n      rank = dense_rank(health),\n    ) %&gt;% \n    dplyr::filter(state == 'VT') %&gt;% \n    dplyr::select(health, rank)\n}) %&gt;% \n  mutate(\n    health = round(health, 3),\n    iteration = c('Original', 'Life Exp Only', 'Overdoses Only')\n  )\n\n\n\n\n\n\n\n\n\n\n2 Reduce Crop Failure Metrics\nFor production, we will reduce the crop failure indicator to only the value of dairy margin protection payments and then income from insurance indemnities.\n\n\nCode\nget_str(normed_data)\nget_str(framework)\n\n## Reduce crop failure indicator to totalValueDairyMarginProtPayments\nto_remove &lt;- framework %&gt;% \n  dplyr::filter(\n    indicator == 'crop failure', \n    variable_name != 'totalValueDairyMarginProtPayments'\n  ) %&gt;% \n  pull(variable_name)\n\n# Get dimension scores\nto_dairy &lt;- get_all_aggregations(\n  normed_data = normed_data['minmax'],\n  framework = framework,\n  state_key = state_key,\n  metrics_df = metrics_df,\n  to_remove = to_remove\n)\n\n\n## Reduce crop failure indicator to totalIncomeInsuranceIndemnities\nto_remove &lt;- framework %&gt;% \n  dplyr::filter(\n    indicator == 'crop failure', \n    variable_name != 'totalIncomeInsuranceIndemnities'\n  ) %&gt;% \n  pull(variable_name)\n\n# Get dimension scores\nto_insurance &lt;- get_all_aggregations(\n  normed_data = normed_data['minmax'],\n  framework = framework,\n  state_key = state_key,\n  metrics_df = metrics_df,\n  to_remove = to_remove\n)\n\n\n## Put them together\nprod_df &lt;- map_dfr(list(original_scores, to_dairy, to_insurance), ~ {\n  .x$minmax_geometric$dimension_scores %&gt;% \n    as.data.frame() %&gt;%\n    dplyr::filter(str_length(state) == 2) %&gt;% \n    mutate(\n      rank = dense_rank(production),\n    ) %&gt;% \n    dplyr::filter(state == 'VT') %&gt;% \n    dplyr::select(production, rank)\n}) %&gt;% \n  mutate(\n    production = round(production, 3),\n    iteration = c('Original', 'Dairy Only', 'Insurance Only')\n  )\n\n\n\n\n\n\n\n\n\n\n3 Reduce Biodiversity Metrics\nNow for the environment dimension, we will reduce the biodiversity indicator from its current set of 8 species down to the percentage of animal species at risk and the percentage of plant species at risk.\n\n\nCode\nget_str(normed_data)\nget_str(framework)\n\n## Reduce crop failure indicator to pctAtRiskAnimalSpp\nto_remove &lt;- framework %&gt;% \n  dplyr::filter(\n    indicator == 'biodiversity', \n    variable_name != 'pctAtRiskAnimalSpp'\n  ) %&gt;% \n  pull(variable_name)\n\n# Get dimension scores\nto_animal &lt;- get_all_aggregations(\n  normed_data = normed_data['minmax'],\n  framework = framework,\n  state_key = state_key,\n  metrics_df = metrics_df,\n  to_remove = to_remove\n)\n\n\n## Reduce biodiversity indicator to pctAtRiskPlantSpp\nto_remove &lt;- framework %&gt;% \n  dplyr::filter(\n    indicator == 'crop failure', \n    variable_name != 'pctAtRiskPlantSpp'\n  ) %&gt;% \n  pull(variable_name)\n\n# Get dimension scores\nto_plant &lt;- get_all_aggregations(\n  normed_data = normed_data['minmax'],\n  framework = framework,\n  state_key = state_key,\n  metrics_df = metrics_df,\n  to_remove = to_remove\n)\n\n\n## Put them together\nenv_df &lt;- map_dfr(list(original_scores, to_animal, to_plant), ~ {\n  .x$minmax_geometric$dimension_scores %&gt;% \n    as.data.frame() %&gt;%\n    dplyr::filter(str_length(state) == 2) %&gt;% \n    mutate(\n      rank = dense_rank(environment),\n    ) %&gt;% \n    dplyr::filter(state == 'VT') %&gt;% \n    dplyr::select(environment, rank)\n}) %&gt;% \n  mutate(\n    environment = round(environment, 3),\n    iteration = c('Original', 'Animal Spp Only', 'Plant Spp Only')\n  )\n\n\n\n\n\n\n\n\n\n\n4 Reduce Wealth/Income Metrics\nFor the economics dimension, we will reduce the wealth/income distribution indicator down to unemployment rate and then gini index.\n\n\nCode\nget_str(normed_data)\nget_str(framework)\n\n## Reduce wealth/income indicator to unemploymentRate\nto_remove &lt;- framework %&gt;% \n  dplyr::filter(\n    indicator == 'wealth/income distribution', \n    variable_name != 'unemploymentRate'\n  ) %&gt;% \n  pull(variable_name)\n\n# Get dimension scores\nto_unemployment &lt;- get_all_aggregations(\n  normed_data = normed_data['minmax'],\n  framework = framework,\n  state_key = state_key,\n  metrics_df = metrics_df,\n  to_remove = to_remove\n)\n\n\n## Reduce wealth/income indicator to gini index\nto_remove &lt;- framework %&gt;% \n  dplyr::filter(\n    indicator == 'wealth/income distribution', \n    variable_name != 'gini'\n  ) %&gt;% \n  pull(variable_name)\n\n# Get dimension scores\nto_gini &lt;- get_all_aggregations(\n  normed_data = normed_data['minmax'],\n  framework = framework,\n  state_key = state_key,\n  metrics_df = metrics_df,\n  to_remove = to_remove\n)\n\n\n## Put them together\necon_df &lt;- map_dfr(list(original_scores, to_unemployment, to_gini), ~ {\n  .x$minmax_geometric$dimension_scores %&gt;% \n    as.data.frame() %&gt;%\n    dplyr::filter(str_length(state) == 2) %&gt;% \n    mutate(\n      rank = dense_rank(economics),\n    ) %&gt;% \n    dplyr::filter(state == 'VT') %&gt;% \n    dplyr::select(economics, rank)\n}) %&gt;% \n  mutate(\n    economics = round(economics, 3),\n    iteration = c('Original', 'Unemployment', 'Gini')\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Analysis",
      "Metric Counts"
    ]
  },
  {
    "objectID": "pages/sensitivity.html",
    "href": "pages/sensitivity.html",
    "title": "Sensitivity and Uncertainty",
    "section": "",
    "text": "Uncertainty and Sensitivity Plan: • Could do it with either the average rank or the average of all dimension scores ○ Rank might be more interpretable - hard to understand dimension score otherwise? • Set probabilities for each of our uncertain factors ○ Normalization (5) - min max, z score, winsor, rank, box cox ○ Aggregation (2) - geometric, arithmetic ○ Indicators/Metrics (36/130 or whatever) • Randomly sample from uncertain input variables For each sample, run model, get output (average dimension scores or ranks)\n\n\n\n Back to top",
    "crumbs": [
      "Analysis",
      "Sensitivity and Uncertainty"
    ]
  }
]