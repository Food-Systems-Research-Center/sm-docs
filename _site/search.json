[
  {
    "objectID": "pages/validation.html",
    "href": "pages/validation.html",
    "title": "Validation",
    "section": "",
    "text": "The goal here is to use our five tentative dimension scores as predictors to compare against other established metrics:\n\nFood security index, overall and/or child (Feeding America, Map the Meal Gap)\nHealth outcomes (UW county health rankings)\nLife expectancy, or premature age-adjusted mortality (UW rankings)\nOther ideas: a food affordability index, happiness index, happy planet index?\n\nTo Add:\n\ncite Schneider 2023 (Schneider et al. 2023)\n\nWLS regression to get deviations of region and income group weighted means from global weighted mean\n\n\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  stringr,\n  tidyr\n)\n\n# Load sm_data\nsm_data &lt;- readRDS('data/sm_data.rds')\n\n# Load state fips key to join other datasets\nstate_key &lt;- sm_data[['state_key']] %&gt;% \n  select(state, state_code)\n\n# Load cleaned aggregated data for all levels of regresion\nminmax_geo &lt;- readRDS('data/minmax_geo_all_levels.rds')\nget_str(minmax_geo)\n\n# Reduce to just dimension scores, and remove prefix\ndimension_scores &lt;- minmax_geo %&gt;% \n  select(state, starts_with('dimen')) %&gt;% \n  setNames(c(str_remove(names(.), 'dimen_')))\nget_str(dimension_scores)\n\n# Pull raw metrics data\nmetrics_df &lt;- readRDS('data/metrics_df.rds')\nget_str(metrics_df)\n\n\n# Pull validation variables out of sm_data, wrangle them to match metrics_df\n# Also including covariates, gdp and population\nvalidation_vars &lt;- sm_data$metadata %&gt;% \n  select(variable_name, metric, definition, source) %&gt;% \n  filter(variable_name %in% c(\n    'foodInsecurity',\n    'communityEnvRank',\n    'happinessScore',\n    'wellbeingRank',\n    'workEnvRank',\n    'foodEnvironmentIndex',\n    'lifeExpectancy',\n    'population',\n    'gdpCurrent'\n  )) %&gt;% \n  pull(variable_name)\nvalidation_vars  \n \n# Get subset of metrics for our validation variables, get latest year only\nvalidation_metrics &lt;- sm_data$metrics %&gt;% \n  filter(\n    variable_name %in% validation_vars, \n    !is.na(value), \n    str_length(fips) == 2\n  ) %&gt;% \n  get_latest_year()\nget_str(validation_metrics)\n# All are available in 2024\n\n# Pivot wider, also get rid of trailing year\nvalidation_metrics &lt;- validation_metrics %&gt;% \n  pivot_wider(\n    id_cols = fips,\n    names_from = variable_name,\n    values_from = value\n  ) %&gt;% \n  setNames(c(str_remove(names(.), '_[0-9]{4}'))) %&gt;% \n  mutate(across(!fips, as.numeric))\nget_str(validation_metrics)\n# 00 US is missing a lot obviously\n# 11 DC is the other one with missing data\n# We will just filter down to 50 states to match metrics_df\n\n# Combine validation variables with our dimension scores using state key as the \n# bridge. Also remove DC (don't have validation metrics there)\nkey &lt;- sm_data$state_key %&gt;% \n  select(state, fips = state_code)\ndat &lt;- dimension_scores %&gt;% \n  left_join(key) %&gt;% \n  left_join(validation_metrics) %&gt;% \n  as.data.frame() %&gt;% \n  filter(state != 'DC') %&gt;% \n  select(-fips)\n\n# Make a GDP per capita variable from GDP real and population\n# It was already in millions to begin with\ndat &lt;- dat %&gt;% \n  mutate(gdp_per_cap = ((gdpCurrent / population) * 1e6) / 1000)\nget_str(dat)\n\n# Check it out\nget_str(dat)\nskimr::skim(dat)\n# Looks good\n\n# Save this for other pages\nsaveRDS(dat, 'data/metrics_df_with_vals_and_covars.rds')",
    "crumbs": [
      "Analysis",
      "Validation"
    ]
  },
  {
    "objectID": "pages/validation.html#glmnet",
    "href": "pages/validation.html#glmnet",
    "title": "Validation",
    "section": "4.1 GLMnet",
    "text": "4.1 GLMnet\n\n\nCode\nset.seed(42)\nfood_env_glmnet &lt;- train(\n  foodEnvironmentIndex ~ economics + environment + health + production + social + gdp_per_cap,\n  data = training_data, \n  tuneGrid = expand.grid(\n    alpha = seq(0.1, 1, length = 5),\n    lambda = seq(0.0001, 0.1, length = 100)\n  ),\n  method = \"glmnet\",\n  trControl = my_control,\n  preProcess = c('zv', 'center', 'scale')\n)\n\n\n\n\nCode\nimportance &lt;- varImp(food_env_glmnet, scale = TRUE)\nplot(importance)\n\n\n\n\n\n\n\n\n\nIt looks like GDP is a better predictor of the Food Environment Index than anything else, but the health dimension is far more influential than any other.",
    "crumbs": [
      "Analysis",
      "Validation"
    ]
  },
  {
    "objectID": "pages/validation.html#random-forest",
    "href": "pages/validation.html#random-forest",
    "title": "Validation",
    "section": "4.2 Random Forest",
    "text": "4.2 Random Forest\n\n\nCode\nset.seed(42)\nfood_env_rf &lt;- train(\n  foodEnvironmentIndex ~ production + social + health + economics + environment + gdp_per_cap,\n  data = training_data, \n  tuneLength = 7,\n  method = \"ranger\",\n  trControl = my_control,\n  importance = 'impurity'\n)\n\n\nOOB prediction error (MSE): 1.2917313\n\n\nCode\nimportance &lt;- varImp(food_env_rf, scale = TRUE)\nplot(importance)",
    "crumbs": [
      "Analysis",
      "Validation"
    ]
  },
  {
    "objectID": "temp/test_preso.html#getting-up",
    "href": "temp/test_preso.html#getting-up",
    "title": "Habits",
    "section": "",
    "text": "Turn off alarm\nGet out of bed"
  },
  {
    "objectID": "temp/test_preso.html#going-to-sleep",
    "href": "temp/test_preso.html#going-to-sleep",
    "title": "Habits",
    "section": "2 Going to sleep",
    "text": "2 Going to sleep\n\nGet in bed\nCount sheep\nCount sheep\nCount sheep\nCount sheep\nCount sheep\nCount sheep\nCount sheep\nCount sheep\nCount sheep\nCount sheep\nCount sheep\nCount sheep\nCount sheep\nCount sheep\nCount sheep\nCount sheep\nCount sheep\nCount sheep\nCount sheep\nCount sheep\n\n\nSpeaker notes go here."
  },
  {
    "objectID": "temp/test_preso.html#testing-a-plot",
    "href": "temp/test_preso.html#testing-a-plot",
    "title": "Habits",
    "section": "3 Testing a plot",
    "text": "3 Testing a plot\n\n\n\nSome points before plot\nanother point before the plot\n\n\n\n\nCode\n# These fig height and width options work\nplot(mtcars$hp, mtcars$mpg)"
  },
  {
    "objectID": "pages/refined_framework.html",
    "href": "pages/refined_framework.html",
    "title": "Refined Secondary Data Framework",
    "section": "",
    "text": "*Setup complete*\nThis page shows the partially refined framework as it stands after three dimension meetings: economics, environment, and production. It also includes a selection of preliminary secondary data metrics to match those indicators. We have collected around 1500 metrics so far, although many of those are fluff. Effectively, we have around 600 meaningful metrics. Here, we are using a selection of ~129 of them to make a preliminary framework for preliminary analyses. This is more than we have been planning for the refined framework, which will give us a chance to see how aggregate scores change with different combinations of metrics and under different methods of aggregation.\nNote that where I have no metrics to represent an indicator, I have added placeholders of the format NONE_#. This does not mean that secondary data do not exist, just that I either haven’t found it or haven’t cleaned and wrangled it yet. At the time of writing, there are several of the latter, including crop failure, access to care, racial diversity, and others. If you know of any secondary data to fill in the gaps or improve on data we already have, please do reach out to let Chris know about it.\nAt the bottom of this page is a metadata table with sources and definitions for all the metrics.",
    "crumbs": [
      "Analysis",
      "Refined Framework"
    ]
  },
  {
    "objectID": "pages/refined_framework.html#partially-refined-framework",
    "href": "pages/refined_framework.html#partially-refined-framework",
    "title": "Refined Secondary Data Framework",
    "section": "1 Partially Refined Framework",
    "text": "1 Partially Refined Framework\nHere is the framework with a selection of secondary metrics, split into each dimension for ease of reading.\n\n\nCode\npacman::p_load(\n  conflicted,\n  dplyr,\n  purrr,\n  stringr,\n  readr\n)\nsource('dev/get_dimension_ggraph.R')\n\n# Load refined framework\nsm_data &lt;- readRDS('data/sm_data.rds')\nraw_frame &lt;- sm_data[['refined_tree']]\n\n# Clean up the framework df \nframe &lt;- raw_frame %&gt;% \n  select(dimension:variable_name, use) %&gt;% \n  filter(use == 'x') %&gt;% \n  select(-use) %&gt;% \n  mutate(\n    metric = ifelse(\n      str_length(metric) &gt; 45,\n      paste0(str_sub(metric, end = 45), '...'),\n      metric\n    )\n  )\n# get_str(frame)\n\n# Save frame to rds for use in subsequent scripts\nsaveRDS(frame, 'data/frame.rds')\n\n\n\n1.1 Environment\nWe have reasonable representation of the environment dimension, although some metrics are proxies that are stretched a bit too far. I do have biodiversity and sensitive habitat data, but still need to process it at the state level and add it to the collection. Some weak points are the carbon stocks indicator - so far, this is all from the TreeMap 2016 dataset. I would love to include other stocks of carbon if anyone has leads on datasets. The metrics for embodied carbon are also stretches.\nOne gap I’ve noticed since this dimension was reworked in the dimension meeting is that there is no direct treatment of soil health included anymore. We might add soil metrics for carbon stocks or forest health, but there is no clear home for it. And that being said, I have had no luck finding any reliable soil health datasets, so I’m all ears here too.\n\n\nCode\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'environment',\n  include_metrics = TRUE,\n  y_limits = c(-2, 3.25),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.2 Economics\nIt has definitely been easier to find economics data than other dimensions. Worth noting here is that the access to land indicator is not ideal. I’m using value and farm size as a proxy for access. Use of crop insurance is also a proxy, since I could not find direct insurance claim data from FSA. So for now, we are just using the ag secretary declarations of disasters that allow for insurance claims as a proxy.\n\n\nCode\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'economics',\n  include_metrics = TRUE,\n  y_limits = c(-1.5, 3.1),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.3 Production\nAgricultural exports are a pretty robust dataset at the state level from ERS, although the import data only includes the values of the top five imports for each state - not ideal. Crop diversity is based on the Cropland Data Layer, a USDA NASS spatial model estimating of crop types, which I used to calculate Shannon diversity at the county and state level. The rest of the metrics come from NASS. Production is an area in which I feel better about using NASS data than some other dimensions, but there is still some risk of these data not representing VT farms appropriately.\n\n\nCode\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'production',\n  include_metrics = TRUE,\n  y_limits = c(-1.75, 3),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.4 Health\nThe Food Environment Atlas has lots of data on access and nutrition, which accounts for much of the food security data, along with NASS. I threw in a slew of metrics for physical health under the temporary indicator name ‘physical health tbd’ just to differentiate it from the index. I also have a handful of established composite indices for health, including the UW County Health Rankings metrics for health factors (behavior, clinical care, social and economic factors, physical environment) and health outcomes (length of life, quality of life), as well as some established food security indices that are not included in this framework. I will instead use them to compare to dimensions scores as external validation in the Validation section.\n\n\nCode\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'health',\n  include_metrics = TRUE,\n  y_limits = c(-1.7, 3),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.5 Social\nThe social dimension is admittedly slim, but it could have been a lot worse. The County Health Rankings dataset brings a few useful metrics here, like social associations and disconnected youth. Census participation and voter turnout are proxies for participatory governance in food systems - I can’t imagine finding something much more specific than that at this point. I also plan on replacing mean producer age with a diversity index for age structure among producers.\n\n\nCode\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'social',\n  include_metrics = TRUE,\n  y_limits = c(-1.7, 3),\n  palette = \"ggthemes::stata_s2color\"\n)",
    "crumbs": [
      "Analysis",
      "Refined Framework"
    ]
  },
  {
    "objectID": "pages/refined_framework.html#metadata",
    "href": "pages/refined_framework.html#metadata",
    "title": "Refined Secondary Data Framework",
    "section": "2 Metadata",
    "text": "2 Metadata\nHere we pull out the set of 129 metrics from the larger collection and arrange them into a more functional, tidy dataframe:\n\n\nCode\npacman::p_load(\n  dplyr,\n  tidyr,\n  tibble\n)\n\n# Get latest year function\nsource('dev/data_pipeline_functions.R')\n\n# Load metrics data\nsm_data &lt;- readRDS('data/sm_data.rds')\n\n# Load refined framework\nraw_tree &lt;- sm_data[['refined_tree']]\n\n# Load refined framework\nframe &lt;- readRDS('data/frame.rds')\n\n\n## Join with metadata to double check the resolution of our metrics\nmeta &lt;- sm_data$metadata\n# get_str(meta)\n\ndat &lt;- frame %&gt;% \n  filter(variable_name != 'NONE') %&gt;% \n  select(variable_name) %&gt;% \n  left_join(meta, by = 'variable_name') %&gt;% \n  unique()\n# get_str(dat)\n\n# Pull it from the actual metrics data\nmetrics &lt;- sm_data$metrics %&gt;% \n  filter(\n    variable_name %in% frame$variable_name,\n    fips %in% sm_data$state_key$state_code\n  )\n# get_str(metrics)\n\n# Filter to latest year for each metric, and pivot wider\n# Also removing census participation - don't really have data at state level\n# Note to aggregate counties for this at some point\nmetrics_df &lt;- metrics %&gt;%\n  mutate(\n    value = ifelse(value == 'NaN', NA, value),\n    value = str_remove_all(value, ','),\n    value = as.numeric(value)\n  ) %&gt;%\n  get_latest_year() %&gt;% \n  pivot_wider(\n    names_from = 'variable_name',\n    values_from = 'value'\n  ) %&gt;% \n  unnest(cols = !fips) %&gt;%\n  unique()\n# get_str(metrics_df)\n\n# Let's get rid of the years so they are easier to work with\nnames(metrics_df) &lt;- str_split_i(names(metrics_df), '_', 1)\n# get_str(metrics_df)\n\n# Also get rid of DC - too many missing values\nmetrics_df &lt;- metrics_df %&gt;% \n  filter(fips != '11')\n\n# Save this for use in subsequent pages\nsaveRDS(metrics_df, 'data/metrics_df.rds')\n\n\nBelow, the metrics are displayed in a table that lets you browse and explore them.\n\n\nCode\npacman::p_load(\n  dplyr,\n  reactable,\n  stringr,\n  htmltools\n)\n\n# Pull var names from metrics_df out of full metadata\nvars &lt;- unique(frame$variable_name) %&gt;% \n  str_subset('NONE', negate = TRUE)\n\n# Load full metadata table\nmetadata &lt;- sm_data$metadata %&gt;% \n  dplyr::filter(variable_name %in% vars)\n\n# Pick out variables to display\nmetadata &lt;- metadata %&gt;% \n  select(\n    metric,\n    'Variable Name' = variable_name,\n    definition,\n    dimension,\n    index,\n    indicator,\n    units,\n    years = year,\n    'Year' = latest_year, # Renaming latest year as year, not including og year\n    source,\n    scope,\n    updates,\n    resolution,\n    url\n) %&gt;% \n  setNames(c(str_to_title(names(.))))\n\n###\nhtmltools::browsable(\n  tagList(\n    \n    tags$div(\n      style = \"display: flex; gap: 16px; margin-bottom: 20px; justify-content: center;\",\n      \n      tags$button(\n        class = \"btn btn-primary\",\n        style = \"display: flex; align-items: center; gap: 8px; padding: 8px 12px;\",\n        tagList(fontawesome::fa(\"download\"), \"Show/hide more columns\"),\n        onclick = \"Reactable.setHiddenColumns('metadata_table', prevColumns =&gt; {\n          return prevColumns.length === 0 ? ['Definition', 'Scope', 'Resolution', 'Url'] : []\n        })\"\n      ),\n      \n      tags$button(\n        class = \"btn btn-primary\",\n        style = \"display: flex; align-items: center; gap: 8px; padding: 8px 12px;\",\n        tagList(fontawesome::fa(\"download\"), \"Download as CSV\"),\n        onclick = \"Reactable.downloadDataCSV('metadata_table', 'sustainability_metadata.csv')\"\n      )\n    ),\n    \n    reactable(\n      metadata[, which(names(metadata) != 'Years')],\n      sortable = TRUE,\n      resizable = TRUE,\n      filterable = TRUE,\n      searchable = TRUE,\n      pagination = TRUE,\n      bordered = TRUE,\n      wrap = TRUE,\n      rownames = FALSE,\n      onClick = 'select',\n      striped = TRUE,\n      pageSizeOptions = c(5, 10, 25, 50, 100),\n      defaultPageSize = 5,\n      showPageSizeOptions = TRUE,\n      highlight = TRUE,\n      style = list(fontSize = \"14px\"),\n      compact = TRUE,\n      fullWidth = TRUE,\n      columns = list(\n        Metric = colDef(\n          minWidth = 200,\n          sticky = 'left'\n        ),\n        'Variable Name' = colDef(\n          minWidth = 150\n        ),\n        Definition = colDef(\n          minWidth = 250\n        ),\n        'Latest Year' = colDef(minWidth = 75),\n        Source = colDef(minWidth = 250),\n        Scope = colDef(show = FALSE),\n        Resolution = colDef(show = FALSE),\n        Url = colDef(\n          minWidth = 300,\n          show = FALSE\n        )\n      ),\n      defaultColDef = colDef(minWidth = 100),\n      elementId = \"metadata_table\",\n      details = function(index) {\n        div(\n          style = \"padding: 15px; border: 1px solid #ddd; margin: 10px 0;\n             background-color: #ecf4ed; border-radius: 10px; border-color: black;\n             box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\",\n          \n          tags$h4(\n            strong(\"Details\"), \n          ),\n          tags$p(\n            strong('Metric Name: '), \n            as.character(metadata[index, 'Metric']),\n          ),\n          tags$p(\n            strong('Variable Name: '), \n            as.character(metadata[index, 'Variable Name']),\n          ),\n          tags$p(\n            strong('Definition: '), \n            as.character(metadata[index, 'Definition']),\n          ),\n          tags$p(\n            strong('Source: '), \n            as.character(metadata[index, 'Source'])\n          ),\n          tags$p(\n            strong('Latest Year: '), \n            as.character(metadata[index, 'Year'])\n          ),\n          tags$p(\n            strong('All Years (cleaned, wrangled, and included): '), \n            as.character(metadata[index, 'Years'])\n          ),\n          tags$p(\n            strong('Updates: '), \n            str_to_title(as.character(metadata[index, 'Updates']))\n          ),\n          tags$p(\n            strong('URL: '), \n            tags$a(\n              href = as.character(metadata[index, 'Url']),\n              target = '_blank',\n              as.character(metadata[index, 'Url'])\n            )\n          )\n        )\n      }\n    )\n  )\n)\n\n\n\n\n\nShow/hide more columns\n\n\n\nDownload as CSV",
    "crumbs": [
      "Analysis",
      "Refined Framework"
    ]
  },
  {
    "objectID": "temp/test_preso.html",
    "href": "temp/test_preso.html",
    "title": "Habits",
    "section": "",
    "text": "Turn off alarm\nGet out of bed"
  },
  {
    "objectID": "pages/sensitivity.html",
    "href": "pages/sensitivity.html",
    "title": "Sensitivity Analysis",
    "section": "",
    "text": "Examples:\n\ncite bene et al 2019 (Béné et al. 2019)\n\nwhat happens when we change the number of indicators"
  },
  {
    "objectID": "pages/sensitivity.html#introduction",
    "href": "pages/sensitivity.html#introduction",
    "title": "Sensitivity Analysis",
    "section": "",
    "text": "Examples:\n\ncite bene et al 2019 (Béné et al. 2019)\n\nwhat happens when we change the number of indicators"
  },
  {
    "objectID": "pages/refine_production.html",
    "href": "pages/refine_production.html",
    "title": "Production Indicator Refinement",
    "section": "",
    "text": "This page describes the various iterations of indicator sets for the production dimension. First, we observe the indicators included in the dimension at three points in time. The second section then shows the results of the survey following the indicator refinement meeting.",
    "crumbs": [
      "Indicator Refinement",
      "Production"
    ]
  },
  {
    "objectID": "pages/refine_production.html#indicator-progression",
    "href": "pages/refine_production.html#indicator-progression",
    "title": "Production Indicator Refinement",
    "section": "1 Indicator Progression",
    "text": "1 Indicator Progression\n\n1.1 Wiltshire\nThis graph shows the original framework for the dimension as described in the Wiltshire et al. paper.\n\n\nCode\n# Use custom function in SMDO repo\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/wiltshire_tree.csv',\n  dimension_in = 'Production',\n  y_limits = c(-1.5, 2.1),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.2 Matrix\nHere is the current set of indicators in the matrix, following the Sustainability Metrics workshop in July, 2024\n\n\nCode\n# Use custom function in SMDO repo\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/matrix_tree.csv',\n  dimension_in = 'Production',\n  y_limits = c(-1.5, 2.1),\n  palette = \"ggthemes::stata_s2color\"\n)",
    "crumbs": [
      "Indicator Refinement",
      "Production"
    ]
  },
  {
    "objectID": "pages/refine_production.html#survey",
    "href": "pages/refine_production.html#survey",
    "title": "Production Indicator Refinement",
    "section": "2 Survey",
    "text": "2 Survey\nThese are the results from the follow-up survey to the production indicator refinement meeting on January 15th. This feedback will be used to refine the framework for the next RFP.\n\n2.1 Indicators\n\n\nCode\nraw &lt;- read_csv('data/surveys/prod_survey.csv')\n\ndat &lt;- raw %&gt;% \n  select(\n    ends_with('GROUP'),\n  ) %&gt;% \n  setNames(c(\n    'indi_must',\n    'indi_probably',\n    'indi_probably_not',\n    'indi_must_not',\n    'idx_must',\n    'idx_probably',\n    'idx_probably_not',\n    'idx_must_not'\n  )) %&gt;% \n  .[-c(1:2), ]\n\nto_df &lt;- function(x) {\n  if (all(is.na(x))) {\n    return(NULL)\n  } else {\n   x %&gt;%\n    str_remove(' \\\\(joint indicator with Marketability\\\\)') %&gt;%\n    str_remove('\\\\*.*') %&gt;%\n    str_remove(' \\\\(see notes with questions') %&gt;%\n    str_split(',(?!\\\\s)') %&gt;% # Split on comma not followed by a space\n    unlist() %&gt;% \n    table() %&gt;% \n    as.data.frame() %&gt;% \n    setNames(c('indicator', 'freq')) %&gt;% \n     arrange(desc(freq))\n  }\n}\n\nindi_out &lt;- map(dat[1:4], to_df)\nidx_out &lt;- map(dat[5:8], to_df)\n\n# Add scores by multipliers\nmultipliers &lt;- c(3:0)\nind_tables &lt;- map2(indi_out, multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(ind_tables, ~ {\n  col_name &lt;- str_remove(.y, 'indi_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n})\n\ngraph_table &lt;- graph_table %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not * 1e2 + must_not,\n    indicator = fct_reorder(indicator, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:must_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      \"must_not\",\n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(indicator) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n# Note some missing data throws off the graph table. Fix it here\ngraph_table_clean &lt;- graph_table %&gt;% \n  mutate(\n    sort_key = case_when(\n      str_detect(indicator, 'Production Species Diversity') ~ 3e6,\n      str_detect(indicator, 'Not livestock specific') ~ 1010002,\n      .default = sort_key\n    )\n  )\n\n\n\n\nCode\nggplot(graph_table_clean, aes(\n  y = reorder(indicator, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Indicator\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 20),\n    legend.position = 'top'\n    ) +\n  scale_fill_brewer(\n    palette = \"RdBu\", \n    direction = -1,\n    limits = c(\n      \"must\",\n      \"probably\", \n      \"probably_not\", \n      \"must_not\" \n    ),\n    labels = c(\n      \"Must Include\", \n      \"Probably Include\", \n      \"Probably Not Include\", \n      \"Must Not Include\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nWe are coding this so “Must Include” is worth 3 points, “Probably Include” is worth 2 points, “Probably Not Include” is worth 1 point, and “Must Not Include” is worth 0 points. Note that the last column is the sum of proportions of “Must Include” and “Probably Include”. You can sort, search, expand, or page through the table below.\n\n\n\n\n\n\n\n\n2.2 Indices\n\n\nCode\n# Add scores by multipliers\nmultipliers &lt;- c(3:1)\nidx_tables &lt;- map2(idx_out[1:3], multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(index = indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(idx_tables, ~ {\n  col_name &lt;- str_remove(.y, 'idx_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n}) %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not,\n    sort_key = ifelse(str_detect(index, 'Carbon'), 5e6, sort_key),\n    index = fct_reorder(index, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:probably_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      # \"must_not\",\n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(index) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n\ncolors &lt;- RColorBrewer::brewer.pal(4, 'RdBu')\n\nggplot(graph_table, aes(\n  y = reorder(index, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Index\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 20),\n    legend.position = 'top'\n    ) +\n  scale_fill_manual(\n    values = rev(colors),\n    limits = c(\n      \"must\",\n      \"probably\",\n      \"probably_not\"\n    ),\n    labels = c(\n      \"Must Include\",\n      \"Probably Include\",\n      \"Probably Not Include\"\n    )\n  )",
    "crumbs": [
      "Indicator Refinement",
      "Production"
    ]
  },
  {
    "objectID": "pages/refine_economics.html",
    "href": "pages/refine_economics.html",
    "title": "Economic Indicator Refinement",
    "section": "",
    "text": "This page describes the various iterations of indicator sets for the economics dimensions. First, we observe the indicators included in the dimension at three points in time. The second section then shows the results of the survey following the indicator refinement meeting. A final set of indicators to incorporate into the next RFP is still in the works!",
    "crumbs": [
      "Indicator Refinement",
      "Economics"
    ]
  },
  {
    "objectID": "pages/refine_economics.html#indicator-progression",
    "href": "pages/refine_economics.html#indicator-progression",
    "title": "Economic Indicator Refinement",
    "section": "1 Indicator Progression",
    "text": "1 Indicator Progression\n\n1.1 Wiltshire\nThis graph shows the original framework as described in the Wiltshire et al. paper.\n\n\nCode\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/econ_wiltshire_tree.csv',\n  dimension_in = 'economics',\n  include_metrics = FALSE,\n  y_limits = c(-1.5, 2.1)\n)\n\n\n\n\n\n\n\n\n\n\n\n1.2 Matrix\nHere is the current set of indicators in the matrix, following the Sustainability Metrics workshop in July, 2024\n\n\nCode\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/econ_tree.csv',\n  dimension_in = 'economics',\n  y_limits = c(-1.5, 2.1)\n)\n\n\n\n\n\n\n\n\n\n\n\n1.3 Refinement Meeting\nFinally, the tentative set of indicators following the indicator refinement meeting on November 15th, 2024\n\n\nCode\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/econ_meeting_tree.csv',\n  dimension_in = 'economics',\n  y_limits = c(-1.5, 2.1)\n)",
    "crumbs": [
      "Indicator Refinement",
      "Economics"
    ]
  },
  {
    "objectID": "pages/refine_economics.html#survey",
    "href": "pages/refine_economics.html#survey",
    "title": "Economic Indicator Refinement",
    "section": "2 Survey",
    "text": "2 Survey\nThese are the results from the follow-up survey to the economic indicator refinement meeting on November 15th. This feedback will be used to refine the framework for the next RFP.\n\n2.1 Indicators\n\n\nCode\nraw &lt;- read_csv('data/surveys/econ_survey.csv')\n\ndat &lt;- raw %&gt;% \n  select(\n    starts_with('Q'),\n    -ends_with('RANK')\n  ) %&gt;% \n  setNames(c(\n    'indi_must',\n    'indi_probably',\n    'indi_probably_not',\n    'indi_must_not',\n    paste0('add_indi_', 1:3),\n    'notes',\n    'idx_must',\n    'idx_probably',\n    'idx_probably_not',\n    'idx_must_not',\n    paste0('add_idx_', 1:3),\n    'idx_notes',\n    'final_notes'\n  )) %&gt;% \n  .[-c(1:2), ]\n\ngroups &lt;- select(dat, indi_must:indi_must_not, idx_must:idx_probably_not)\n\nto_df &lt;- function(x) {\n  x %&gt;% \n    str_split(',') %&gt;% \n    unlist() %&gt;% \n    table() %&gt;% \n    as.data.frame() %&gt;% \n    setNames(c('indicator', 'freq')) %&gt;% \n    arrange(desc(freq))\n}\n\nindi_out &lt;- map(groups[1:4], to_df)\nidx_out &lt;- map(groups[5:7], to_df)\n\n# Add scores by multipliers\nmultipliers &lt;- c(3:0)\nind_tables &lt;- map2(indi_out, multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(ind_tables, ~ {\n  col_name &lt;- str_remove(.y, 'indi_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n}) %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not * 1e2 + must_not,\n    indicator = fct_reorder(indicator, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:must_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      \"must_not\",\n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(indicator) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n\n\n\nCode\nggplot(graph_table, aes(\n  y = reorder(indicator, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Indicator\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 20),\n    legend.position = 'top'\n    ) +\n  scale_fill_brewer(\n    palette = \"RdBu\", \n    direction = -1,\n    limits = c(\n      \"must\",\n      \"probably\", \n      \"probably_not\", \n      \"must_not\" \n    ),\n    labels = c(\n      \"Must Include\", \n      \"Probably Include\", \n      \"Probably Not Include\", \n      \"Must Not Include\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nWe are coding this so “Must Include” is worth 3 points, “Probably Include” is worth 2 points, “Probably Not Include” is worth 1 point, and “Must Not Include” is worth 0 points. Note that the last column is the sum of proportions of “Must Include” and “Probably Include”. You can sort, search, expand, or page through the table below.\n\n\nCode\n# Add category to tables\nprops &lt;- ind_tables %&gt;% \n  imap(~ .x %&gt;% mutate(cat = .y)) %&gt;% \n  bind_rows() %&gt;% \n  select(-score)\n \n# Get proportion of probably include OR must include\nprop_prob_or_must_include &lt;- props %&gt;% \n  filter(cat %in% c('indi_must', 'indi_probably')) %&gt;% \n  group_by(indicator) %&gt;% \n  summarize(prop_include = sum(freq) / 6) %&gt;% \n  arrange(desc(prop_include))\n\n# Get proportion of must include\nprop_must_include &lt;- props %&gt;% \n  filter(cat == 'indi_must') %&gt;% \n  group_by(indicator) %&gt;% \n  summarize(prop_must = sum(freq) / 6) %&gt;% \n  arrange(desc(prop_must))\n\n# Add up weighted scores\nind_scores &lt;- ind_tables %&gt;% \n  bind_rows() %&gt;% \n  group_by(indicator) %&gt;% \n  summarize(score = sum(score, na.rm = TRUE)) %&gt;% \n  arrange(desc(score))\n\n# Join everything together\nscores_table &lt;- ind_scores %&gt;% \n  full_join(prop_must_include) %&gt;% \n  full_join(prop_prob_or_must_include) %&gt;% \n  arrange(desc(score)) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    across(c(3:4), ~ format(round(.x, 2), nsmall = 2))\n  ) %&gt;% \n  setNames(c('Indicator', 'Score', 'Proportion Must Include', 'Proportion Must OR Probably Include'))\n\n\n\n\n\n\n\n\n\n\n2.2 Indices\n\n\nCode\nidx_out &lt;- map(groups[5:7], to_df)\n\n# Add scores by multipliers\nmultipliers &lt;- c(3:1)\nidx_tables &lt;- map2(idx_out, multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(index = indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(idx_tables, ~ {\n  col_name &lt;- str_remove(.y, 'idx_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n}) %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not,\n    index = fct_reorder(index, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:probably_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(index) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n\ncolors &lt;- RColorBrewer::brewer.pal(4, 'RdBu')[2:4]\n\nggplot(graph_table, aes(\n  y = reorder(index, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Index\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 16),\n    legend.position = 'top'\n    ) +\n  scale_fill_manual(\n    values = rev(colors),\n    limits = c(\n      \"must\",\n      \"probably\",\n      \"probably_not\"\n    ),\n    labels = c(\n      \"Must Include\",\n      \"Probably Include\",\n      \"Probably Not Include\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nThe indices are going through the same treatment as indicators above - scored from 3 to 0. Note that there were no indices rated as “Must Not Include”.",
    "crumbs": [
      "Indicator Refinement",
      "Economics"
    ]
  },
  {
    "objectID": "pages/refinement_process.html",
    "href": "pages/refinement_process.html",
    "title": "Indicator Refinement Process",
    "section": "",
    "text": "To Add:\n\nDescribe dimension meetings\nlink Wiltshire (Wiltshire et al. 2024)\nLink Bene et al 2024 (Béné et al. 2024), describe their process\nWhat is more settled, what is not (social and human)\n\n\n\n\nWhiteboard from economics dimension refinement meeting, November 15th, 2024",
    "crumbs": [
      "Indicator Refinement",
      "Process"
    ]
  },
  {
    "objectID": "pages/refinement_process.html#introduction",
    "href": "pages/refinement_process.html#introduction",
    "title": "Indicator Refinement Process",
    "section": "",
    "text": "To Add:\n\nDescribe dimension meetings\nlink Wiltshire (Wiltshire et al. 2024)\nLink Bene et al 2024 (Béné et al. 2024), describe their process\nWhat is more settled, what is not (social and human)\n\n\n\n\nWhiteboard from economics dimension refinement meeting, November 15th, 2024",
    "crumbs": [
      "Indicator Refinement",
      "Process"
    ]
  },
  {
    "objectID": "pages/refine_environment.html",
    "href": "pages/refine_environment.html",
    "title": "Environment Indicator Refinement",
    "section": "",
    "text": "This page describes the various iterations of indicator sets for the environment dimension. First, we observe the indicators included in the dimension at three points in time. The second section then shows the results of the survey following the indicator refinement meeting. A final set of indicators to incorporate into the next RFP is still in the works!",
    "crumbs": [
      "Indicator Refinement",
      "Environment"
    ]
  },
  {
    "objectID": "pages/refine_environment.html#indicator-progression",
    "href": "pages/refine_environment.html#indicator-progression",
    "title": "Environment Indicator Refinement",
    "section": "1 Indicator Progression",
    "text": "1 Indicator Progression\n\n1.1 Wiltshire\nThis graph shows the original framework for the dimension as described in the Wiltshire et al. paper.\n\n\nCode\n# Use custom function in SMDO repo\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/wiltshire_tree.csv',\n  dimension_in = 'Environment',\n  y_limits = c(-1.5, 2.1),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.2 Matrix\nHere is the current set of indicators in the matrix, following the Sustainability Metrics workshop in July, 2024\n\n\nCode\n# Use custom function in SMDO repo\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/matrix_tree.csv',\n  dimension_in = 'Environment',\n  y_limits = c(-1.5, 2.1),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.3 Refinement Meeting\nFinally, the tentative set of indicators following the indicator refinement meeting on November 22nd, 2024\n\n\nCode\n# Use custom function in SMDO repo\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/env_meeting_tree.csv',\n  dimension_in = 'Environment',\n  y_limits = c(-1.5, 2.1),\n  palette = \"ggthemes::stata_s2color\"\n)",
    "crumbs": [
      "Indicator Refinement",
      "Environment"
    ]
  },
  {
    "objectID": "pages/refine_environment.html#survey",
    "href": "pages/refine_environment.html#survey",
    "title": "Environment Indicator Refinement",
    "section": "2 Survey",
    "text": "2 Survey\nThese are the results from the follow-up survey to the economic indicator refinement meeting on November 15th. This feedback will be used to refine the framework for the next RFP.\n\n2.1 Indicators\n\n\nCode\nraw &lt;- read_csv('data/surveys/env_survey.csv')\n\ndat &lt;- raw %&gt;% \n  select(\n    ends_with('GROUP'),\n  ) %&gt;% \n  setNames(c(\n    'indi_must',\n    'indi_probably',\n    'indi_probably_not',\n    'indi_must_not',\n    'idx_must',\n    'idx_probably',\n    'idx_probably_not',\n    'idx_must_not'\n  )) %&gt;% \n  .[-c(1:2), ]\n\nto_df &lt;- function(x) {\n  x %&gt;%\n    str_replace_all('PFAS, PFOS', 'PFAS/PFOS') %&gt;% \n    str_replace_all('soil loss/', 'Soil loss/') %&gt;% \n    str_split(',') %&gt;% \n    unlist() %&gt;% \n    table() %&gt;% \n    as.data.frame() %&gt;% \n    setNames(c('indicator', 'freq')) %&gt;% \n    arrange(desc(freq))\n}\n\nindi_out &lt;- map(dat[1:4], to_df)\nidx_out &lt;- map(dat[5:8], to_df)\n\n# Add scores by multipliers\nmultipliers &lt;- c(3:0)\nind_tables &lt;- map2(indi_out, multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(ind_tables, ~ {\n  col_name &lt;- str_remove(.y, 'indi_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n}) %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not * 1e2 + must_not,\n    indicator = fct_reorder(indicator, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:must_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      \"must_not\",\n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(indicator) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n\n\n\nCode\nggplot(graph_table, aes(\n  y = reorder(indicator, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Indicator\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 20),\n    legend.position = 'top'\n    ) +\n  scale_fill_brewer(\n    palette = \"RdBu\", \n    direction = -1,\n    limits = c(\n      \"must\",\n      \"probably\", \n      \"probably_not\", \n      \"must_not\" \n    ),\n    labels = c(\n      \"Must Include\", \n      \"Probably Include\", \n      \"Probably Not Include\", \n      \"Must Not Include\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nWe are coding this so “Must Include” is worth 3 points, “Probably Include” is worth 2 points, “Probably Not Include” is worth 1 point, and “Must Not Include” is worth 0 points. Note that the last column is the sum of proportions of “Must Include” and “Probably Include”. You can sort, search, expand, or page through the table below.\n\n\n\n\n\n\n\n\n2.2 Indices\n\n\nCode\n# Add scores by multipliers\nmultipliers &lt;- c(3:0)\nidx_tables &lt;- map2(idx_out, multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(index = indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(idx_tables, ~ {\n  col_name &lt;- str_remove(.y, 'idx_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n}) %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not,\n    sort_key = ifelse(str_detect(index, 'Carbon'), 5e6, sort_key),\n    index = fct_reorder(index, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:must_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      \"must_not\",\n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(index) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n\ncolors &lt;- RColorBrewer::brewer.pal(4, 'RdBu')\n\nggplot(graph_table, aes(\n  y = reorder(index, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Index\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 20),\n    legend.position = 'top'\n    ) +\n  scale_fill_manual(\n    values = rev(colors),\n    limits = c(\n      \"must\",\n      \"probably\",\n      \"probably_not\",\n      'must_not'\n    ),\n    labels = c(\n      \"Must Include\",\n      \"Probably Include\",\n      \"Probably Not Include\",\n      \"Must Not Include\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nThe indices are going through the same treatment as indicators above - scored from 3 to 0. Note here that the “Carbon ($ GHGs/nutrients)” index seems to be missing a vote. So, it only has 12 points, but the proportion of votes for “Must Include” is 1.",
    "crumbs": [
      "Indicator Refinement",
      "Environment"
    ]
  },
  {
    "objectID": "pages/selection.html",
    "href": "pages/selection.html",
    "title": "Variable Selection and Regression",
    "section": "",
    "text": "On this page we will take our min-max normalized, geometrically averaged scores, which look like the most reliable and approachable so far, and take a deeper dive into variable selection, regression, and PCA. From the dimension meetings, it sounds like we may have some indicators with a couple of metrics, and potentially others with dozens. Because of this, and because of our focus on developing sensible indicators, I think it will be best to do any weighting at the indicator level or above. This also reduces our variable count substantially in relation to our state count of 51, opening more doors for PCA.\nIt is worth emphasizing at the top that the metrics that are making up this secondary data framework are not a great representation of the system. There are some important holes, as well as a heap of metrics that are serving as rather uninspiring proxies. So, extrapolation of these results beyond the confines of the exercise is not recommended. The purpose here is to explore strengths and tradeoffs in methods for aggregating the data. As primary data come in and make up the bulk of the framework and secondary data are used to fill in the gaps, this should start becoming more interpretable.",
    "crumbs": [
      "Analysis",
      "Selection and Regression"
    ]
  },
  {
    "objectID": "pages/selection.html#component-extraction",
    "href": "pages/selection.html#component-extraction",
    "title": "Variable Selection and Regression",
    "section": "2.1 Component Extraction",
    "text": "2.1 Component Extraction\n\n\nCode\npacman::p_load(\n  psych\n)\n\n# Filter down to just indicators for PCA\npca_dat &lt;- dat %&gt;% \n  select(starts_with('indic')) %&gt;% \n  setNames(c(str_remove(names(.), 'indic_')))\n# get_str(pca_dat)\n\n# Explore how many factors to extract\nVSS(pca_dat, n = 8, rotate = 'varimax')\nfa.parallel(pca_dat)\n\n\nBoth MAP and Parallel Analysis determine that there should be 5 components.\n\n\nCode\npca_out &lt;- pca(pca_dat, nfactors = 5)\nplot(pca_out$values)\nabline(h = 1)\n\n\nThe scree plot is not all that convincing, though. One could make an argument for seven components.",
    "crumbs": [
      "Analysis",
      "Selection and Regression"
    ]
  },
  {
    "objectID": "pages/selection.html#run-pca",
    "href": "pages/selection.html#run-pca",
    "title": "Variable Selection and Regression",
    "section": "2.2 Run PCA",
    "text": "2.2 Run PCA\nLet’s go ahead with the recommended components from MAP and PA, which are generally more reliable than scree plots.\n\n\nCode\npca_out\n\n\nThere is a lot to look at here, but here are some impressions.\nMost of our current economics indicators (access to land to income stability), are coalescing into RC1. However, access to land splits out into RC3, alongside environment indicators like carbon stocks and forest health, as well as production indicators like inputs and total quantity of food products. The access to land indicator does not have an ideal set of metrics under it currently - it is made up of land and building value per farm and acreage per farm as a proxy for access. So it seems reasonable enough that this indicator is pulling away from the rest of the economics indicators.\nThe environment indicators (carbon stocks to water quantity) mostly make up RC5, but are also split between several other components. The carbon stocks and forest health indicators are currently both derived from the USFS TreeMap dataset, so it makes sense they fall together in RC5. This is a particularly scattered dimension though - perhaps partly from hinky proxy metrics and partly for the diversity of the dimension itself.\nHealth indicators (education to physical health) fall pretty consistently into RC2. A notable exception is food access, which falls into RC5 along with TreeMap data. I have a hunch that RC5 is measuring the rural/urban divide at this point. The culturally appropriate food indicator also moves over to RC1 alongside economics indicators. Given that this indicator currently consists only of the ability of School Food Authorities to provide culturally appropriate foods, this is probably tracking with wealth.\nProduction indicators (richness to value added markets) fall mostly into RC2. However, richness (measured by crop diversity) swings out into RC4, which is a bit of a grab bag but does contain some forest indicators. The economics dimension RC1 also loads strongly onto the value added markets indicator.\nFinally, the social dimension is scattered all over the place. I can’t make much sense of it as a whole, given that it has a pretty unsatisfactory set of metrics behind it at this point.\nThe next step for this PCA path is to see how things look if we aggregate our indices and dimensions based on these PCA loadings in the style of Nicoletti (2000), rather than working with the arithmetic/geometric means as we do below.",
    "crumbs": [
      "Analysis",
      "Selection and Regression"
    ]
  },
  {
    "objectID": "pages/selection.html#economics",
    "href": "pages/selection.html#economics",
    "title": "Variable Selection and Regression",
    "section": "3.1 Economics",
    "text": "3.1 Economics\n\n3.1.1 Linear Model\nFirst we can try a plain old linear model to see how economics loads onto its indicators.\n\n\nCode\n# Reduce data down to dimen_economics and all indicators\necon_dat &lt;- select(dat, dimen_economics, starts_with('indic')) %&gt;% \n  setNames(c(names(.) %&gt;% str_remove('indic_|dimen_')))\nget_str(econ_dat)\n\nlm &lt;- lm(economics ~ ., data = econ_dat)\nsummary(lm)\n\n\nWe can see that most of the economics indicators (access to land, wealth and income distribution, income stability) are significant predictors, while operations diversification is close. But some surprises are access to culturally appropriate food (school food authorities serving culturally relevant food), housing supply and quality, as well as a few production indicators, like richness (crop diversity), production inputs, and value-added markets. Social connectedness from the social dimension also makes it on the list. The largest coefficients by a wide margin are for access to land and wealth and income distribution.\n\n\n3.1.2 Splitting Data\nHere we split out data into a 60/40 training/test set for cross validation with GLMnet and Random Forest models. Note that we are pushing the limits of our sample size. But this should help protect against overfitting.\n\n\nCode\npacman::p_load(\n  caret,\n  ranger,\n  glmnet\n)\n\n# Split data 60/40\nset.seed(42)\nindices &lt;- createDataPartition(econ_dat$economics, p = 0.60, list = FALSE)\ntraining_data &lt;- econ_dat[indices, ]\ntesting_data &lt;- econ_dat[-indices,]\n\nmy_folds &lt;- createFolds(training_data$economics, k = 5, list = TRUE)\n\n# Control\nmy_control &lt;- trainControl(\n  method = 'cv',\n  number = 5,\n  verboseIter = TRUE,\n  index = my_folds\n)\n\n# Check for zero variance or near zero variance indicators\nnearZeroVar(dat, names = TRUE, saveMetrics = TRUE)\n# All clear\n\n\n\n\n3.1.3 GLMnet\nHere we use a GLMnet to find an optimal balance between a ridge regression, which penalizes variables based on the magnitude of coefficients, and lasso regression, which adds a penalty based on the absolute value of coefficients. We use a tuning grid to find optimal values of alpha (0 = ridge, 1 = lasso) and lambda (the penalty parameter). Both this and the random forest model are particularly good at prediction, but also provide a metric for variable importance that can help us interpret our indicators.\n\n\nCode\nset.seed(42)\necon_glmnet &lt;- train(\n  economics ~ .,\n  data = training_data, \n  tuneGrid = expand.grid(\n    alpha = seq(0.1, 1, length = 5),\n    lambda = seq(0.0001, 0.1, length = 100)\n  ),\n  method = \"glmnet\",\n  trControl = my_control,\n  preProcess = c('zv', 'center', 'scale')\n)\n\nimportance &lt;- varImp(econ_glmnet, scale = TRUE)\nplot(importance)\n\n# Predict\n# p &lt;- predict(econ_glmnet, testing_data)\n# postResample(pred = p, obs = testing_data$economics)\n\n\nThe optimal hyperparameters from the tuning grid were alpha = 0.1 (mostly ridge regression) and lambda = 0.00313. The variable importance plot is on a relative scale of 0 (unimportant) to 100 (most important) in terms of predictive power. Curiously, it is showing that the value added market indicator from the production dimension is a better predictor of economics than any economics indicator.\n\n\n3.1.4 Random Forest\nNow we can try a random forest, which is particularly good at handling non-linear relationships. Here we use the RMSE to determine the optimal combination of mtry (the number of variables selected at each node in the decision tree), the split rule, and the minimum node size.\n\n\nCode\nset.seed(42)\necon_rf &lt;- train(\n  economics ~ .,\n  data = training_data, \n  tuneLength = 7,\n  method = \"ranger\",\n  trControl = my_control,\n  importance = 'impurity'\n)\n\n# econ_rf\n# plot(econ_rf)\n\nimportance &lt;- varImp(econ_rf, scale = TRUE)\nplot(importance)\n\n# Predict\n# p &lt;- predict(model_mf, testing_data)\n# postResample(pred = p, obs = testing_data$rebl_tpm)\n\n\nThe random forest model is also picking out the value-added market indicator as the best predictor of economics dimension scores, followed closely by operations diversification, wealth and income distribution, and income stability.\nVery curious how value-added markets keep sticking out. The two metrics making up this indicator are both from NASS: the percentage of farms reporting value-added sales, and of those farms, the percentage of value-added sales out of total sales.",
    "crumbs": [
      "Analysis",
      "Selection and Regression"
    ]
  },
  {
    "objectID": "pages/sm-explorer.html",
    "href": "pages/sm-explorer.html",
    "title": "SM-Explorer",
    "section": "",
    "text": "Caution\n\n\n\n\n\nThe SM-Explorer is a work in progress. There are a small heap of bugs I’m already aware of, and about a hundred things I’d still like to add. If/when you find things that aren’t working properly, please feel free to let Chris know!\n\n\n\nThis is a Shiny app that allows for interactive exploration of metrics, mostly at the county level. It includes a map page, a bivariate plot explorer, and a metadata table much like what is included in this Quarto doc. It tends to work best if you open it in its own page using the button below:\n\n\n\n\nGo To SM-Explorer\n\n\n\n\nYou can also just use it here in the window. Note that some functions (like the full screen button) won’t work here.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Secondary Data",
      "SM-Explorer"
    ]
  }
]