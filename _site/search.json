[
  {
    "objectID": "pages/validation.html",
    "href": "pages/validation.html",
    "title": "Validation",
    "section": "",
    "text": "The goal here is to use our five tentative dimension scores as predictors to compare against other established metrics:\nNote for now that this is a bit tautological because some of these indices are used within the framework already. Perhaps there are better external measures to compare against. We also may not want to include complete indices like food security as metrics or indicators in the final framework. Open to thoughts on others ways to approach this.\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  stringr\n)\n\n# Load state fips key to join other datasets\nstate_key &lt;- readRDS('data/sm_data.rds')[['state_key']] %&gt;% \n  select(state, state_code)\n\n# Load cleaned aggregated data for all levels of regresion\nminmax_geo &lt;- readRDS('data/minmax_geo_all_levels.rds')\nget_str(minmax_geo)\n\n# Reduce to just dimension scores, and remove prefix\ndimension_scores &lt;- minmax_geo %&gt;% \n  select(state, starts_with('dimen')) %&gt;% \n  setNames(c(str_remove(names(.), 'dimen_')))\nget_str(dimension_scores)\n\n# Pull raw metrics data\nmetrics_df &lt;- readRDS('data/metrics_df.rds')\nget_str(metrics_df)\n\n# Pull just food insecurity from raw metrics data and add it to the dimension scores\nvalidation_vars &lt;- metrics_df %&gt;% \n  select(\n    fips, \n    foodInsecOverall,\n    foodInsecChild, \n    lifeExpectancy,\n    CO2FromAg\n  )\nget_str(validation_vars)\n\n# Pull health outcomes from UW county health rankings (healthOutcomeZ) \n# Need to finish this []\nmetrics &lt;- readRDS('data/sm_data.rds')[['metrics']]\nget_str(metrics)\n\n# Combine validation vars with dimension scores to get our dataset for regressions\ndat &lt;- dimension_scores %&gt;% \n  left_join(state_key) %&gt;% \n  left_join(validation_vars, by = join_by(state_code == fips)) %&gt;% \n  select(-state_code)\nget_str(dat)",
    "crumbs": [
      "Secondary Data Rework",
      "Validation"
    ]
  },
  {
    "objectID": "pages/validation.html#overall",
    "href": "pages/validation.html#overall",
    "title": "Validation",
    "section": "1.1 Overall",
    "text": "1.1 Overall\n\n\nCode\nlm1 &lt;- lm(\n  foodInsecOverall ~ economics + environment + health + production + social,\n  data = dat\n)\nsummary(lm1)\nget_res_plots(lm1)",
    "crumbs": [
      "Secondary Data Rework",
      "Validation"
    ]
  },
  {
    "objectID": "pages/validation.html#child",
    "href": "pages/validation.html#child",
    "title": "Validation",
    "section": "1.2 Child",
    "text": "1.2 Child\n\n\nCode\nlm2 &lt;- lm(\n  foodInsecChild ~ economics + environment + health + production + social,\n  data = dat\n)\nsummary(lm2)\nget_res_plots(lm2)",
    "crumbs": [
      "Secondary Data Rework",
      "Validation"
    ]
  },
  {
    "objectID": "pages/sm-explorer.html",
    "href": "pages/sm-explorer.html",
    "title": "SM-Explorer",
    "section": "",
    "text": "Caution\n\n\n\n\n\nThe SM-Explorer is a work in progress. There are a small heap of bugs I’m already aware of, and about a hundred things I’d still like to add. If/when you find things that aren’t working properly, please feel free to let Chris know!\n\n\n\nThis is a Shiny app that allows for interactive exploration of metrics, mostly at the county level. It includes a map page, a bivariate plot explorer, and a metadata table much like what is included in this Quarto doc. It tends to work best if you open it in its own page using the button below:\n\n\n\n\nGo To SM-Explorer\n\n\n\n\nYou can also just use it here in the window. Note that some functions (like the full screen button) won’t work here.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Secondary Data",
      "SM-Explorer"
    ]
  },
  {
    "objectID": "pages/refine_production.html",
    "href": "pages/refine_production.html",
    "title": "Production Indicator Refinement",
    "section": "",
    "text": "This page describes the various iterations of indicator sets for the production dimension. First, we observe the indicators included in the dimension at three points in time. The second section then shows the results of the survey following the indicator refinement meeting.",
    "crumbs": [
      "Framework",
      "Indicator Refinement",
      "Production"
    ]
  },
  {
    "objectID": "pages/refine_production.html#indicator-progression",
    "href": "pages/refine_production.html#indicator-progression",
    "title": "Production Indicator Refinement",
    "section": "1 Indicator Progression",
    "text": "1 Indicator Progression\n\n1.1 Wiltshire\nThis graph shows the original framework for the dimension as described in the Wiltshire et al. paper.\n\n\nCode\n# Use custom function in SMDO repo\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/wiltshire_tree.csv',\n  dimension_in = 'Production',\n  y_limits = c(-1.5, 2.1),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.2 Matrix\nHere is the current set of indicators in the matrix, following the Sustainability Metrics workshop in July, 2024\n\n\nCode\n# Use custom function in SMDO repo\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/matrix_tree.csv',\n  dimension_in = 'Production',\n  y_limits = c(-1.5, 2.1),\n  palette = \"ggthemes::stata_s2color\"\n)",
    "crumbs": [
      "Framework",
      "Indicator Refinement",
      "Production"
    ]
  },
  {
    "objectID": "pages/refine_production.html#survey",
    "href": "pages/refine_production.html#survey",
    "title": "Production Indicator Refinement",
    "section": "2 Survey",
    "text": "2 Survey\nThese are the results from the follow-up survey to the production indicator refinement meeting on January 15th. This feedback will be used to refine the framework for the next RFP.\n\n2.1 Indicators\n\n\nCode\nraw &lt;- read_csv('data/surveys/prod_survey.csv')\n\ndat &lt;- raw %&gt;% \n  select(\n    ends_with('GROUP'),\n  ) %&gt;% \n  setNames(c(\n    'indi_must',\n    'indi_probably',\n    'indi_probably_not',\n    'indi_must_not',\n    'idx_must',\n    'idx_probably',\n    'idx_probably_not',\n    'idx_must_not'\n  )) %&gt;% \n  .[-c(1:2), ]\n\nto_df &lt;- function(x) {\n  if (all(is.na(x))) {\n    return(NULL)\n  } else {\n   x %&gt;%\n    str_remove(' \\\\(joint indicator with Marketability\\\\)') %&gt;%\n    str_remove('\\\\*.*') %&gt;%\n    str_remove(' \\\\(see notes with questions') %&gt;%\n    str_split(',(?!\\\\s)') %&gt;% # Split on comma not followed by a space\n    unlist() %&gt;% \n    table() %&gt;% \n    as.data.frame() %&gt;% \n    setNames(c('indicator', 'freq')) %&gt;% \n     arrange(desc(freq))\n  }\n}\n\nindi_out &lt;- map(dat[1:4], to_df)\nidx_out &lt;- map(dat[5:8], to_df)\n\n# Add scores by multipliers\nmultipliers &lt;- c(3:0)\nind_tables &lt;- map2(indi_out, multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(ind_tables, ~ {\n  col_name &lt;- str_remove(.y, 'indi_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n})\n\ngraph_table &lt;- graph_table %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not * 1e2 + must_not,\n    indicator = fct_reorder(indicator, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:must_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      \"must_not\",\n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(indicator) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n# Note some missing data throws off the graph table. Fix it here\ngraph_table_clean &lt;- graph_table %&gt;% \n  mutate(\n    sort_key = case_when(\n      str_detect(indicator, 'Production Species Diversity') ~ 3e6,\n      str_detect(indicator, 'Not livestock specific') ~ 1010002,\n      .default = sort_key\n    )\n  )\n\n\n\n\nCode\nggplot(graph_table_clean, aes(\n  y = reorder(indicator, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Indicator\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 20),\n    legend.position = 'top'\n    ) +\n  scale_fill_brewer(\n    palette = \"RdBu\", \n    direction = -1,\n    limits = c(\n      \"must\",\n      \"probably\", \n      \"probably_not\", \n      \"must_not\" \n    ),\n    labels = c(\n      \"Must Include\", \n      \"Probably Include\", \n      \"Probably Not Include\", \n      \"Must Not Include\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nWe are coding this so “Must Include” is worth 3 points, “Probably Include” is worth 2 points, “Probably Not Include” is worth 1 point, and “Must Not Include” is worth 0 points. Note that the last column is the sum of proportions of “Must Include” and “Probably Include”. You can sort, search, expand, or page through the table below.\n\n\n\n\n\n\n\n\n2.2 Indices\n\n\nCode\n# Add scores by multipliers\nmultipliers &lt;- c(3:1)\nidx_tables &lt;- map2(idx_out[1:3], multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(index = indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(idx_tables, ~ {\n  col_name &lt;- str_remove(.y, 'idx_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n}) %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not,\n    sort_key = ifelse(str_detect(index, 'Carbon'), 5e6, sort_key),\n    index = fct_reorder(index, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:probably_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      # \"must_not\",\n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(index) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n\ncolors &lt;- RColorBrewer::brewer.pal(4, 'RdBu')\n\nggplot(graph_table, aes(\n  y = reorder(index, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Index\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 20),\n    legend.position = 'top'\n    ) +\n  scale_fill_manual(\n    values = rev(colors),\n    limits = c(\n      \"must\",\n      \"probably\",\n      \"probably_not\"\n    ),\n    labels = c(\n      \"Must Include\",\n      \"Probably Include\",\n      \"Probably Not Include\"\n    )\n  )",
    "crumbs": [
      "Framework",
      "Indicator Refinement",
      "Production"
    ]
  },
  {
    "objectID": "pages/refine_economics.html",
    "href": "pages/refine_economics.html",
    "title": "Economic Indicator Refinement",
    "section": "",
    "text": "This page describes the various iterations of indicator sets for the economics dimensions. First, we observe the indicators included in the dimension at three points in time. The second section then shows the results of the survey following the indicator refinement meeting. A final set of indicators to incorporate into the next RFP is still in the works!",
    "crumbs": [
      "Framework",
      "Indicator Refinement",
      "Economics"
    ]
  },
  {
    "objectID": "pages/refine_economics.html#indicator-progression",
    "href": "pages/refine_economics.html#indicator-progression",
    "title": "Economic Indicator Refinement",
    "section": "1 Indicator Progression",
    "text": "1 Indicator Progression\n\n1.1 Wiltshire\nThis graph shows the original framework as described in the Wiltshire et al. paper.\n\n\nCode\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/econ_wiltshire_tree.csv',\n  dimension_in = 'economics',\n  include_metrics = FALSE,\n  y_limits = c(-1.5, 2.1)\n)\n\n\n\n\n\n\n\n\n\n\n\n1.2 Matrix\nHere is the current set of indicators in the matrix, following the Sustainability Metrics workshop in July, 2024\n\n\nCode\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/econ_tree.csv',\n  dimension_in = 'economics',\n  y_limits = c(-1.5, 2.1)\n)\n\n\n\n\n\n\n\n\n\n\n\n1.3 Refinement Meeting\nFinally, the tentative set of indicators following the indicator refinement meeting on November 15th, 2024\n\n\nCode\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/econ_meeting_tree.csv',\n  dimension_in = 'economics',\n  y_limits = c(-1.5, 2.1)\n)",
    "crumbs": [
      "Framework",
      "Indicator Refinement",
      "Economics"
    ]
  },
  {
    "objectID": "pages/refine_economics.html#survey",
    "href": "pages/refine_economics.html#survey",
    "title": "Economic Indicator Refinement",
    "section": "2 Survey",
    "text": "2 Survey\nThese are the results from the follow-up survey to the economic indicator refinement meeting on November 15th. This feedback will be used to refine the framework for the next RFP.\n\n2.1 Indicators\n\n\nCode\nraw &lt;- read_csv('data/surveys/econ_survey.csv')\n\ndat &lt;- raw %&gt;% \n  select(\n    starts_with('Q'),\n    -ends_with('RANK')\n  ) %&gt;% \n  setNames(c(\n    'indi_must',\n    'indi_probably',\n    'indi_probably_not',\n    'indi_must_not',\n    paste0('add_indi_', 1:3),\n    'notes',\n    'idx_must',\n    'idx_probably',\n    'idx_probably_not',\n    'idx_must_not',\n    paste0('add_idx_', 1:3),\n    'idx_notes',\n    'final_notes'\n  )) %&gt;% \n  .[-c(1:2), ]\n\ngroups &lt;- select(dat, indi_must:indi_must_not, idx_must:idx_probably_not)\n\nto_df &lt;- function(x) {\n  x %&gt;% \n    str_split(',') %&gt;% \n    unlist() %&gt;% \n    table() %&gt;% \n    as.data.frame() %&gt;% \n    setNames(c('indicator', 'freq')) %&gt;% \n    arrange(desc(freq))\n}\n\nindi_out &lt;- map(groups[1:4], to_df)\nidx_out &lt;- map(groups[5:7], to_df)\n\n# Add scores by multipliers\nmultipliers &lt;- c(3:0)\nind_tables &lt;- map2(indi_out, multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(ind_tables, ~ {\n  col_name &lt;- str_remove(.y, 'indi_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n}) %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not * 1e2 + must_not,\n    indicator = fct_reorder(indicator, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:must_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      \"must_not\",\n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(indicator) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n\n\n\nCode\nggplot(graph_table, aes(\n  y = reorder(indicator, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Indicator\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 20),\n    legend.position = 'top'\n    ) +\n  scale_fill_brewer(\n    palette = \"RdBu\", \n    direction = -1,\n    limits = c(\n      \"must\",\n      \"probably\", \n      \"probably_not\", \n      \"must_not\" \n    ),\n    labels = c(\n      \"Must Include\", \n      \"Probably Include\", \n      \"Probably Not Include\", \n      \"Must Not Include\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nWe are coding this so “Must Include” is worth 3 points, “Probably Include” is worth 2 points, “Probably Not Include” is worth 1 point, and “Must Not Include” is worth 0 points. Note that the last column is the sum of proportions of “Must Include” and “Probably Include”. You can sort, search, expand, or page through the table below.\n\n\nCode\n# Add category to tables\nprops &lt;- ind_tables %&gt;% \n  imap(~ .x %&gt;% mutate(cat = .y)) %&gt;% \n  bind_rows() %&gt;% \n  select(-score)\n \n# Get proportion of probably include OR must include\nprop_prob_or_must_include &lt;- props %&gt;% \n  filter(cat %in% c('indi_must', 'indi_probably')) %&gt;% \n  group_by(indicator) %&gt;% \n  summarize(prop_include = sum(freq) / 6) %&gt;% \n  arrange(desc(prop_include))\n\n# Get proportion of must include\nprop_must_include &lt;- props %&gt;% \n  filter(cat == 'indi_must') %&gt;% \n  group_by(indicator) %&gt;% \n  summarize(prop_must = sum(freq) / 6) %&gt;% \n  arrange(desc(prop_must))\n\n# Add up weighted scores\nind_scores &lt;- ind_tables %&gt;% \n  bind_rows() %&gt;% \n  group_by(indicator) %&gt;% \n  summarize(score = sum(score, na.rm = TRUE)) %&gt;% \n  arrange(desc(score))\n\n# Join everything together\nscores_table &lt;- ind_scores %&gt;% \n  full_join(prop_must_include) %&gt;% \n  full_join(prop_prob_or_must_include) %&gt;% \n  arrange(desc(score)) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    across(c(3:4), ~ format(round(.x, 2), nsmall = 2))\n  ) %&gt;% \n  setNames(c('Indicator', 'Score', 'Proportion Must Include', 'Proportion Must OR Probably Include'))\n\n\n\n\n\n\n\n\n\n\n2.2 Indices\n\n\nCode\nidx_out &lt;- map(groups[5:7], to_df)\n\n# Add scores by multipliers\nmultipliers &lt;- c(3:1)\nidx_tables &lt;- map2(idx_out, multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(index = indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(idx_tables, ~ {\n  col_name &lt;- str_remove(.y, 'idx_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n}) %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not,\n    index = fct_reorder(index, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:probably_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(index) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n\ncolors &lt;- RColorBrewer::brewer.pal(4, 'RdBu')[2:4]\n\nggplot(graph_table, aes(\n  y = reorder(index, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Index\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 16),\n    legend.position = 'top'\n    ) +\n  scale_fill_manual(\n    values = rev(colors),\n    limits = c(\n      \"must\",\n      \"probably\",\n      \"probably_not\"\n    ),\n    labels = c(\n      \"Must Include\",\n      \"Probably Include\",\n      \"Probably Not Include\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nThe indices are going through the same treatment as indicators above - scored from 3 to 0. Note that there were no indices rated as “Must Not Include”.",
    "crumbs": [
      "Framework",
      "Indicator Refinement",
      "Economics"
    ]
  },
  {
    "objectID": "pages/metric_distributions.html",
    "href": "pages/metric_distributions.html",
    "title": "Metric Distributions",
    "section": "",
    "text": "Explore metric distributions before normalization. Use this to inform how we want to deal with outliers, how we want to normalize data.\nGoes after framework, before aggregation. Pull in data prep from aggregation into this script.\nTransforming our data from long format to wide and making sure everything came through alright.\n\n\nCode\npacman::p_load(\n  dplyr,\n  tidyr,\n  tibble\n)\n\n# Get latest year function\nsource('dev/data_pipeline_functions.R')\n\n# Load metrics data\nsm_data &lt;- readRDS('data/sm_data.rds')\n\n# Load refined framework\nraw_tree &lt;- sm_data[['refined_tree']]\n\n# Clean up the framework df \nframe &lt;- raw_tree %&gt;% \n  select(dimension:variable_name, resolution, use) %&gt;% \n  dplyr::filter(use == 'x') %&gt;% \n  select(-use) %&gt;% \n  mutate(\n    metric = ifelse(\n      str_length(metric) &gt; 50,\n      paste0(str_sub(metric, end = 50), '...'),\n      metric\n    )\n  )\nget_str(frame)\n\n# Save this refined framework for later\nsaveRDS(frame, 'data/frame.rds')\n\n\n## Join with metadata to double check the resolution of our metrics\nmeta &lt;- sm_data$metadata\nget_str(meta)\n\ndat &lt;- frame %&gt;% \n  select(variable_name) %&gt;% \n  left_join(meta, by = 'variable_name') %&gt;% \n  unique()\nget_str(dat)\n\n# Pull it from the actual metrics data\nmetrics &lt;- sm_data$metrics %&gt;% \n  filter(\n    variable_name %in% frame$variable_name,\n    fips %in% sm_data$state_key$state_code\n  )\nget_str(metrics)\n\n# Filter to latest year for each metric, and pivot wider\n# Also removing census participation - don't really have data at state level\n# Note to aggregate counties for this at some point\nmetrics_df &lt;- metrics %&gt;%\n  filter(variable_name != 'censusParticipation') %&gt;% \n  mutate(\n    value = ifelse(value == 'NaN', NA, value),\n    value = as.numeric(value)\n  ) %&gt;%\n  get_latest_year() %&gt;% \n  pivot_wider(\n    names_from = 'variable_name',\n    values_from = 'value'\n  ) %&gt;% \n  # Note that we are getting dupes here for some reason. Explore this\n  unnest(cols = !fips) %&gt;%\n  unique()\nget_str(metrics_df)\n\n# Get rid of one variable that didn't come through properly\nmetrics_df$waterIrrSrcOffFarmExp_2023 &lt;- NULL\nget_str(metrics_df)\n\n# Let's get rid of the years so they are easier to work with\nnames(metrics_df) &lt;- str_split_i(names(metrics_df), '_', 1)\nget_str(metrics_df)\n\n# Save this for use in subsequent pages\nsaveRDS(metrics_df, 'data/metrics_df.rds')\n\n\n\n1 Distributions\nHere we explore univariate distributions of each of our metrics. Highly skewed distributions might be good candidates for Box-Cox transformations or Winsorization. The figure below shows metrics with a skew &gt; 2 in red, while those with a skew &lt; 2 are in blue.\n\n\nCode\npacman::p_load(\n  ggplot2,\n  purrr,\n  ggpubr\n)\n\n# Get skews of variables\nskewed &lt;- psych::describe(metrics_df) %&gt;% \n  as.data.frame() %&gt;% \n  rownames_to_column('variable_name') %&gt;% \n  select(variable_name, skew) %&gt;% \n  filter(abs(skew) &gt; 2) %&gt;% \n  pull(variable_name)\n\nplots &lt;- map(names(metrics_df)[-1], \\(var){\n  # color based on skewness\n  if (var %in% skewed) {\n    fill &lt;- 'red'\n    color &lt;- 'darkred'\n  } else {\n    fill &lt;- 'lightblue'\n    color &lt;- 'royalblue'\n  }\n  \n  # Make plot for variable\n  metrics_df %&gt;% \n    ggplot(aes(x = !!sym(var))) + \n    geom_density(\n      fill = fill,\n      color = color,\n      alpha = 0.5\n    ) +\n    theme_classic() +\n    theme(plot.margin = unit(c(rep(0.5, 4)), 'cm'))\n}) \n\n# Arrange them in 4 columns\nggarrange(\n  plotlist = plots,\n  ncol = 4,\n  nrow = 22\n)\n\n\n\n\n\nDistributions of metrics at the state level.\n\n\n\n\nIt seems most of our metrics fall along respectable mostly-normal distributions. 18 of the 86 variables are skewed. They include several variables related to local farm economies (agrotourism sales as a percentage of total sales, direct to consumer sales as a percentage of total sales, and value added sales as a percentage of total sales), as well as a couple of the TreeMap 2016 variables (dead standing carbon and live trees) and GHG emissions from agriculture (CH4 and CO2, with an honorable mention for N2O). State agricultural imports and exports are also highly skewed.\nBéné et al. (2019) used Box Cox transformations for highly skewed indicators before normalizing all indicators with Min Max transformations. We will explore some of our options on the next page.\n\n\n\n\n\n Back to topReferences\n\nBéné, Christophe, Steven D. Prager, Harold A. E. Achicanoy, Patricia Alvarez Toro, Lea Lamotte, Camila Bonilla, and Brendan R. Mapes. 2019. “Global Map and Indicators of Food System Sustainability.” Scientific Data 6 (1): 279. https://doi.org/10.1038/s41597-019-0301-5.",
    "crumbs": [
      "Secondary Data Rework",
      "Metric Distributions"
    ]
  },
  {
    "objectID": "pages/indicator_correlations.html",
    "href": "pages/indicator_correlations.html",
    "title": "Indicator Correlations",
    "section": "",
    "text": "Code\npacman::p_load(\n  dplyr,\n  conflicted\n)\n\nconflicts_prefer(\n  dplyr::select(),\n  dplyr::filter(),\n  dplyr::summarize(),\n  .quiet = TRUE\n)\n\n\nThis page will explore correlations between variables at the indicator level.\nTo Do:\n\nCorrelation matrix between our 27 indicators\nConsider a chord diagram showing strength of correlations\nUse results to inform how we want to weight or otherwise deal with our indicators. High correlations between indicators would suggest some aspects of the system will be double-counted. If so, either the framework should be revised, or indicators should be weighted accordingly.\n\n\n1 Correlation Matrix\n\n\nCode\npacman::p_load(\n  dplyr,\n  tidyr,\n  tibble,\n  stringr,\n  purrr,\n  tidyr,\n  ggplot2,\n  plotly,\n  reshape,\n  Hmisc,\n  viridisLite\n)\n\n# Load indicator data.\nfinal_scores &lt;- readRDS('data/state_score_iterations.rds')\n# get_str(final_scores)\n\n# Pull out minmax geo indicators only. Also use states only, no aggregates\nminmax_geo_indicators &lt;- final_scores$minmax_geometric$indicator_scores %&gt;% \n  filter(! state %in% c('US_mean', 'US_median', 'NewEng'))\n# get_str(minmax_geo_indicators)\n\n# Make a correlation matrix using all the selected variables\ncor &lt;- minmax_geo_indicators %&gt;% \n  select(-state) %&gt;% \n  as.matrix() %&gt;% \n  rcorr()\n\n# Melt correlation values and rename columns\ncor_r &lt;- melt(cor$r) %&gt;% \n  setNames(c('var_1', 'var_2', 'value'))\n\n# Save p values\ncor_p &lt;- melt(cor$P)\np.value &lt;- cor_p$value\n\n# Make heatmap with custom text aesthetic for tooltip\nplot &lt;- cor_r %&gt;% \n  ggplot(aes(var_1, var_2, fill = value, text = paste0(\n    'Var 1: ', var_1, '\\n',\n    'Var 2: ', var_2, '\\n',\n    'Correlation: ', format(round(value, 3), nsmall = 3), '\\n',\n    'P-Value: ', format(round(p.value, 3), nsmall = 3)\n  ))) + \n  geom_tile() + \n  scale_fill_distiller(palette = 'PRGn') +\n  theme(axis.text.x = element_text(hjust = 1, angle = 45)) +\n  labs(\n    x = NULL,\n    y = NULL,\n    fill = 'Correlation'\n  )\n\n# Convert to interactive plotly figure with text tooltip\nggplotly(\n  plot, \n  tooltip = 'text',\n  width = 1000,\n  height = 800\n)\n\n\n\n\nInteractive Correlation Plot\n\n\n\n\n2 Strong Correlations\nWe have many significant correlations between indicators, but we probably don’t care too much about weak correlations. Let’s isolate the correlations that are significant and &gt; 0.5. These are the ones that might suggest we are double-counting certain aspects of the food system.\n\n\nCode\npacman::p_load(\n  reactable,\n  Hmisc\n)\n\n# Isolate all significant correlations\n# get_str(cor_r)\n\n# Save p values\ncor_p &lt;- melt(cor$P)\np.value &lt;- cor_p$value\n\n# Add p values to dataframe with correlations\ncor_r$p &lt;- cor_p$value\n# get_str(cor_r)\n\n# filter for correlations over 0.5\nsig &lt;- cor_r %&gt;% \n  rowwise() %&gt;%\n  mutate(pair = paste(sort(c(var_1, var_2)), collapse = \"_\")) %&gt;%\n  ungroup() %&gt;%\n  distinct(pair, .keep_all = TRUE) %&gt;%\n  select(-pair) %&gt;% \n  filter(!is.na(p), abs(value) &gt; 0.5)\n\n# Clean up columns for table\nsig &lt;- sig %&gt;% \n  mutate(\n    value = abs(value),\n    across(where(is.numeric), ~ format(round(.x, 3), nsmall = 3))\n  ) %&gt;% \n  setNames(c('Indicator 1', 'Indicator 2', 'Correlation', 'P Value'))\n# get_str(sig)\n\nreactable(\n  sig,\n  sortable = TRUE,\n  resizable = TRUE,\n  filterable = TRUE,\n  searchable = TRUE,\n  pagination = TRUE,\n  bordered = TRUE,\n  wrap = TRUE,\n  rownames = FALSE,\n  onClick = 'select',\n  striped = TRUE,\n  pageSizeOptions = c(5, 10, 25, 50, 100),\n  defaultPageSize = 25,\n  showPageSizeOptions = TRUE,\n  highlight = TRUE,\n  style = list(fontSize = \"14px\"),\n  compact = TRUE,\n  fullWidth = TRUE\n)\n\n\n\n\n\n\nThe wealth/income distribution indicator (economics) is correlating strongly with several indicators, some from the economics dimension and some from health. Note that there are several metrics in that indicator related to median earnings, which might be a proxy for gdp per capita. Now that I look at this, it might be worth including gdp per capita at least as a control variable to see how much fo the variation it accounts for.\nIt looks like all the indicators from the carbon index (embodied, fluxes, stocks) correlate with one another, which makes enough sense. I imagine that one shouldn’t be too much of a problem if they are being aggregated at the index level anyway.\nForest health and carbon stocks are currently quite highly correlated, but this is because the metrics for carbon stocks are not ideal. The metrics for carbon stocks and forest health all come from the same TreeMap dataset. I suspect that if we include a better set of metrics for carbon stocks, this won’t be a such a problem.\nValue-added markets and operations diversification are all using a very similar set of metrics as well. They mostly come from NASS, and it would be worth digging into the NASS docs to see how whether value-added sales might overlap with agritourism, direct to consumer sales, or local marketing channel sales.\nFood affordability and food security also unsurprisingly correlate strongly. The current framework here is a work in progress and a bit haphazard. It will need some reworking. Curiously, these indicators also strongly correlate with participatory governance. That’s quite an interesting finding.\nAs for what to do about highly correlating indicators in general:\n\nThey could be reworked to use metrics that don’t lead to indicator correlations. This sounds rather difficult to me, and maybe impossible. It seems likely to be the reality that aspects of the economics and health dimensions are indeed related, for example.\nThey could be weighted in their respective dimensions to account for the correlations. This might be done with PCA loadings or by expert opinion.\nWe could also leave them as is. This would mean potentially double-counting certain aspects, but may be a reasonable approximation of reality.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Secondary Data Rework",
      "Indicator Correlations"
    ]
  },
  {
    "objectID": "pages/framework.html",
    "href": "pages/framework.html",
    "title": "Framework",
    "section": "",
    "text": "Just including some visualizations of the framework here for now. These include all the indicators currently in the matrix.",
    "crumbs": [
      "Framework",
      "Overview"
    ]
  },
  {
    "objectID": "pages/framework.html#radial-plot",
    "href": "pages/framework.html#radial-plot",
    "title": "Framework",
    "section": "1 Radial Plot",
    "text": "1 Radial Plot\n\n\nCode\n## Load packages\npacman::p_load(\n  ggraph,\n  igraph,\n  dplyr,\n  RColorBrewer,\n  viridisLite\n)\n\n\n## Load data and add an origin level\ndat &lt;- readRDS('data/trees/tree_dat.rds') %&gt;% \n  mutate(Framework = 'Sustainability') %&gt;% \n  select(Framework, Dimension:Indicator)\n\n\n## Make edges\n# include groupings by dimension, then combine them\nedges &lt;- list()\nedges$sm_dim &lt;- dat %&gt;% \n  select(Framework, Dimension) %&gt;% \n  unique() %&gt;% \n  rename(from = Framework, to = Dimension) %&gt;% \n  mutate(group = to)\nedges$dim_ind &lt;- dat %&gt;% \n  select(Dimension, Index) %&gt;% \n  unique() %&gt;% \n  rename(from = Dimension, to = Index) %&gt;% \n  mutate(group = from)\nedges$ind_ind &lt;- dat %&gt;% \n  select(Index, Indicator) %&gt;% \n  unique() %&gt;% \n  rename(from = Index, to = Indicator) %&gt;% \n  mutate(group = edges$dim_ind$from[match(.$from, edges$dim_ind$to)])\nedges &lt;- bind_rows(edges)\n\n\n## Make vertices\n# Each line is a single vertex (dimension, index, or indicator)\n# We are just giving them random values to control point size for now\nvertices = data.frame(\n  name = unique(c(as.character(edges$from), as.character(edges$to))) , \n  value = runif(nrow(edges) + 1)\n) \n\n# Add the dimension groupings to the vertices as well\nvertices$group = edges$group[match(vertices$name, edges$to)]\n\n# Calculate the angles to arrange indicator labels\nvertices$id = NA\nmyleaves = which(is.na(match(vertices$name, edges$from)))\nnleaves = length(myleaves)\nvertices$id[myleaves] = seq(1:nleaves)\nvertices$angle = 90 - 360 * vertices$id / nleaves\n\n# Calculate alignment of indicator labels\nvertices$hjust &lt;- ifelse(vertices$angle &lt; -90, 1, 0)\n\n# Flip label angles around 180 degrees if they are facing the wrong way\nvertices$angle &lt;- ifelse(vertices$angle &lt; -90, vertices$angle + 180, vertices$angle)\n\n\n## Create graph\n# Make ggraph object from edges and vertices\ngraph &lt;- graph_from_data_frame(edges, vertices = vertices)\n\n# Plot the graph\nggraph(graph, layout = 'dendrogram', circular = TRUE) +\n  \n  # Color edges by dimension\n  geom_edge_diagonal(aes(color = group), width = 0.5) +\n  \n  # Create text for indicators using angles, hjust, and dimension groupings\n  geom_node_text(\n    aes(\n      x = x * 1.04,\n      y = y * 1.04,\n      filter = leaf,\n      label = name,\n      angle = angle,\n      hjust = hjust,\n      colour = group\n    ),\n    size = 2.7,\n    alpha = 1\n  ) +\n  \n  # Make the points for indicators based on dimension groupings\n  # geom_node_point(aes(\n  #   filter = leaf,\n  #   x = x * 1.07,\n  #   y = y * 1.07,\n  #   colour = group,\n  #   size = value,\n  #   alpha = 0.2\n  # )) +\n  \n  # Label the dimensions within the graph\n  geom_node_label(\n    aes(label = ifelse(name == group, name, NA)),\n    label.padding = unit(0.2, \"lines\"),\n    label.r = unit(0.3, \"lines\"),\n    label.size = 0.1,\n    size = 3\n  ) +\n  \n  # Various formatting options\n  scale_colour_manual(values = brewer.pal(5, 'Set1')) +\n  scale_edge_color_manual(values = brewer.pal(5, 'Set1')) +\n  scale_size_continuous(range = c(0.1, 7)) +\n  theme_void() +\n  theme(\n    legend.position = \"none\",\n    plot.margin = unit(c(0, 0, 0, 0), \"cm\")\n  ) +\n  expand_limits(x = c(-2, 2), y = c(-2, 2))\n\n\n\n\n\nRadial dendrogram of Sustainability Metrics framework",
    "crumbs": [
      "Framework",
      "Overview"
    ]
  },
  {
    "objectID": "pages/framework.html#cladogram",
    "href": "pages/framework.html#cladogram",
    "title": "Framework",
    "section": "2 Cladogram",
    "text": "2 Cladogram\nA slightly more readable version of the diagram above.\n\n\nCode\npacman::p_load(\n  ggtree,\n  dplyr,\n  ape,\n  data.tree,\n  viridisLite,\n  stringr\n)\n\n## Load data and add an origin level\ndat &lt;- readRDS('data/trees/tree_dat.rds') %&gt;% \n  mutate(Framework = 'Sustainability') %&gt;% \n  select(Framework, Dimension:Indicator) %&gt;% \n  mutate(across(\n    everything(), \n    ~ str_trim(str_replace_all(., ';|%|/|\\\\.|\\\"|,|\\\\(|\\\\)', '_'))\n  ))\n\ndat$pathString &lt;- paste(\n  dat$Framework,\n  dat$Dimension,\n  dat$Index,\n  dat$Indicator,\n  sep = '/'\n)\ntree &lt;- as.Node(dat)\n\n# Convert the data.tree structure to Newick format\ntree_newick &lt;- ToNewick(tree)\n\n# Read the Newick tree into ape\nphylo_tree &lt;- read.tree(text = tree_newick)\n\n# Make all edge lengths 1\nphylo_tree$edge.length &lt;- rep(1, length(phylo_tree$edge.length))\n\n# Add a space to end of node labels so it isn't cut off\nphylo_tree$node.label &lt;- paste0(phylo_tree$node.label, ' ')\n\n# Plot it\nplot(\n  phylo_tree, \n  type = 'c',\n  cex = 0.75,\n  edge.width = 2,\n  show.tip.label = TRUE,\n  label.offset = 0,\n  no.margin = TRUE,\n  tip.color = 'black',\n  edge.color = viridis(181),\n  x.lim = c(-0.1, 5)\n)\n\nnodelabels(\n  phylo_tree$node.label,\n  cex = 0.8,\n  bg = 'white'\n)\n\n\n\n\n\nCladogram of Sustainability Metrics framework",
    "crumbs": [
      "Framework",
      "Overview"
    ]
  },
  {
    "objectID": "pages/data_environment_overview.html",
    "href": "pages/data_environment_overview.html",
    "title": "Environment: Overview",
    "section": "",
    "text": "The first plot shows all the environment indicators from both the current studies and the original framework in the y-axis. Purple indicates that the indicator is only being used in the current studies, orange that it is only included in the Wiltshire framework, and green that the indicator is used in both the framework and current studies.\nThe x-axis shows the number of secondary data metrics that have been collected to represent those indicators. You can see that there are some indicators for which there exist many data, but many indicators for which I have found little to represent them.\nNASS figures are used to cover on-farm water use, energy efficiency, and acres in conservation practices. I used the National Aquatic Resource Surveys aggregated at the state level to measure water quality. Land use diversity is pretty well represented by Multi-Resolution Land Characteristics LULC layers, which I also aggregated at the county level. Greenhouse gas emissions come from EPA figures by state, broken down by economic sector. Finally, the USFS TreeMap dataset accounts for aboveground biomass and would do reasonably well in tree vigor. There is more to pull out here than I have so far.\nOtherwise, if anyone has ideas for secondary datasets to cover the rest of the indicators, please do let me know.\nCode\npacman::p_load(\n  dplyr,\n  ggplot2,\n  stringr,\n  plotly,\n  RColorBrewer\n)\n\n## Load data for tree and metrics\nenv_tree &lt;- readRDS('data/trees/env_tree.rds')\n\nmeta &lt;- readRDS('data/sm_data.rds')[['metadata']] %&gt;% \n  filter(dimension == 'environment')\n\n# Format to match Wiltshire framework\nmeta &lt;- meta %&gt;% \n  mutate(\n    indicator = str_to_sentence(indicator),\n    indicator = case_when(\n      str_detect(indicator, '^Above') ~ 'Aboveground biomass',\n      str_detect(indicator, '^Water') ~ 'Water use / irrigation efficiency',\n      TRUE ~ indicator\n    )\n  ) \n\n# Counts of secondary data metrics\ncounts &lt;- meta %&gt;% \n  group_by(indicator) %&gt;% \n  dplyr::summarize(count = n())\n\n# Join to Wiltshire framework\ncolors &lt;- RColorBrewer::brewer.pal(n = 3, name = 'Dark2')\ndat &lt;- full_join(env_tree, counts, by = join_by(Indicator == indicator)) %&gt;% \n  mutate(\n    count = ifelse(is.na(count), 0, count),\n    label_color = case_when(\n      Use == 'both' ~ colors[1],\n      Use == 'wiltshire_only' ~ colors[2],\n      Use == 'current_only' ~ colors[3]\n    )\n  )\n\n# Plot\ndat %&gt;%\n  ggplot(aes(x = Indicator, y = count)) +\n  geom_col(\n    color = 'black',\n    fill = 'grey'\n  ) +\n  geom_point(\n    data = dat,\n    aes(x = 1, y = 1, color = Use),\n    inherit.aes = FALSE,\n    alpha = 0,\n    size = -1\n  ) +\n  scale_color_manual(\n    name = \"Indicator Use:\",\n    values = c(\n      \"both\" = colors[1],\n      \"current_only\" = colors[3],\n      \"wiltshire_only\" = colors[2]\n    ),\n    labels = c(\n      'Both',\n      'Current Only',\n      'Framework Only'\n    )\n  ) +\n  theme_classic() +\n  theme(\n    axis.text = element_text(size = 12),\n    axis.text.y = element_text(color = dat$label_color),\n    axis.title = element_text(size = 14),\n    legend.text = element_text(size = 12),\n    legend.title = element_text(size = 12),\n    legend.position = \"bottom\",\n    plot.margin = margin(t = 10, r = 75, b = 10, l = 10)\n  ) +\n  guides(\n    color = guide_legend(override.aes = list(size = 4, alpha = 1))\n  ) +\n  coord_flip() +\n  labs(y = 'Secondary Data Count')\n\n\n\n\n\nBar Plot of Indicators",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Overview"
    ]
  },
  {
    "objectID": "pages/data_environment_overview.html#distribution-plots",
    "href": "pages/data_environment_overview.html#distribution-plots",
    "title": "Environment: Overview",
    "section": "1 Distribution Plots",
    "text": "1 Distribution Plots\n\n1.1 By County\nNote that while most of the available secondary data is at the county level, the environment dimension includes a fair amount at the state level as well. This includes greenhouse gas emissions and water quality surveys. For now, I’ll just show these separately, but some creative aggregation will have to happen eventually.\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  ggplot2,\n  rlang,\n  ggpubr,\n  tidyr\n)\nsource('dev/data_pipeline_functions.R')\nsource('dev/filter_fips.R')\nmetrics &lt;- readRDS('data/sm_data.rds')[['metrics']]\nmetadata &lt;- readRDS('data/sm_data.rds')[['metadata']]\n\n# Use metadata to get help filter by dimension\nenv_meta &lt;- metadata %&gt;%\n  filter(dimension == 'environment')\n\n# Filter to economics dimension\nenv_metrics &lt;- metrics %&gt;%\n  filter(variable_name %in% env_meta$variable_name)\n\n# env_metrics$variable_name %&gt;% unique\n# get_str(env_metrics)\n\n# Filter to latest year and new (post-2024) counties\n# And pivot wider so it is easier to get correlations\nenv_county &lt;- env_metrics %&gt;%\n  filter_fips(scope = 'counties') %&gt;%\n  get_latest_year() %&gt;%\n  select(fips, variable_name, value) %&gt;%\n  mutate(variable_name = str_split_i(variable_name, '_', 1)) %&gt;%\n  pivot_wider(\n    names_from = 'variable_name',\n    values_from = 'value'\n  ) %&gt;%\n  unnest(!fips) %&gt;%\n  mutate(across(c(2:last_col()), as.numeric))\n\n# Save temp file for use in analysis script\nsaveRDS(env_county, 'data/temp/env_county.rds')\n\n## Plot\nplots &lt;- map(names(env_county)[-1], \\(var){\n  if (is.character(env_county[[var]])) {\n    env_county %&gt;%\n      ggplot(aes(x = !!sym(var))) +\n      geom_bar(\n        fill = 'lightblue',\n        color = 'royalblue',\n        alpha = 0.5\n      ) +\n      theme_classic() +\n      theme(plot.margin = unit(c(rep(0.5, 4)), 'cm'))\n  } else if (is.numeric(env_county[[var]])) {\n    env_county %&gt;%\n      ggplot(aes(x = !!sym(var))) +\n      geom_density(\n        fill = 'lightblue',\n        color = 'royalblue',\n        alpha = 0.5\n      ) +\n      theme_classic() +\n      theme(plot.margin = unit(c(rep(0.5, 4)), 'cm'))\n  } else {\n    return(NULL)\n  }\n})\n\n\n# Arrange them in 4 columns\nggarrange(\n  plotlist = plots,\n  ncol = 4,\n  nrow = 11\n)\n\n\n$`1`\n\n\n\n\n\nDistributions of economic metrics at the county level.\n\n\n\n\n\n$`2`\n\n\n\n\n\nDistributions of economic metrics at the county level.\n\n\n\n\n\nattr(,\"class\")\n[1] \"list\"      \"ggarrange\"\n\n\n\n\n1.2 By State\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  ggplot2,\n  rlang,\n  ggpubr,\n  tidyr,\n  stringr\n)\n\nconflicted::conflicts_prefer(\n  dplyr::select(),\n  dplyr::mutate(),\n  dplyr::summarize(),\n  dplyr::rename(),\n  .quiet = TRUE\n)\n\nstate_codes &lt;- readRDS('data/sm_data.rds')[['fips_key']] %&gt;%\n  dplyr::select(fips, state_code)\n\nenv_state &lt;- env_metrics %&gt;%\n  filter_fips(scope = 'states') %&gt;%\n  get_latest_year() %&gt;%\n  dplyr::select(fips, variable_name, value) %&gt;%\n  dplyr::mutate(variable_name = stringr::str_split_i(variable_name, '_', 1)) %&gt;% \n  tidyr::complete(fips, variable_name) %&gt;% \n  tidyr::pivot_wider(\n    id_cols = fips,\n    names_from = 'variable_name',\n    values_from = 'value'\n  ) %&gt;% \n  dplyr::left_join(state_codes, by = 'fips') %&gt;% \n  dplyr::mutate(across(!c(fips, state_code), as.numeric))\n\n# Save temp data file for use in analysis script\nsaveRDS(env_state, 'data/temp/env_state.rds')\n\n# Variables to map. Take out some that didn't come through well.\nvars &lt;- names(env_state)[-1] %&gt;%\n  stringr::str_subset(\n    'lakesAcidCond|lakesCylsperEpaCond|lakesMicxEpaCond|state_code|waterIrrSrcOffFarmExp|waterIrrReclaimedAcreFt|waterIrrReclaimedOpenAcres',\n    negate = TRUE\n  ) %&gt;% \n  stringr::str_subset('^CH4(?!FromAg)|^N2O(?!FromAg)|^CO2(?!FromAg)|^SubSector', negate = TRUE)\n\n## Plot\nstate_plots &lt;- purrr::map(vars, \\(var){\n  env_state %&gt;%\n    ggplot(aes(y = !!sym(var), x = state_code, color = state_code)) +\n    geom_point(\n      alpha = 0.5,\n      size = 3\n    ) +\n    theme_classic() +\n    theme(\n      plot.margin = unit(c(rep(0.5, 4)), 'cm'),\n      legend.position = 'none'\n    ) +\n    labs(\n      x = 'State'\n    )\n})\n\n# Arrange them in 4 columns\nggpubr::ggarrange(\n  plotlist = state_plots,\n  ncol = 4,\n  nrow = 22\n)\n\n\n\n\n\nDistributions of environmental variables at state level",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Overview"
    ]
  },
  {
    "objectID": "pages/data_environment_overview.html#bivariate-plots",
    "href": "pages/data_environment_overview.html#bivariate-plots",
    "title": "Environment: Overview",
    "section": "2 Bivariate Plots",
    "text": "2 Bivariate Plots\nUsing a selection of variables at the county level. The variable names are a bit hard to fit in here, but from left to right across the top they are LULC diversity, mean live above-ground forest biomass, conservation income per farm, conservatino easement acres per farm, conservation tillage: no-till acres per farm, conservation tillage: excluding no-till acres per farm, and cover cropping: excluding CRP acres per farm.\n\n\nCode\npacman::p_load(\n  GGally\n)\n\n# Neat function for mapping colors to ggpairs plots\n# https://stackoverflow.com/questions/45873483/ggpairs-plot-with-heatmap-of-correlation-values\nmap_colors &lt;- function(data,\n                       mapping,\n                       method = \"p\",\n                       use = \"pairwise\",\n                       ...) {\n  # grab data\n  x &lt;- eval_data_col(data, mapping$x)\n  y &lt;- eval_data_col(data, mapping$y)\n\n  # calculate correlation\n  corr &lt;- cor(x, y, method = method, use = use)\n  colFn &lt;- colorRampPalette(c(\"blue\", \"white\", \"red\"), interpolate = 'spline')\n  fill &lt;- colFn(100)[findInterval(corr, seq(-1, 1, length = 100))]\n\n  # correlation plot\n  ggally_cor(data = data, mapping = mapping, color = 'black', ...) +\n    theme_void() +\n    theme(panel.background = element_rect(fill = fill))\n}\n\nlower_function &lt;- function(data, mapping, ...) {\n  ggplot(data = data, mapping = mapping) +\n    geom_point(alpha = 0.5) +\n    geom_smooth(color = \"blue\", fill = \"grey\", ...) +\n    theme_bw()\n}\n\n# Rename variables to be shorter\nenv_county %&gt;%\n  select(\n    LULC = lulcDiversity,\n    # Biomass = meanAboveGrndForBiomass,\n    consIncomePF,\n    consEasementAcresPF,\n    consTillNoTillAcresPF,\n    consTillExclNoTillAcresPF,\n    coverCropExclCrpAcresPF\n  ) %&gt;%\n  ggpairs(\n    upper = list(continuous = map_colors),\n    lower = list(continuous = lower_function),\n    axisLabels = 'show'\n  ) +\n  theme(\n    strip.text = element_text(size = 5),\n    axis.text = element_text(size = 5),\n    legend.text = element_text(size = 5)\n  )\n\n\n\n\n\n\n\n\n\nIt looks like there are a few non-linear relationships, conservation income per farm in particular, but for the most part, linear relationships do a decent job here.",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Overview"
    ]
  },
  {
    "objectID": "pages/data_environment_overview.html#sec-correlations",
    "href": "pages/data_environment_overview.html#sec-correlations",
    "title": "Environment: Overview",
    "section": "3 Correlations",
    "text": "3 Correlations\nOnly showing correlations by county because we don’t have enough observations to run it by state.\n\n\nCode\npacman::p_load(\n  dplyr,\n  tidyr,\n  tibble,\n  stringr,\n  purrr,\n  tidyr,\n  ggplot2,\n  plotly,\n  reshape,\n  Hmisc,\n  viridisLite\n)\n\n# get_str(env_county)\n\ncor &lt;- env_county %&gt;%\n  select(-fips) %&gt;%\n  as.matrix() %&gt;%\n  rcorr()\n\n# Melt correlation values and rename columns\ncor_r &lt;- melt(cor$r) %&gt;%\n  setNames(c('var_1', 'var_2', 'value'))\n\n# Save p values\ncor_p &lt;- melt(cor$P)\np.value &lt;- cor_p$value\n\n# Make heatmap with custom text aesthetic for tooltip\nplot &lt;- cor_r %&gt;%\n  ggplot(aes(var_1, var_2, fill = value, text = paste0(\n    'Var 1: ', var_1, '\\n',\n    'Var 2: ', var_2, '\\n',\n    'Correlation: ', format(round(value, 3), nsmall = 3), '\\n',\n    'P-Value: ', format(round(p.value, 3), nsmall = 3)\n  ))) +\n  geom_tile() +\n  scale_fill_viridis_c() +\n  theme(axis.text.x = element_text(hjust = 1, angle = 45)) +\n  labs(\n    x = NULL,\n    y = NULL,\n    fill = 'Correlation'\n  )\n\n# Convert to interactive plotly figure with text tooltip\nggplotly(\n  plot,\n  tooltip = 'text',\n  width = 1000,\n  height = 800\n)\n\n\n\n\nInteractive correlation plot of metrics by county",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Overview"
    ]
  },
  {
    "objectID": "pages/data_environment_analysis.html",
    "href": "pages/data_environment_analysis.html",
    "title": "Environment: Analysis",
    "section": "",
    "text": "This section will serve as a first pass at using some methods in the literature to aggregate metrics. I should say at the start that we have a pretty narrow selection of metrics to work with so far, which do not do a great job at capturing the breadth of the dimension. I’m also working with just the county-level data here. This provides some opportunities to use data-driven analyses like PCA, but it is worth noting that these will not get us to the holistic, system-wide measurements of sustainability we are after without including some normative judgments as to how to combine geographic areas as well as our five dimensions. So, let’s just go through the motions here, see how the process unfolds, and note anything worth digging into more down the road.",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Analysis"
    ]
  },
  {
    "objectID": "pages/data_environment_analysis.html#imputation",
    "href": "pages/data_environment_analysis.html#imputation",
    "title": "Environment: Analysis",
    "section": "1 Imputation",
    "text": "1 Imputation\nPCA requires complete data, so we either have to impute, delete, or use PPCA. I’m choosing to impute with missing forest here as it is pretty good at handling MAR and non-linear data, but PPCA is certainly worth exploring.\n\n\nCode\npacman::p_load(\n  missForest,\n  tibble\n)\nsource('dev/filter_fips.R')\nenv_county &lt;- readRDS('data/temp/env_county.rds')\n\n# Wrangle dataset. Need all numeric vars or factor vars. And can't be tibble\n# Also removing character vars - can't use these in PCA\n# Using old Connecticut counties - some lulc data is missing for them though\ndat &lt;- env_county %&gt;%\n  filter_fips('old') %&gt;%\n  select(fips, where(is.numeric)) %&gt;%\n  column_to_rownames('fips') %&gt;%\n  as.data.frame()\n# get_str(dat)\n# skimr::skim(dat)\n\n# Remove variables with most missing data - too much to impute.\n# Also remove the proportional LULC values - keeping diversity though\ndat &lt;- dat %&gt;%\n  select(-matches('consIncome'), -matches('^lulcProp'))\n\n# Impute missing variables\nset.seed(42)\nmf_out &lt;- dat %&gt;%\n  missForest(\n    ntree = 200,\n    mtry = 10,\n    verbose = FALSE,\n    variablewise = FALSE\n  )\n\n# Save imputed dataset\nimp &lt;- mf_out$ximp\n\n# Print OOB\nmf_out$OOBerror\n\n\n      NRMSE \n0.001503807",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Analysis"
    ]
  },
  {
    "objectID": "pages/data_environment_analysis.html#standardization",
    "href": "pages/data_environment_analysis.html#standardization",
    "title": "Environment: Analysis",
    "section": "2 Standardization",
    "text": "2 Standardization\nCentering and scaling to give every variable a mean of 0 and SD of 1.\n\n\nCode\ndat &lt;- map_dfc(imp, ~ scale(.x, center = TRUE, scale = TRUE))\n\n\nNow that we have standardized variables, we have to make normative decisions about what constitutes a good or bad value. This will certainly be a collaborative process where we seek input from teams to come to some kind of consensus once we have primary data. But until then, I’m going to make some heroic assumptions that LULC diversity is good, above ground forest biomass is good, conservation practices and easements are good, and fertilizer expenses are bad. Open to thoughts here as always.\nWith that, we can recode our normalized variables accordingly.\n\n\nCode\nnormed &lt;- dat %&gt;%\n  mutate(across(c(matches('^fert')), ~ -.x))",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Analysis"
    ]
  },
  {
    "objectID": "pages/data_environment_analysis.html#component-extraction",
    "href": "pages/data_environment_analysis.html#component-extraction",
    "title": "Environment: Analysis",
    "section": "3 Component Extraction",
    "text": "3 Component Extraction\nDetermine the number of components to extract using a few tools: very simple structure (VSS), Velicer’s minimum average partial (MAP) test, parallel analysis, and a scree plot.\n\n\nCode\npacman::p_load(\n  psych\n)\nVSS(normed)\n\n\n\n\n\n\n\n\n\n\nVery Simple Structure\nCall: vss(x = x, n = n, rotate = rotate, diagonal = diagonal, fm = fm, \n    n.obs = n.obs, plot = plot, title = title, use = use, cor = cor)\nVSS complexity 1 achieves a maximimum of 0.7  with  2  factors\nVSS complexity 2 achieves a maximimum of 0.89  with  3  factors\n\nThe Velicer MAP achieves a minimum of 0.05  with  7  factors \nBIC achieves a minimum of  -856.8  with  6  factors\nSample Size adjusted BIC achieves a minimum of  437.79  with  8  factors\n\nStatistics by number of factors \n  vss1 vss2   map dof chisq\n1 0.61 0.00 0.126 629  2866\n2 0.70 0.86 0.092 593  2249\n3 0.70 0.89 0.088 558  1974\n4 0.66 0.88 0.057 524  1456\n5 0.66 0.86 0.054 491  1228\n6 0.65 0.86 0.053 459  1073\n7 0.57 0.82 0.049 428   949\n8 0.55 0.82 0.052 398   858\n                                                                                                                                                                                                                                                                                          prob\n1 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017\n2 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000093430007676563637860484012875872394943144172430038452148437500000000000000000000000000000000\n3 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000444418161123225061766989218980938858294393867254257202148437500000000000000000000000000000000000000000000000000000000000000000\n4 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000126741522878445080264615124621130348714359570294618606567382812500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n5 0.000000000000000000000000000000000000000000000000000000000000000094542742590778233880560721402730450790841132402420043945312500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n6 0.000000000000000000000000000000000000000000000000003802932090020860391756107876659598332480527460575103759765625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n7 0.000000000000000000000000000000000000000017137959719205147570992436856229801378503907471895217895507812500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n8 0.000000000000000000000000000000000007470808978643554096668588648810782615328207612037658691406250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  sqresid  fit RMSEA  BIC SABIC complex eChisq  SRMR eCRMS  eBIC\n1    93.3 0.61  0.23  221  2201     1.0   4945 0.235 0.242  2300\n2    34.2 0.86  0.20 -244  1623     1.2   1571 0.133 0.141  -922\n3    17.9 0.93  0.19 -373  1384     1.4    765 0.093 0.101 -1581\n4    10.9 0.95  0.16 -748   902     1.5    384 0.066 0.074 -1819\n5     7.1 0.97  0.15 -837   709     1.7    222 0.050 0.058 -1842\n6     4.7 0.98  0.14 -857   588     1.8    135 0.039 0.047 -1795\n7     3.4 0.99  0.13 -851   497     1.9     87 0.031 0.039 -1712\n8     2.5 0.99  0.13 -815   438     2.0     58 0.026 0.033 -1615\n\n\nCode\nfa.parallel(normed)\n\n\n\n\n\n\n\n\n\nParallel analysis suggests that the number of factors =  5  and the number of components =  4 \n\n\nCode\npca_out &lt;- pca(normed, nfactors = 3, rotate = 'varimax')\nplot(pca_out$values)\nabline(h = 1)\n\n\n\n\n\n\n\n\n\nThis scree plot shows the eigenvalues (unit variance explained) of each principal component (y-axis) against each component (x-axis). The first few components explain lots of variance, but there is a decent elbow around the fourth component.\nVSS suggests 1 or 2, MAP suggests 8, parallel analysis shows 3. I’m going with 3 here, which will be explained further below.",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Analysis"
    ]
  },
  {
    "objectID": "pages/data_environment_analysis.html#principal-components-analysis",
    "href": "pages/data_environment_analysis.html#principal-components-analysis",
    "title": "Environment: Analysis",
    "section": "4 Principal Components Analysis",
    "text": "4 Principal Components Analysis\nNow we let’s look run the PCA.\n\n\nCode\n(pca_out &lt;- pca(normed, nfactors = 3, rotate = 'varimax'))\n\n\nPrincipal Components Analysis\nCall: principal(r = r, nfactors = nfactors, residuals = residuals, \n    rotate = rotate, n.obs = n.obs, covar = covar, scores = scores, \n    missing = missing, impute = impute, oblique.scores = oblique.scores, \n    method = method, use = use, cor = cor, correct = 0.5, weight = NULL)\nStandardized loadings (pattern matrix) based upon correlation matrix\n                            RC1   RC2   RC3   h2   u2 com\ndroughtWeeksSevere        -0.19  0.13 -0.80 0.70 0.30 1.2\ndroughtWeeksExtreme       -0.10 -0.02 -0.79 0.64 0.36 1.0\nlulcDiversity              0.21  0.51  0.35 0.43 0.57 2.1\nforestCarbonLive          -0.13  0.77  0.33 0.71 0.29 1.4\nforestCarbonDeadStanding  -0.06  0.28  0.32 0.18 0.82 2.1\nforestCarbonDeadDown      -0.17  0.75  0.22 0.63 0.37 1.3\nforestCanopyCover         -0.31  0.78 -0.13 0.72 0.28 1.4\nforestLiveTreeVolume      -0.29  0.76 -0.08 0.67 0.33 1.3\nforestLiveTrees           -0.12  0.19  0.54 0.35 0.65 1.4\nforestDeadTrees            0.32 -0.25  0.57 0.49 0.51 2.0\nforestStandHeight         -0.33  0.80 -0.06 0.75 0.25 1.3\nalleyCropSilvapastureNOps  0.38  0.62  0.27 0.60 0.40 2.1\nconsEasementAcres          0.19  0.56  0.50 0.60 0.40 2.2\nconsEasementAcresPF        0.23  0.14  0.76 0.64 0.36 1.3\nconsEasementNOps           0.09  0.81 -0.10 0.68 0.32 1.1\nconsTillExclNoTillAcres    0.92  0.01  0.11 0.86 0.14 1.0\nconsTillExclNoTillAcresPF  0.85 -0.13  0.21 0.78 0.22 1.2\nconsTillExclNoTillNOps     0.55  0.67 -0.09 0.76 0.24 2.0\nconsTillNoTillAcres        0.78  0.19  0.26 0.71 0.29 1.4\nconsTillNoTillAcresPF      0.62 -0.10  0.42 0.58 0.42 1.8\nconsTillNoTillNOps         0.40  0.75 -0.13 0.74 0.26 1.6\ncoverCropExclCrpAcres      0.89  0.01  0.03 0.80 0.20 1.0\ncoverCropExclCrpAcresPF    0.84 -0.10  0.19 0.75 0.25 1.1\ncoverCropExclCrpNOps       0.50  0.70 -0.16 0.77 0.23 1.9\ndrainedDitchesAcres        0.92  0.01  0.05 0.84 0.16 1.0\ndrainedDitchesAcresPF      0.91 -0.09  0.10 0.84 0.16 1.0\ndrainedDitchesNOps         0.60  0.37 -0.01 0.50 0.50 1.7\ndrainedTileAcres           0.69  0.04  0.18 0.50 0.50 1.1\ndrainedTileAcresPF         0.64 -0.09  0.28 0.50 0.50 1.4\ndrainedTileNOps            0.80  0.27  0.09 0.72 0.28 1.2\nprecisionAgNOps            0.79  0.28 -0.20 0.74 0.26 1.4\nrotateIntenseGrazeNOps     0.42  0.67  0.15 0.65 0.35 1.8\nfertExpenseTotal          -0.87 -0.09  0.10 0.77 0.23 1.0\nfertExpenseOpsWithExp     -0.35 -0.74  0.26 0.75 0.25 1.7\nbiomassHarvestNOps         0.17  0.70  0.00 0.52 0.48 1.1\nnFsaSecDisasters          -0.06  0.51  0.16 0.29 0.71 1.2\nnFsaPresDisasters          0.16 -0.01  0.83 0.71 0.29 1.1\n\n                        RC1  RC2  RC3\nSS loadings           10.86 8.47 4.56\nProportion Var         0.29 0.23 0.12\nCumulative Var         0.29 0.52 0.65\nProportion Explained   0.45 0.35 0.19\nCumulative Proportion  0.45 0.81 1.00\n\nMean item complexity =  1.4\nTest of the hypothesis that 3 components are sufficient.\n\nThe root mean square of the residuals (RMSR) is  0.09 \n with the empirical chi square  796.55  with prob &lt;  0.00000000012 \n\nFit based upon off diagonal values = 0.94\n\n\nRecommendations for creating composite indices are to extract components that each have eigenvalues &gt; 1, explained variance &gt; 0.10, and such that the proportion of explained variance for the total set is &gt; 0.60 (Nicoletti 2000; OECD 2008).\nOur total cumulative variance is explained is 0.74, and our component that explains the least variance is RC4 with 0.11. Note that extracting four or more components here gives us a component with less than 0.10, so this is why we are sticking to three. The first component (RC1) explains 38% of the variance in the data. The second component is respectable at 0.26, while the third is barely above the threshold at 0.11.\nLooking at the metrics, we can see that the first component loads mostly onto the conservation practices, no-till acres, cover cropping, drainage, and total fertilizer expenses. The second component leads onto mean above-ground biomass (although there is cross-loading with the first component), operations with silvapasture, operations with easements, rotational grazing operations, and operations with fertilizer expenses. This seems to be catching more of the population-related metrics. The last component only loads onto a few metrics: easement acres, easement acres per farm, and silvapasture operations (which has some heavy cross-loading).",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Analysis"
    ]
  },
  {
    "objectID": "pages/data_environment_analysis.html#aggregation",
    "href": "pages/data_environment_analysis.html#aggregation",
    "title": "Environment: Analysis",
    "section": "5 Aggregation",
    "text": "5 Aggregation\nHere, we follow Nicoletti and calculate the normalized sum of square factor loadings, which represent the proportion of total unit variance of the metrics that is explained by the component.\n\n\nCode\n## Get metric weights following Nicoletti 2000\n# Pull out metric loadings\nloadings &lt;- pca_out$weights %&gt;%\n  as.data.frame()\n\n# For each set of loadings, get squares, and then normalized proportions\nsq_loadings &lt;- map(loadings, ~ .x^2)\nmetric_weights &lt;- map(sq_loadings, ~ .x / sum(.x))\nhead(as.data.frame(metric_weights))\n\n\n            RC1           RC2        RC3\n1 0.00106789689 0.00424768529 0.14056643\n2 0.00490624619 0.00003622943 0.14266640\n3 0.00005098337 0.02724382619 0.02230611\n4 0.01582561729 0.07313818044 0.02701340\n5 0.00552223350 0.00951183857 0.02431250\n6 0.01475639416 0.07134055229 0.01255785\n\n\nNow we can use these to weight metrics and aggregate them into a component score for each county.\n\n\nCode\n# Component scores for each component across each county\ncomponent_scores &lt;- map(metric_weights, \\(x) {\n  as.matrix(normed) %*% x\n}) %&gt;%\n  as.data.frame()\nhead(component_scores)\n\n\n         RC1        RC2         RC3\n1 -0.4386941 -0.3235887 -0.13690759\n2  0.1270114  0.2766361 -0.34432215\n3  0.1036931  0.7519137  0.06999345\n4 -0.3461699 -0.4572497 -0.47618428\n5 -0.3372682  0.1206856 -0.41866790\n6  0.0373482  0.4286833  0.18077161\n\n\nAn alternative method here is regression scores, which are native to PCA. I’ll calculate these as well to compare to the component scores above.\n\n\nCode\n# Get regression scores from pca output\nregression_scores &lt;- as.data.frame(pca_out$scores)\nhead(regression_scores)\n\n\n         RC1        RC2        RC3\n1 -0.7190967 -0.4003725  0.2095507\n2  0.4926787  0.8706437 -1.1005301\n3  0.1217356  1.4927953 -0.0865495\n4 -0.4298152 -0.6620397 -0.3905350\n5 -0.0664264  0.4162461 -0.7080689\n6  0.5686187  0.9639500 -0.8366983\n\n\nRunning a correlation to see how similar they are:\n\n\nCode\ncoefs &lt;- map2_dbl(component_scores, regression_scores, \\(x, y) cor(x, y)) %&gt;%\n  round(3)\ncat(paste0(\n  'Pearson Correlation Coefficients:\\n',\n  'RC1: ', coefs[1], '\\n',\n  'RC2: ', coefs[2], '\\n',\n  'RC3: ', coefs[3]\n))\n\n\nPearson Correlation Coefficients:\nRC1: 0.932\nRC2: 0.969\nRC3: 0.427\n\n\nIt looks like they are reasonably similar, although RC2 and RC3 have substantially lower correlation coefficients. It will be worth noting this and coming back to explore the differences at some point.\nFor now, let’s keep following Nicoletti and aggregate the component scores into a single variable.\n\n\nCode\nsum_sq_loadings &lt;- map_dbl(sq_loadings, ~ sum(.x))\n(factor_weights &lt;- map_dbl(sum_sq_loadings, ~ .x / (sum(sum_sq_loadings))))\n\n\n      RC1       RC2       RC3 \n0.2210869 0.2647765 0.5141366 \n\n\nCurious that the component that accounted for the most variance is weighted the lowest. Worth doing a dive here at some point and figuring out why that is.\nWe will use these to weight each component to combine them.\n\n\nCode\ndimension_scores &lt;- component_scores %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    dimension_score = sum(RC1, RC2, RC3),\n    across(everything(), ~ round(.x, 3))\n  ) %&gt;%\n  bind_cols(rownames(imp)) %&gt;%\n  select(fips = 5, everything())\nhead(dimension_scores)\n\n\n# A tibble: 6 × 5\n# Rowwise: \n  fips     RC1    RC2    RC3 dimension_score\n  &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;           &lt;dbl&gt;\n1 09001 -0.439 -0.324 -0.137          -0.899\n2 09003  0.127  0.277 -0.344           0.059\n3 09005  0.104  0.752  0.07            0.926\n4 09007 -0.346 -0.457 -0.476          -1.28 \n5 09009 -0.337  0.121 -0.419          -0.635\n6 09011  0.037  0.429  0.181           0.647\n\n\nNow that we have all three component scores and the dimension score, let’s take a look at a map. Select the data to display with the layer button on the left.\n\n\nCode\npacman::p_load(\n  mapview,\n  leaflet,\n  leafpop\n)\nmap_dat &lt;- readRDS('data/sm_data.rds')[['ne_counties_2021']] %&gt;%\n  right_join(dimension_scores) %&gt;%\n  left_join(fips_key) %&gt;%\n  select(\n    fips,\n    RC1:RC3,\n    'Dimension Score' = dimension_score,\n    County = county_name,\n    State = state_name,\n    geometry\n  )\n\nmap_dat %&gt;%\n  mapview(\n    zcol = c(\n      'Dimension Score',\n      'RC1',\n      'RC2',\n      'RC3'\n    ),\n    burst = FALSE,\n    hide = c(FALSE, rep(TRUE, 3)),\n    popup = popupTable(\n      map_dat,\n      zcol = names(map_dat)[-length(map_dat)],\n      row.numbers = FALSE,\n      feature.id = FALSE\n  )\n)\n\n\n\n\n\n\nKeep in mind there are lots of caveats with this very preliminary analysis, the most egregious being a set of metrics that does not well represent the dimension it purports to measure. Missing data and various branching paths of decisions in the index scoring also deserve further scrutiny.\nStill, there is plenty to look at here as a first pass at aggregating dimension scores. The first component, RC1, was heavily influenced by the geography - it loads the strongest onto metrics measuring acres or acres per farm. I presume this is why Aroostook county shows up so high on this scale. RC2 loaded strongly onto the number of operations using various conservation practices (easements, no-till, rotational grazing). It seems to track a little bit with county size, but is highest near relatively urban areas. RC3 was most associated with conservation easement acres and easement acres per farm, and consequently seems to track with rural areas.\nI don’t think that the dimension score inspires much confidence as it is now. The weighting method for combining components is hard to interpret intuitively, and I think more expert driven normative decisions might make more sense at that point. On the bright side, it is a good expedition into the kinds of ambiguous decisions that will need to be made to aggregate this data across the whole system.",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Analysis"
    ]
  },
  {
    "objectID": "pages/comparison.html",
    "href": "pages/comparison.html",
    "title": "Comparison of Aggregation Methods",
    "section": "",
    "text": "In the last page we created six sets of scores by state based on combinations of three normalization methods (z-scores, min max, box cox) and two aggregation methods (arithmetic, geometric). Here, we will explore differences between them in terms of state distributions and rankings.\nNote that each set of spider plots are scaled to the minimum and maximum of any single state in that dimension, given the normalization and aggregation methods. This means in the case of min-max normalization, for example, raw metrics are scaled from 0 to 1, arithmetic and geometric means consolidate values to dimension scores, and these sets of dimension scores are scaled on the plot from the lowest to the highest value of any state. A “perfect” score here means that it is the best of any state. Plots show dimension values for Vermont in green. The dotted purple polygon behind it is the median of US states and DC. Arithmetic means are on the left, and geometric on the right.\nBe aware that spider/radar charts can be hard to interpret, and sometimes misleading The Radar Chart and its Caveats. The order of variables makes a big impact on the area of chart, and area is not a terribly reliable way to show differences, as it increases quadratically as variables increase linearly. Will explore some other ways to show this information, but using these for now as they are quite popular in the literature for sustainability metrics.",
    "crumbs": [
      "Secondary Data Rework",
      "Comparisons"
    ]
  },
  {
    "objectID": "pages/comparison.html#arithmetic-table",
    "href": "pages/comparison.html#arithmetic-table",
    "title": "Comparison of Aggregation Methods",
    "section": "1.1 Arithmetic Table",
    "text": "1.1 Arithmetic Table\n\n\nCode\nget_reactable_scores(dat, 'minmax_arithmetic')",
    "crumbs": [
      "Secondary Data Rework",
      "Comparisons"
    ]
  },
  {
    "objectID": "pages/comparison.html#geometric-table",
    "href": "pages/comparison.html#geometric-table",
    "title": "Comparison of Aggregation Methods",
    "section": "1.2 Geometric Table",
    "text": "1.2 Geometric Table\n\n\nCode\nget_reactable_scores(dat, 'minmax_geometric')",
    "crumbs": [
      "Secondary Data Rework",
      "Comparisons"
    ]
  },
  {
    "objectID": "pages/comparison.html#arithmetic-table-1",
    "href": "pages/comparison.html#arithmetic-table-1",
    "title": "Comparison of Aggregation Methods",
    "section": "2.1 Arithmetic Table",
    "text": "2.1 Arithmetic Table\n\n\nCode\nget_reactable_scores(dat, 'zscore_arithmetic')",
    "crumbs": [
      "Secondary Data Rework",
      "Comparisons"
    ]
  },
  {
    "objectID": "pages/comparison.html#geometric-table-1",
    "href": "pages/comparison.html#geometric-table-1",
    "title": "Comparison of Aggregation Methods",
    "section": "2.2 Geometric Table",
    "text": "2.2 Geometric Table\n\n\nCode\nget_reactable_scores(dat, 'zscore_geometric')",
    "crumbs": [
      "Secondary Data Rework",
      "Comparisons"
    ]
  },
  {
    "objectID": "pages/comparison.html#arithmetic-table-2",
    "href": "pages/comparison.html#arithmetic-table-2",
    "title": "Comparison of Aggregation Methods",
    "section": "3.1 Arithmetic Table",
    "text": "3.1 Arithmetic Table\n\n\nCode\nget_reactable_scores(dat, 'boxcox_arithmetic')",
    "crumbs": [
      "Secondary Data Rework",
      "Comparisons"
    ]
  },
  {
    "objectID": "pages/comparison.html#geometric-table-2",
    "href": "pages/comparison.html#geometric-table-2",
    "title": "Comparison of Aggregation Methods",
    "section": "3.2 Geometric Table",
    "text": "3.2 Geometric Table\n\n\nCode\nget_reactable_scores(dat, 'boxcox_geometric')",
    "crumbs": [
      "Secondary Data Rework",
      "Comparisons"
    ]
  },
  {
    "objectID": "pages/aggregation.html",
    "href": "pages/aggregation.html",
    "title": "Metric Aggregation",
    "section": "",
    "text": "Exploring methods of aggregating data into index and dimension scores.\n\n1 Imputation\nFirst, check how much missing data there are. If it is within reason, use missForest algorithm to impute missing data (Stekhoven and Bühlmann 2012). This is particularly good at handling MAR data, and does a decent job at handling MNAR data and non-linear relationships as well. If less than 5% of data are missing, just about any method for handling it is reasonable, even listwise deletion (Beaujean 2013).\n\n\nCode\npacman::p_load(\n  missForest,\n  tibble\n)\n\nmetrics_df &lt;- readRDS('data/metrics_df.rds')\nget_str(metrics_df)\n\n# Check for missing data\nskimr::skim(metrics_df)\nsum(is.na(metrics_df))/(nrow(metrics_df)*(ncol(metrics_df) - 1)) * 100\n# 1.96% missing data\n\n# Change fips from column to rowname so we can impute without losing it\nmetrics_df &lt;- metrics_df %&gt;% \n  column_to_rownames('fips')\nget_str(metrics_df)\n\n# Impute missing variables\nset.seed(42)\nmf_out &lt;- metrics_df %&gt;%\n  missForest(\n    ntree = 200,\n    mtry = 10,\n    verbose = FALSE,\n    variablewise = FALSE\n  )\n# get_str(mf_out)\n(oob &lt;- mf_out$OOBerror)\n# NRMSE 0.603\n\n# Check missing again\nskimr::skim(mf_out$ximp)\n# Looks good\n\n# Save just imputed data\nimp_dat &lt;- mf_out$ximp\n\n\nWe had 1.98% missing data, which is very little, and gives us flexibility in handling it. The out of bag error estimate from the missForest algorithm was 0.5868557.\n\n\n2 Normalization\nWe are normalizing our data using three methods: min-max, Box-Cox, and Z-scores. (We might also consider Winsorizing at some point.) Results will be saved to a list of three normalized datasets so we can compare outcomes of each one and see what the consequences are.\nMin Max (OECD 2008)\nMin-maxing scales all the data from 0 to 1 by subtracting the minimum value of each variable from all cases and dividing by the range of all cases in the variable. It is rather intuitive, as 1 is the best score, and 0 is the worst. This is a linear transformation, so the relationships between the values should not change.\n\\[\\begin{equation}\nI^t_qc = \\frac{x^t_qc - min_c(x^{t_0}_q)}{max_c(x^{t_0}_q)-min_c(x^{t_0}_q)}\n\\end{equation}\\]\nWhere \\(x^t_qc\\) is the metric \\(q\\) for state \\(c\\) at time \\(t\\).\nZ-Scores (OECD 2008)\nZ-scores are stardized to have a mean of 0 and a standard deviation of 1. Larger numbers are better, but there are no caps on the highest or lowest values. A value of 2 would mean that it is 2 standard deviations greater than the mean. Again, this is a linear transformation, so relationships between variables should not change.\n\\[\\begin{equation}\nI^t_{qc} = \\frac{x^t_{qc}-x^t_{qc=\\overline{c}}}{\\sigma^t_{qc=\\overline{c}}}\n\\end{equation}\\]\nWhere \\(x^t_qc\\) is the metric \\(q\\) for state \\(c\\) at time \\(t\\).\nBox Cox (Bickel and Doksum 1981)\nBox-Cox transformations are non-linear transformations that use an optimal value of lambda to make the distribution as normal as possible. This has some strengths in that the data are easier to work with in further analyses. It also effectively pulls outliers inward toward the center of the distribution. However, it also changes relationships between the variables, so it will distort any bivariate correlations.\n\\[\\begin{equation}\n{\\rm For}\\ \\lambda\\neq0,\\ f\\lambda(x) = (sign(x)|x|^\\lambda-1)/\\lambda\n\\end{equation}\\]\n\\[\\begin{equation}\n{\\rm For}\\ \\lambda = 0,\\ f_0(x) = log(x)\n\\end{equation}\\]\n\n\nCode\npacman::p_load(\n  forecast\n)\n\n# List of results\nnormed &lt;- list()\n# get_str(imp_dat)\n\n# Z scores\nnormed$zscore &lt;- imp_dat %&gt;% \n  mutate(across(everything(), ~ as.numeric(scale(.x, scale = TRUE, center = TRUE))))\n\n# Min Max\nmin_max &lt;- function(x) {\n  (x - min(x)) / (max(x) - min(x))\n}\nnormed$minmax &lt;- imp_dat %&gt;% \n  mutate(across(everything(), min_max))\n\n# Box Cox. Adding 1 as constant to remove zeroes\nnormed$boxcox &lt;- imp_dat %&gt;% \n  mutate(across(everything(), ~ BoxCox(.x + 1, lambda = 'auto')))\n# map(normed, get_str)\n\n\n\n\n3 Directional Values\nHere, we are assuming that each metric has a direction that is more sustainable than the opposite. Either more of it is better, or less of it is better. This is rather problematic in that just about any metric becomes negative with too much or too little of it. What might make more sense in the long run would be to consult the expertise of our teams and develop acceptable ranges for some metrics once they are settled. Still, just about every sustainability indicator framework does some variation of this one-way value system (Schneider et al. 2023; Béné et al. 2019; Nicoletti 2000; Jacobi et al. 2020; Gómez-Limón and Sanchez-Fernandez 2010).\nAlas, for now, we will invert variables in each of the transformed datasets as necessary so that larger numbers are more sustainable, and smaller numbers are less sustainable. The table below shows this assignment in the desired_direction column. For couple of variables (vacancy rate and animal sales as a percentage of all agricultural sales) I was not comfortable assigning one direction as better than the other, so I have removed them from the refined framework.\n\n\nCode\npacman::p_load(\n  reactable\n)\n\n# map(normed, get_str)\n# names(normed[[1]])\n\n# Higher numbers should be better. Reverse metrics that are the opposite, where lower numbers are better:\nreverse &lt;- c(\n  'unemploymentRate',\n  'gini',\n  'lowBirthweight',\n  'teenBirths',\n  'uninsured',\n  'incomeInequality',\n  'injuryDeaths',\n  'drinkingWaterViolations',\n  'prematureAgeAgjustedMortality',\n  'infantMortality',\n  'foodInsecurity',\n  'drugOverdoseDeaths',\n  'disconnectedYouth',\n  'residentialSegregationBlackWhite',\n  'motorVehicleCrashDeaths',\n  'severeHousingCostBurden',\n  'schoolSegregation',\n  'foodInsecOverall',\n  'foodInsecChild',\n  'droughtMeanPercArea',\n  'expChemicalPct',\n  'waterIrrSrcOffFarmExpPerAcreFt',\n  'ageProducers' # Could be better to use age diversity?\n)\n\n# Some are unclear - without clear direction, better to remove:\nremove &lt;- c(\n  'vacancyRate',\n  'salesAnimalPctSales'\n)\n\n# Remove from all three datasets\nnormed &lt;- map(normed, ~ {\n  .x %&gt;% \n    select(-matches(remove))\n})\n# map(normed, get_str)\n\n## Show table of which metrics were set in which direction\nmeta &lt;- readRDS('data/sm_data.rds')[['metadata']]\n\n# Reactable table showing var, metric, source, and direction\ntable &lt;- meta %&gt;% \n  filter(variable_name %in% names(imp_dat)) %&gt;% \n  mutate(desired_direction = case_when(\n    variable_name %in% reverse ~ 'Lower',\n    variable_name %in% remove ~ 'Removed',\n    .default = 'Higher'\n  )) %&gt;% \n  select(metric, definition, variable_name, desired_direction, source)\n  \ntable %&gt;% \n  reactable(\n    sortable = TRUE,\n    resizable = TRUE,\n    filterable = TRUE,\n    searchable = TRUE,\n    pagination = TRUE,\n    bordered = TRUE,\n    wrap = TRUE,\n    rownames = FALSE,\n    onClick = 'select',\n    striped = TRUE,\n    pageSizeOptions = c(5, 10, 25, 50, 100),\n    defaultPageSize = 5,\n    showPageSizeOptions = TRUE,\n    highlight = TRUE,\n    style = list(fontSize = \"14px\"),\n    compact = TRUE,\n    fullWidth = TRUE\n  )\n\n\n\n\n\n\n\n\n4 Aggregation\nHere we are combining values in each indicator, index, and dimension using both arithmetic and geometric means (OECD 2008). Arithmetic means are fully compensable, in that a strong score in one area can make up for a weak score in another. Geometric means are only somewhat compensable - it effectively applies a penalty for unbalanced scores.\nWe might also consider PCA here, as we have done with the preliminary dimension metrics previously. But the n:p ratio is not in our favor for PCA as we have more metrics than states. Will revisit this, perhaps by splitting it up into dimensions again rather than trying the whole framework at once, or possible using a sparse PCA procedure that incorporates variable selection.\nWe will end up with 6 iterations of our data (3 normalization methods * 2 aggregation methods).\nIndicator Means:\n\n\nCode\n# We need to attach these back to framework from metadata\n# Filter frame from earlier down to our current metrics\nframe &lt;- readRDS('data/frame.rds')\nfiltered_frame &lt;- frame %&gt;% \n  filter(variable_name %in% names(normed[[1]])) %&gt;% \n  select(variable_name, indicator, index, dimension)\nget_str(filtered_frame)\n\n# Save this for later - use in regression and variable selection \nsaveRDS(filtered_frame, 'data/filtered_frame.rds')\n\n# Make a list where we hold scores for indicators, indices, and dimensions\nscores &lt;- list()\n\n# Function for geometric mean\ngeometric_mean = function(x, na.rm = TRUE){\n  exp(sum(log(x[x &gt; 0]), na.rm = na.rm) / length(x))\n}\n\n# Get indicator scores across all three normalization methods\nindicator_scores &lt;- map(normed, \\(df) {\n  \n  # For each df, calculate indicator means\n  indicators_out &lt;- map(unique(filtered_frame$indicator), \\(ind) {\n  \n    # Column name based on indicator\n    ind_snake &lt;- ind\n    \n    # Split into groups by indicator, with one or more metrics each\n    variables &lt;- filtered_frame %&gt;% \n      dplyr::filter(indicator == ind) %&gt;% \n      pull(variable_name) %&gt;% \n      unique()\n    indicator_metrics &lt;- df %&gt;% \n      select(all_of(variables))\n    \n    # Get arithmetic and geo means for each indicator\n    dfs &lt;- list()\n    dfs$arithmetic &lt;- indicator_metrics %&gt;%\n      rowwise() %&gt;%\n      mutate(\n        !!sym(ind_snake) := mean(c_across(everything())),\n      ) %&gt;%\n      select(!!sym(ind_snake))\n    dfs$geometric &lt;- indicator_metrics %&gt;% \n      rowwise() %&gt;% \n      mutate(\n        !!sym(ind_snake) := geometric_mean(c_across(everything())),\n      ) %&gt;%\n      select(!!sym(ind_snake))\n    return(dfs) \n  })\n  \n  # Rearrange so we put each aggregation method (arith, geo) together\n  norm_out &lt;- list()\n  norm_out$arithmetic &lt;- map(indicators_out, ~ {\n    .x[grep(\"arithmetic\", names(.x))]\n  }) %&gt;% \n    bind_cols()\n  norm_out$geometric &lt;- map(indicators_out, ~ {\n    .x[grep(\"geometric\", names(.x))]\n  }) %&gt;% \n    bind_cols()\n  return(norm_out) \n})\n  \nget_str(indicator_scores, 4)\n\n\nIndex Means:\n\n\nCode\n# For each set of indicator scores, calculate index scores\n# get_str(indicator_scores, 4)\nindices &lt;- unique(filtered_frame$index)\n\n# Choose aggregation function based on agg_type\nagg_function &lt;- function(x, agg_type) {\n   if (agg_type == 'geometric') {\n    geometric_mean(x)\n  } else if (agg_type == 'arithmetic') {\n    mean(x)\n  }\n}\n\nindex_scores &lt;- map(indicator_scores, \\(norm_type) {\n  imap(norm_type, \\(agg_df, agg_type) {\n    map(indices, \\(index_) {\n      # Get names of indicators for this index\n      index_indicators &lt;- filtered_frame %&gt;% \n        filter(index == index_) %&gt;% \n        pull(indicator) %&gt;% \n        unique()\n      # Get DF of indicators for this index\n      index_indicator_df &lt;- agg_df %&gt;% \n        select(all_of(index_indicators))\n      # Get arithmetic or geometric mean, based on agg_type\n      index_indicator_df %&gt;% \n        rowwise() %&gt;% \n        # mutate(mean = across(everything(), agg_function(agg_type)))\n        mutate(!!sym(index_) := agg_function(c_across(everything()), agg_type)) %&gt;% \n        select(!!sym(index_))\n    }) %&gt;% \n      bind_cols()\n  })\n})\nget_str(index_scores, 4)\n\n\nDimension Means:\n\n\nCode\nget_str(index_scores, 4)\n\n# Same process for dimensions\ndimensions &lt;- unique(filtered_frame$dimension)\n\ndimension_scores &lt;- map(index_scores, \\(norm_type) {\n  imap(norm_type, \\(agg_df, agg_type) {\n    map(dimensions, \\(dimension_) {\n      # Get names of indices for this dimension\n      dimension_indices &lt;- filtered_frame %&gt;% \n        filter(dimension == dimension_) %&gt;% \n        pull(index) %&gt;% \n        unique()\n      # Get DF of indice for this dimension\n      dimension_index_df &lt;- agg_df %&gt;% \n        select(all_of(dimension_indices))\n      # Get arithmetic or geometric mean, based on agg_type\n      dimension_index_df %&gt;% \n        rowwise() %&gt;% \n        mutate(!!sym(dimension_) := agg_function(\n          c_across(everything()), \n          agg_type\n        )) %&gt;% \n        select(!!sym(dimension_))\n    }) %&gt;% \n      bind_cols()\n  })\n})\nget_str(dimension_scores, 4)\n\n\n\n\n5 Wrangle\nOrganize arithmetic and geometric means for each level of the framework (indicator, index, dimension) in a way that is easier to work with.\n\n\nCode\npacman::p_load(\n  purrr\n)\n\nget_str(indicator_scores, 4)\nget_str(index_scores, 4)\nget_str(dimension_scores, 4)\n\n# Want to end up with 6 lists: 3 norm types * 2 mean types\n# Put them all together in one list to work with\nall_scores &lt;- mget(c(\n  'indicator_scores',\n  'index_scores',\n  'dimension_scores'\n))\nget_str(all_scores, 3)\n\n# Function to pull out the pieces we want\n# Also put state names back in as a column and with real names, not codes\nget_output &lt;- function(norm_type, agg_type) {\n  # Get list of each df (dimension, index, indicator) for combo\n  dfs &lt;- all_scores %&gt;% \n    map(\\(level) level[[norm_type]]) %&gt;% \n    map(\\(norm) norm[[agg_type]])\n  # Get state back into a proper column for each df\n  out &lt;- map(dfs, ~ {\n    .x %&gt;% \n      # Note that we are binding fips back in - this is hinky, note to fix\n      bind_cols(\n        metrics_df %&gt;% \n          rownames_to_column('fips') %&gt;% \n          select(fips)\n      ) %&gt;% \n      left_join(\n        select(sm_data$state_key, state, state_code),\n        by = join_by(fips == state_code) \n      ) %&gt;% \n      select(-fips)\n  })\n  return(out)\n}\n\n# All combinations, also a name\ncombos &lt;- expand.grid(\n  c('zscore', 'minmax', 'boxcox'), \n  c('arithmetic', 'geometric')\n) %&gt;% \n  mutate(name = paste0(Var1, '_', Var2))\n\n# Map to pull them all out\nscores &lt;- map2(combos[[1]], combos[[2]], ~ {\n  get_output(.x, .y)\n}) %&gt;% \n  setNames(c(combos$name))\nget_str(scores, 4)\n\n\n## Add averages for New England states and US[]\nfinal_scores &lt;- map(scores, \\(method) {\n  map(method, \\(level) {\n    \n    # Mean of every US state and DC\n    us_means &lt;- level %&gt;%\n      select(-state) %&gt;% \n      colMeans() %&gt;% \n      as.list()\n    us_means$state &lt;- 'US_mean'\n    \n    # Median of every US state and DC\n    us_medians &lt;- level %&gt;% \n      select(-state) %&gt;% \n      map_dbl(median) %&gt;% \n      as.list()\n    us_medians$state &lt;- 'US_median'\n    \n    # Mean of just New England states\n    ne_means &lt;- level %&gt;% \n      filter(state %in% c('VT', 'NH', 'ME', 'MA', 'CT', 'RI')) %&gt;% \n      select(-state) %&gt;% \n      colMeans() %&gt;% \n      as.list()\n    ne_means$state &lt;- 'NewEng'\n    \n    # Return the level + US + NewEng means\n    level %&gt;% \n      bind_rows(us_means) %&gt;% \n      bind_rows(us_medians) %&gt;% \n      bind_rows(ne_means)\n  })\n})\nget_str(final_scores, 4)\n\n# Save this for use elsewhere\nsaveRDS(final_scores, 'data/state_score_iterations.rds')\n\n\nThis gives us a list of 6 elements, one for each combination of normalization method and aggregation method. Each element has three data frames, one for indicator, index, and dimension. Now we can compare these 6 outputs to see how the methodological differences affect scores and ranks.\nCould consider aggregating the 6 New England states here by population as well? Or by arithmetic / geometric mean. TBD\n\n\n\n\n\n\n\n\n Back to top6 References\n\nBeaujean, A. Alexander. 2013. “Factor Analysis Using R.” https://doi.org/10.7275/Z8WR-4J42.\n\n\nBéné, Christophe, Steven D. Prager, Harold A. E. Achicanoy, Patricia Alvarez Toro, Lea Lamotte, Camila Bonilla, and Brendan R. Mapes. 2019. “Global Map and Indicators of Food System Sustainability.” Scientific Data 6 (1): 279. https://doi.org/10.1038/s41597-019-0301-5.\n\n\nBickel, Peter J., and Kjell A. Doksum. 1981. “An Analysis of Transformations Revisited.” Journal of the American Statistical Association 76 (374): 296–311. https://doi.org/10.1080/01621459.1981.10477649.\n\n\nGómez-Limón, José A., and Gabriela Sanchez-Fernandez. 2010. “Empirical Evaluation of Agricultural Sustainability Using Composite Indicators.” Ecological Economics 69 (5): 1062–75. https://doi.org/10.1016/j.ecolecon.2009.11.027.\n\n\nJacobi, Johanna, Stellah Mukhovi, Aymara Llanque, Markus Giger, Adriana Bessa, Christophe Golay, Chinwe Ifejika Speranza, et al. 2020. “A New Understanding and Evaluation of Food Sustainability in Six Different Food Systems in Kenya and Bolivia.” Scientific Reports 10 (1): 19145. https://doi.org/10.1038/s41598-020-76284-y.\n\n\nNicoletti, Giuseppe. 2000. “Summary Indicators of Product Market Regulation with an Extension to Employment Protection Legislation.” {{OECD Economics Department Working Papers}} 226. Vol. 226. OECD Economics Department Working Papers. https://doi.org/10.1787/215182844604.\n\n\nOECD. 2008. Handbook on Constructing Composite Indicators: Methodology and User Guide. Paris: Organisation for Economic Co-operation and Development.\n\n\nSchneider, Kate R., Jessica Fanzo, Lawrence Haddad, Mario Herrero, Jose Rosero Moncayo, Anna Herforth, Roseline Remans, et al. 2023. “The State of Food Systems Worldwide in the Countdown to 2030.” Nature Food 4 (12): 1090–110. https://doi.org/10.1038/s43016-023-00885-9.\n\n\nStekhoven, Daniel J., and Peter Bühlmann. 2012. “MissForest—Non-Parametric Missing Value Imputation for Mixed-Type Data.” Bioinformatics 28 (1): 112–18. https://doi.org/10.1093/bioinformatics/btr597.",
    "crumbs": [
      "Secondary Data Rework",
      "Aggregation"
    ]
  },
  {
    "objectID": "pages/data_economics.html",
    "href": "pages/data_economics.html",
    "title": "Economics",
    "section": "",
    "text": "Shown in the diagram below are a total of 45 indicators within the economics dimension. Indices are labeled within the diagram. 17 indicators are both included in the Wiltshire et al. framework as well as being studied by one or more teams (red), 9 are included in the Wiltshire et al. but not currently belong studied (green), while 19 were not in the original framework, but have been added by one or more teams (blue).\nThe points beside each indicator name represent the number of secondary data metrics that have been aggregated for each indicator. Sources include USDA NASS, BLS, ERS, Census Bureau, and others. The quality and appropriateness of these metrics vary widely - I do not mean to suggest that having more of them means an indicator is more accurately better represented. For more information on the data sources, head to the Tables page to see metadata.\nOne other point to note here is that I removed several dozen metrics from BLS wage labor data broken down by NAICS industry code so as not to inflate that indicator relative to the others.\n\n\nCode\n## Load packages\npacman::p_load(\n  ggraph,\n  igraph,\n  dplyr,\n  RColorBrewer,\n  viridisLite,\n  ggrepel,\n  stringr\n)\n\nconflicted::conflicts_prefer(\n  dplyr::as_data_frame(),\n  .quiet = TRUE\n)\n\n## Load data for tree and metrics\ndat &lt;- readRDS('data/trees/econ_tree.rds') %&gt;% \n  select(Dimension:Source)\nmetadata_all &lt;- readRDS('data/sm_data.rds')[['metadata']]\nmeta &lt;- metadata_all %&gt;% \n  filter(\n    dimension == 'economics'\n  )\n\n# Rename metadata so it fits into formatting of tree data\n# This is quite not ideal - Note to harmonize this properly later\nmeta &lt;- meta %&gt;% \n  mutate(\n    indicator = str_to_sentence(indicator),\n    indicator = case_when(\n      str_detect(indicator, '^Assets') ~ 'Balance sheet (assets and liabilities)',\n      str_detect(indicator, '^Business failure') ~ 'Business failure rate of food business',\n      str_detect(indicator, '^Direct') ~ '% direct-to-consumer sales',\n      str_detect(indicator, '^Job avail') ~ 'Availability of good-paying jobs in food systems',\n      str_detect(indicator, '^Local sales') ~ '% local sales',\n      str_detect(indicator, '^Operator salary') ~ 'Operator salary / wage',\n      str_detect(indicator, '^Total sales') ~ 'Total sales / revenue',\n      str_detect(indicator, '^Wealth/income') ~ 'Wealth / income distribution',\n      TRUE ~ indicator\n    )\n  ) \n\n# Join counts of secondary data metrics to original dataset\n# Remove the NAICS variables - there are so many of them, don't add much\ncounts &lt;- meta %&gt;% \n  filter(str_detect(variable_name, '^lq|lvl|Lvl|Naics', negate = TRUE)) %&gt;% \n  group_by(indicator) %&gt;% \n  dplyr::summarize(count = n())\n\n\n## Make edges\n# include groupings by dimension, then combine them\nedges &lt;- list()\nedges$dim_ind &lt;- dat %&gt;% \n  select(Dimension, Index) %&gt;% \n  unique() %&gt;% \n  dplyr::rename(from = Dimension, to = Index) %&gt;% \n  mutate(group = to)\nedges$ind_ind &lt;- dat %&gt;% \n  select(Index, Indicator) %&gt;% \n  unique() %&gt;% \n  dplyr::rename(from = Index, to = Indicator) %&gt;% \n  mutate(group = from)\nedges &lt;- bind_rows(edges)\n\n# Add column for use (will use in colors of text?)\nedges$group &lt;- c(rep(NA, 10), dat$Source)\n\n\n## Make vertices\n# Each line is a single vertex (dimension, index, or indicator)\n# We are just giving them random values to control point size for now\nvertices = data.frame(\n  name = unique(c(as.character(edges$from), as.character(edges$to)))\n) %&gt;% \n  left_join(counts, by = join_by(name == indicator)) %&gt;% \n  dplyr::rename('value' = count)\n\n# Add the dimension groupings to the vertices as well\nvertices$group = edges$group[match(vertices$name, edges$to)]\n\n# Calculate the angles to arrange indicator labels\nvertices$id = NA\nmyleaves = which(is.na(match(vertices$name, edges$from)))\nnleaves = length(myleaves)\nvertices$id[myleaves] = seq(1:nleaves)\nvertices$angle = 90 - 360 * vertices$id / nleaves\n\n# Calculate alignment of indicator labels\nvertices$hjust &lt;- ifelse(vertices$angle &lt; -90, 1, 0)\n\n# Flip label angles around 180 degrees if they are facing the wrong way\nvertices$angle &lt;- ifelse(vertices$angle &lt; -90, vertices$angle + 180, vertices$angle)\n\n\n## Create graph\n# Make ggraph object from edges and vertices\ngraph &lt;- graph_from_data_frame(edges, vertices = vertices)\n\n# Plot the graph\nggraph(graph, layout = 'dendrogram', circular = TRUE) +\n  \n  # Color edges by dimension\n  geom_edge_diagonal(color = 'black', width = 0.5) +\n  \n  # Create text for indicators using angles, hjust, and dimension groupings\n  geom_node_text(\n    aes(\n      x = x * 1.15,\n      y = y * 1.15,\n      filter = leaf,\n      label = name,\n      angle = angle,\n      hjust = hjust,\n      colour = group\n    ),\n    size = 3,\n    alpha = 1\n  ) +\n  \n  # Label indices within graph\n  geom_label_repel(\n    aes(\n      x = x,\n      y = y,\n      label = ifelse(name %in% unique(dat$Index), name, NA)\n    ),\n    label.padding = unit(0.15, \"lines\"),\n    label.r = unit(0.3, \"lines\"),\n    label.size = 0.05,\n    size = 2.25,\n    force = 0.1,    \n    force_pull = 1, \n    max.overlaps = 10 \n  ) +\n  \n  # Make the points for indicators based on secondary metric count\n  geom_node_point(\n    aes(\n      filter = leaf,\n      x = x * 1.07,\n      y = y * 1.07,\n      colour = group,\n      size = value\n    ),\n    alpha = 0.4\n  ) +\n  \n  # Various formatting options\n  scale_colour_manual(values = brewer.pal(3, 'Set1')) +\n  # scale_size_continuous(range = c(0.1, 7)) +\n  theme_void() +\n  theme(\n    plot.margin = unit(c(0, 0, 0, 0), \"cm\")\n  ) +\n  scale_colour_manual(\n    name = \"Indicator Use\",\n    values = brewer.pal(3, 'Set1'),\n    labels = c(\"Both\", \"Current Only\", \"Wiltshire Only\")\n  ) +\n  expand_limits(x = c(-2.5, 2.5), y = c(-2.5, 2.5))\n\n\n\n\n\nRadial dendrogram of Sustainability Metrics framework",
    "crumbs": [
      "Secondary Data",
      "Economics"
    ]
  },
  {
    "objectID": "pages/data_economics.html#dimension-overview",
    "href": "pages/data_economics.html#dimension-overview",
    "title": "Economics",
    "section": "",
    "text": "Shown in the diagram below are a total of 45 indicators within the economics dimension. Indices are labeled within the diagram. 17 indicators are both included in the Wiltshire et al. framework as well as being studied by one or more teams (red), 9 are included in the Wiltshire et al. but not currently belong studied (green), while 19 were not in the original framework, but have been added by one or more teams (blue).\nThe points beside each indicator name represent the number of secondary data metrics that have been aggregated for each indicator. Sources include USDA NASS, BLS, ERS, Census Bureau, and others. The quality and appropriateness of these metrics vary widely - I do not mean to suggest that having more of them means an indicator is more accurately better represented. For more information on the data sources, head to the Tables page to see metadata.\nOne other point to note here is that I removed several dozen metrics from BLS wage labor data broken down by NAICS industry code so as not to inflate that indicator relative to the others.\n\n\nCode\n## Load packages\npacman::p_load(\n  ggraph,\n  igraph,\n  dplyr,\n  RColorBrewer,\n  viridisLite,\n  ggrepel,\n  stringr\n)\n\nconflicted::conflicts_prefer(\n  dplyr::as_data_frame(),\n  .quiet = TRUE\n)\n\n## Load data for tree and metrics\ndat &lt;- readRDS('data/trees/econ_tree.rds') %&gt;% \n  select(Dimension:Source)\nmetadata_all &lt;- readRDS('data/sm_data.rds')[['metadata']]\nmeta &lt;- metadata_all %&gt;% \n  filter(\n    dimension == 'economics'\n  )\n\n# Rename metadata so it fits into formatting of tree data\n# This is quite not ideal - Note to harmonize this properly later\nmeta &lt;- meta %&gt;% \n  mutate(\n    indicator = str_to_sentence(indicator),\n    indicator = case_when(\n      str_detect(indicator, '^Assets') ~ 'Balance sheet (assets and liabilities)',\n      str_detect(indicator, '^Business failure') ~ 'Business failure rate of food business',\n      str_detect(indicator, '^Direct') ~ '% direct-to-consumer sales',\n      str_detect(indicator, '^Job avail') ~ 'Availability of good-paying jobs in food systems',\n      str_detect(indicator, '^Local sales') ~ '% local sales',\n      str_detect(indicator, '^Operator salary') ~ 'Operator salary / wage',\n      str_detect(indicator, '^Total sales') ~ 'Total sales / revenue',\n      str_detect(indicator, '^Wealth/income') ~ 'Wealth / income distribution',\n      TRUE ~ indicator\n    )\n  ) \n\n# Join counts of secondary data metrics to original dataset\n# Remove the NAICS variables - there are so many of them, don't add much\ncounts &lt;- meta %&gt;% \n  filter(str_detect(variable_name, '^lq|lvl|Lvl|Naics', negate = TRUE)) %&gt;% \n  group_by(indicator) %&gt;% \n  dplyr::summarize(count = n())\n\n\n## Make edges\n# include groupings by dimension, then combine them\nedges &lt;- list()\nedges$dim_ind &lt;- dat %&gt;% \n  select(Dimension, Index) %&gt;% \n  unique() %&gt;% \n  dplyr::rename(from = Dimension, to = Index) %&gt;% \n  mutate(group = to)\nedges$ind_ind &lt;- dat %&gt;% \n  select(Index, Indicator) %&gt;% \n  unique() %&gt;% \n  dplyr::rename(from = Index, to = Indicator) %&gt;% \n  mutate(group = from)\nedges &lt;- bind_rows(edges)\n\n# Add column for use (will use in colors of text?)\nedges$group &lt;- c(rep(NA, 10), dat$Source)\n\n\n## Make vertices\n# Each line is a single vertex (dimension, index, or indicator)\n# We are just giving them random values to control point size for now\nvertices = data.frame(\n  name = unique(c(as.character(edges$from), as.character(edges$to)))\n) %&gt;% \n  left_join(counts, by = join_by(name == indicator)) %&gt;% \n  dplyr::rename('value' = count)\n\n# Add the dimension groupings to the vertices as well\nvertices$group = edges$group[match(vertices$name, edges$to)]\n\n# Calculate the angles to arrange indicator labels\nvertices$id = NA\nmyleaves = which(is.na(match(vertices$name, edges$from)))\nnleaves = length(myleaves)\nvertices$id[myleaves] = seq(1:nleaves)\nvertices$angle = 90 - 360 * vertices$id / nleaves\n\n# Calculate alignment of indicator labels\nvertices$hjust &lt;- ifelse(vertices$angle &lt; -90, 1, 0)\n\n# Flip label angles around 180 degrees if they are facing the wrong way\nvertices$angle &lt;- ifelse(vertices$angle &lt; -90, vertices$angle + 180, vertices$angle)\n\n\n## Create graph\n# Make ggraph object from edges and vertices\ngraph &lt;- graph_from_data_frame(edges, vertices = vertices)\n\n# Plot the graph\nggraph(graph, layout = 'dendrogram', circular = TRUE) +\n  \n  # Color edges by dimension\n  geom_edge_diagonal(color = 'black', width = 0.5) +\n  \n  # Create text for indicators using angles, hjust, and dimension groupings\n  geom_node_text(\n    aes(\n      x = x * 1.15,\n      y = y * 1.15,\n      filter = leaf,\n      label = name,\n      angle = angle,\n      hjust = hjust,\n      colour = group\n    ),\n    size = 3,\n    alpha = 1\n  ) +\n  \n  # Label indices within graph\n  geom_label_repel(\n    aes(\n      x = x,\n      y = y,\n      label = ifelse(name %in% unique(dat$Index), name, NA)\n    ),\n    label.padding = unit(0.15, \"lines\"),\n    label.r = unit(0.3, \"lines\"),\n    label.size = 0.05,\n    size = 2.25,\n    force = 0.1,    \n    force_pull = 1, \n    max.overlaps = 10 \n  ) +\n  \n  # Make the points for indicators based on secondary metric count\n  geom_node_point(\n    aes(\n      filter = leaf,\n      x = x * 1.07,\n      y = y * 1.07,\n      colour = group,\n      size = value\n    ),\n    alpha = 0.4\n  ) +\n  \n  # Various formatting options\n  scale_colour_manual(values = brewer.pal(3, 'Set1')) +\n  # scale_size_continuous(range = c(0.1, 7)) +\n  theme_void() +\n  theme(\n    plot.margin = unit(c(0, 0, 0, 0), \"cm\")\n  ) +\n  scale_colour_manual(\n    name = \"Indicator Use\",\n    values = brewer.pal(3, 'Set1'),\n    labels = c(\"Both\", \"Current Only\", \"Wiltshire Only\")\n  ) +\n  expand_limits(x = c(-2.5, 2.5), y = c(-2.5, 2.5))\n\n\n\n\n\nRadial dendrogram of Sustainability Metrics framework",
    "crumbs": [
      "Secondary Data",
      "Economics"
    ]
  },
  {
    "objectID": "pages/data_economics.html#distributions",
    "href": "pages/data_economics.html#distributions",
    "title": "Economics",
    "section": "2 Distributions",
    "text": "2 Distributions\nWe are taking out the abundant but largely redundant BLS NAICS wage data variables to leave us with a more approachable set of 46 variables to explore here. First just show univariate distributions by county.\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  ggplot2,\n  rlang,\n  ggpubr,\n  tidyr\n)\n\nsource('dev/data_pipeline_functions.R')\nsource('dev/filter_fips.R')\nmetrics &lt;- readRDS('data/sm_data.rds')[['metrics']]\nmetadata &lt;- readRDS('data/sm_data.rds')[['metadata']]\n\n# Use metadata to get help filter by dimension\necon_meta &lt;- metadata %&gt;% \n  filter(dimension == 'economics')\n\n# Filter to economics dimension\necon_metrics &lt;- metrics %&gt;% \n  filter(variable_name %in% econ_meta$variable_name)\n\n# Filter to latest year and new (post-2024) counties\n# Also remove NAICS variables to leave us with an approachable number\n# And pivot wider so it is easier to get correlations\necon_metrics_latest &lt;- econ_metrics %&gt;%\n  filter_fips(scope = 'new') %&gt;% \n  get_latest_year() %&gt;% \n  filter(\n    str_detect(\n      variable_name, \n      'Naics|NAICS|^lq|^avgEmpLvl|expHiredLaborPercOpExp', \n      negate = TRUE\n    )\n  )\n\n# Pivot wider for easier correlations below\necon_metrics_latest &lt;- econ_metrics_latest %&gt;% \n  select(fips, variable_name, value) %&gt;% \n  unique() %&gt;% \n  mutate(variable_name = str_split_i(variable_name, '_', 1)) %&gt;% \n  pivot_wider(\n    names_from = 'variable_name',\n    values_from = 'value'\n  ) %&gt;% \n  unnest(!fips) %&gt;% \n  mutate(across(c(civLaborForce:last_col()), as.numeric))\n\n\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  ggplot2,\n  rlang,\n  ggpubr,\n  tidyr\n)\n\nplots &lt;- map(names(econ_metrics_latest)[-1], \\(var){\n  if (is.character(econ_metrics_latest[[var]])) {\n    econ_metrics_latest %&gt;% \n      ggplot(aes(x = !!sym(var))) + \n      geom_bar(\n        fill = 'lightblue',\n        color = 'royalblue',\n        alpha = 0.5\n      ) +\n      theme_classic() +\n      theme(plot.margin = unit(c(rep(0.5, 4)), 'cm'))\n  } else if (is.numeric(econ_metrics_latest[[var]])) {\n    econ_metrics_latest %&gt;% \n      ggplot(aes(x = !!sym(var))) + \n      geom_density(\n        fill = 'lightblue',\n        color = 'royalblue',\n        alpha = 0.5\n      ) +\n      theme_classic() +\n      theme(plot.margin = unit(c(rep(0.5, 4)), 'cm'))\n  } else {\n    return(NULL)\n  }\n}) \n\n# Arrange them in 4 columns\nggarrange(\n  plotlist = plots,\n  ncol = 4,\n  nrow = 12\n)\n\n\n$`1`\n\n\n\n\n\nDistributions of economic metrics at the county level.\n\n\n\n\n\n$`2`\n\n\n\n\n\nDistributions of economic metrics at the county level.\n\n\n\n\n\nattr(,\"class\")\n[1] \"list\"      \"ggarrange\"",
    "crumbs": [
      "Secondary Data",
      "Economics"
    ]
  },
  {
    "objectID": "pages/data_economics.html#correlation-heatmap",
    "href": "pages/data_economics.html#correlation-heatmap",
    "title": "Economics",
    "section": "3 Correlation Heatmap",
    "text": "3 Correlation Heatmap\nThrowing those same variables into a correlation matrix. Hover to see variable names, Pearson correlation, and p-values.\n\n\nCode\npacman::p_load(\n  dplyr,\n  tidyr,\n  tibble,\n  stringr,\n  purrr,\n  tidyr,\n  ggplot2,\n  plotly,\n  reshape,\n  Hmisc,\n  viridisLite\n)\n\n# Arrange variables in some halfway reasonable order\ncor_dat &lt;- econ_metrics_latest %&gt;% \n  select(\n    matches('Code_|metro'),\n    matches('employ|abor|Worker'),\n    matches('Sales'),\n    matches('Earn|Income'),\n    everything(),\n    -fips,\n    -matches('expHiredLaborPercOpExp') # This one didn't come through\n  )\n\n# Make a correlation matrix using all the selected variables\ncor &lt;- cor_dat %&gt;% \n  as.matrix() %&gt;% \n  rcorr()\n\n# Melt correlation values and rename columns\ncor_r &lt;- melt(cor$r) %&gt;% \n  setNames(c('var_1', 'var_2', 'value'))\n\n# Save p values\ncor_p &lt;- melt(cor$P)\np.value &lt;- cor_p$value\n\n# Make heatmap with custom text aesthetic for tooltip\nplot &lt;- cor_r %&gt;% \n  ggplot(aes(var_1, var_2, fill = value, text = paste0(\n    'Var 1: ', var_1, '\\n',\n    'Var 2: ', var_2, '\\n',\n    'Correlation: ', format(round(value, 3), nsmall = 3), '\\n',\n    'P-Value: ', format(round(p.value, 3), nsmall = 3)\n  ))) + \n  geom_tile() + \n  scale_fill_viridis_c() + \n  theme(axis.text.x = element_text(hjust = 1, angle = 45)) +\n  labs(\n    x = NULL,\n    y = NULL,\n    fill = 'Correlation'\n  )\n\n# Convert to interactive plotly figure with text tooltip\nggplotly(\n  plot, \n  tooltip = 'text',\n  width = 1000,\n  height = 800\n)\n\n\n\n\nInteractive Correlation Plot",
    "crumbs": [
      "Secondary Data",
      "Economics"
    ]
  },
  {
    "objectID": "pages/data_economics.html#pca",
    "href": "pages/data_economics.html#pca",
    "title": "Economics",
    "section": "4 PCA",
    "text": "4 PCA\nPCA is a popular tool in this area for exploring unique variation with many collinear variables. It is a way to reduce the dimensionality of the data into fewer, more interpretable principal components.\nIt also requires complete data, which we do not have. So we either have to run a probabililistic PCA or run imputations. I’m using a random forest algorithm to impute data here as a first pass (Stekhoven and Bühlmann 2012). This really warrants a deeper dive into the type and severity of missingness though, and PPCA is likely the better option in the end.\n\n\nCode\npacman::p_load(\n  missForest\n)\n\n# Wrangle dataset. Need all numeric vars or factor vars. And can't be tibble\n# Also removing character vars - can't use these in PCA\ndat &lt;- econ_metrics_latest %&gt;%\n  select(where(is.numeric)) %&gt;%\n  as.data.frame()\n# get_str(dat)\n\n# Check missing variables\n# skimr::skim(dat)\n\n# Impute missing variables\nset.seed(42)\nmf_out &lt;- dat %&gt;%\n  missForest(\n    ntree = 200,\n    mtry = 10,\n    verbose = FALSE,\n    variablewise = FALSE\n  )\n\n\n  removed variable(s) 15 due to the missingness of all entries\n\n\nCode\n# Save imputed dataset\nimp &lt;- mf_out$ximp\n\n# Print OOB\nmf_out$OOBerror\n\n\n    NRMSE \n0.1909033 \n\n\nOut of bag error is shown as normalized root mean square error. Now we can explore how many composite factors is appropriate for the data.\n\n\nCode\npacman::p_load(\n  psych\n)\nVSS(imp)\n\n\n\n\n\n\n\n\n\n\nVery Simple Structure\nCall: vss(x = x, n = n, rotate = rotate, diagonal = diagonal, fm = fm, \n    n.obs = n.obs, plot = plot, title = title, use = use, cor = cor)\nVSS complexity 1 achieves a maximimum of 0.66  with  2  factors\nVSS complexity 2 achieves a maximimum of 0.84  with  2  factors\n\nThe Velicer MAP achieves a minimum of 0.04  with  6  factors \nBIC achieves a minimum of  -1186.13  with  5  factors\nSample Size adjusted BIC achieves a minimum of  1669.02  with  8  factors\n\nStatistics by number of factors \n  vss1 vss2   map  dof chisq\n1 0.51 0.00 0.120 1175  5057\n2 0.66 0.84 0.064 1126  4210\n3 0.64 0.81 0.058 1078  3726\n4 0.65 0.84 0.052 1031  3401\n5 0.60 0.83 0.044  985  2970\n6 0.57 0.81 0.041  940  2807\n7 0.55 0.79 0.042  896  2671\n8 0.54 0.79 0.044  853  2582\n                                                                                                                                                                                                                                                                                                prob\n1 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n2 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n3 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016\n4 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000319536676019325987076549755450116663269\n5 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009241128965980816158988508934868377764360047876834869384765625000000000000000000000000000000\n6 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061530117101705700134034460191401194606442004442214965820312500000000000000000000000000000000000000000000\n7 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000108915515911629524881815145320729243394453078508377075195312500000000000000000000000000000000000000000000000000000\n8 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046276694390055251623720955489460493481601588428020477294921875000000000000000000000000000000000000000000000000000000\n  sqresid  fit RMSEA   BIC SABIC complex eChisq  SRMR eCRMS  eBIC\n1     162 0.51  0.22    99  3799     1.0   8837 0.230 0.235  3879\n2      54 0.84  0.20  -541  3004     1.3   2350 0.119 0.124 -2401\n3      34 0.90  0.19  -823  2572     1.6   1283 0.088 0.094 -3266\n4      22 0.93  0.18  -950  2297     1.7    708 0.065 0.071 -3642\n5      17 0.95  0.17 -1186  1916     1.7    478 0.054 0.060 -3678\n6      15 0.96  0.17 -1159  1801     1.9    383 0.048 0.055 -3583\n7      12 0.96  0.17 -1110  1712     2.0    305 0.043 0.050 -3476\n8      11 0.97  0.17 -1017  1669     2.0    248 0.039 0.046 -3351\n\n\nCode\nfa.parallel(imp)\n\n\n\n\n\n\n\n\n\nParallel analysis suggests that the number of factors =  4  and the number of components =  4 \n\n\nVSS gives a wide range from 2 to 8, MAP shows 7, parallel analysis shows 4. I tend to trust PA the most, so let’s go with 4.\n\n\nCode\n(pca_out &lt;- pca(imp, nfactors = 4))\n\n\nPrincipal Components Analysis\nCall: principal(r = r, nfactors = nfactors, residuals = residuals, \n    rotate = rotate, n.obs = n.obs, covar = covar, scores = scores, \n    missing = missing, impute = impute, oblique.scores = oblique.scores, \n    method = method, use = use, cor = cor, correct = 0.5, weight = NULL)\nStandardized loadings (pattern matrix) based upon correlation matrix\n                                             RC1   RC2   RC4   RC3    h2    u2\ncivLaborForce                               0.23  0.25  0.89  0.01 0.902 0.098\nemployed                                    0.23  0.26  0.88  0.00 0.900 0.100\nunemployed                                  0.24  0.21  0.91  0.10 0.934 0.066\nunemploymentRate                            0.12 -0.12  0.17  0.84 0.763 0.237\nmedHhIncome                                 0.06  0.89  0.30 -0.08 0.896 0.104\nmedHhIncomePercState                        0.06  0.83  0.04 -0.21 0.740 0.260\ngini                                       -0.21  0.03  0.34  0.48 0.392 0.608\nunemployment                                0.12 -0.12  0.17  0.85 0.772 0.228\nchildrenInPoverty                          -0.03 -0.84  0.12  0.34 0.834 0.166\nincomeInequality                           -0.06 -0.14  0.62  0.39 0.557 0.443\nmedianHouseholdIncome                       0.06  0.89  0.35 -0.04 0.912 0.088\nchildrenEligibleForFreeOrReducedPriceLunch  0.09 -0.79 -0.06  0.36 0.761 0.239\nbroadbandAccess                            -0.06  0.79  0.25 -0.18 0.722 0.278\ngenderPayGap                               -0.17  0.04 -0.14  0.22 0.098 0.902\nnCSA                                        0.19 -0.04  0.40 -0.23 0.249 0.751\nnFarmersMarket                              0.34  0.20  0.82 -0.05 0.831 0.169\nnOnFarmMarket                               0.02  0.07  0.12 -0.02 0.021 0.979\nagTourSalesPerc                            -0.14  0.42  0.14  0.58 0.554 0.446\nd2cSalesPerc                               -0.28  0.53  0.34  0.08 0.477 0.523\nlocalSalesPerc                             -0.19  0.55  0.34  0.13 0.468 0.532\nnAnaerDigestion                             0.54 -0.15 -0.36  0.05 0.444 0.556\nnCompost                                    0.35  0.18  0.80  0.07 0.802 0.198\nnFoodHubs                                   0.17 -0.04  0.01 -0.04 0.034 0.966\nnMeatProcess                                0.18  0.12  0.78  0.02 0.662 0.338\nmedianEarnMaleFood                          0.00  0.16  0.19 -0.34 0.176 0.824\nmedianEarnFemaleFood                       -0.25  0.19  0.07  0.52 0.372 0.628\nwomenEarnPercMaleFood                      -0.17 -0.08 -0.16  0.55 0.363 0.637\nmedianEarnMaleFarm                         -0.17  0.31 -0.04  0.26 0.197 0.803\nmedianEarnFemaleFarm                       -0.13  0.63 -0.10  0.32 0.522 0.478\nwomenEarnPercMaleFarm                      -0.06  0.53  0.05  0.18 0.326 0.674\nexpHiredLabor                               0.95  0.05  0.18 -0.07 0.935 0.065\nnOpsHiredLaborExp                           0.87 -0.03  0.27 -0.26 0.902 0.098\nnHiredWorkers                               0.91  0.04  0.33 -0.11 0.949 0.051\nnOpsHiredLabor                              0.87 -0.03  0.27 -0.26 0.902 0.098\nnWorkersGE150                               0.83  0.13  0.42 -0.11 0.892 0.108\nnOpsWorkersGE150                            0.88  0.05  0.31 -0.20 0.906 0.094\nnWorkersLE150                               0.88 -0.03  0.26 -0.05 0.838 0.162\nnOpsWorkersLE150                            0.88 -0.05  0.24 -0.26 0.903 0.097\nnMigrantWorkers                             0.60 -0.18 -0.11  0.16 0.434 0.566\nnOpsMigrantWorkers                          0.79  0.07  0.10 -0.09 0.652 0.348\nnUnpaidWorkers                              0.64 -0.17  0.36 -0.37 0.698 0.302\nnOpsUnpaidWorkers                           0.68 -0.17  0.28 -0.39 0.719 0.281\nexpHiredLaborPF                             0.61  0.17 -0.03  0.18 0.436 0.564\nexpPF                                       0.77  0.02 -0.30  0.29 0.759 0.241\nfarmIncomePF                                0.31  0.67  0.27  0.10 0.621 0.379\nacresOperated                               0.72 -0.41 -0.36 -0.05 0.821 0.179\nacresPF                                     0.36 -0.56 -0.54  0.13 0.753 0.247\nmedianAcresPF                               0.26 -0.64 -0.48 -0.02 0.713 0.287\nlandValPF                                   0.23  0.51 -0.12  0.13 0.343 0.657\nlandValPerAcre                             -0.15  0.50  0.42  0.26 0.517 0.483\n                                           com\ncivLaborForce                              1.3\nemployed                                   1.3\nunemployed                                 1.3\nunemploymentRate                           1.2\nmedHhIncome                                1.3\nmedHhIncomePercState                       1.1\ngini                                       2.2\nunemployment                               1.2\nchildrenInPoverty                          1.4\nincomeInequality                           1.8\nmedianHouseholdIncome                      1.3\nchildrenEligibleForFreeOrReducedPriceLunch 1.4\nbroadbandAccess                            1.3\ngenderPayGap                               2.7\nnCSA                                       2.1\nnFarmersMarket                             1.5\nnOnFarmMarket                              1.8\nagTourSalesPerc                            2.1\nd2cSalesPerc                               2.3\nlocalSalesPerc                             2.1\nnAnaerDigestion                            1.9\nnCompost                                   1.5\nnFoodHubs                                  1.2\nnMeatProcess                               1.2\nmedianEarnMaleFood                         2.0\nmedianEarnFemaleFood                       1.8\nwomenEarnPercMaleFood                      1.4\nmedianEarnMaleFarm                         2.6\nmedianEarnFemaleFarm                       1.7\nwomenEarnPercMaleFarm                      1.3\nexpHiredLabor                              1.1\nnOpsHiredLaborExp                          1.4\nnHiredWorkers                              1.3\nnOpsHiredLabor                             1.4\nnWorkersGE150                              1.6\nnOpsWorkersGE150                           1.4\nnWorkersLE150                              1.2\nnOpsWorkersLE150                           1.3\nnMigrantWorkers                            1.4\nnOpsMigrantWorkers                         1.1\nnUnpaidWorkers                             2.4\nnOpsUnpaidWorkers                          2.1\nexpHiredLaborPF                            1.3\nexpPF                                      1.6\nfarmIncomePF                               1.8\nacresOperated                              2.1\nacresPF                                    2.8\nmedianAcresPF                              2.2\nlandValPF                                  1.7\nlandValPerAcre                             2.7\n\n                        RC1  RC2  RC4  RC3\nSS loadings           11.15 8.18 7.72 4.32\nProportion Var         0.22 0.16 0.15 0.09\nCumulative Var         0.22 0.39 0.54 0.63\nProportion Explained   0.36 0.26 0.25 0.14\nCumulative Proportion  0.36 0.62 0.86 1.00\n\nMean item complexity =  1.7\nTest of the hypothesis that 4 components are sufficient.\n\nThe root mean square of the residuals (RMSR) is  0.07 \n with the empirical chi square  757.14  with prob &lt;  1 \n\nFit based upon off diagonal values = 0.96\n\n\nCode\nplot(pca_out$values)\nabline(h = 1)\n\n\n\n\n\n\n\n\n\nFrom the scree plot and eigenvalues it looks like the first three components bear lots of unique variance, but after that there is no clear elbow where a qualitative decision can be made to choose a certain number of components. The Kaiser-Guttman rule suggests keeping any compents with an eigenvalue &gt; 1 (at the horizontal line), but we can see here that this is a rather dubious distinction.\nIf we look at the output from the PCA call, we can see how closely each variable (row) correlates with each component (columns 1-4). The variables most associated with Component #1 are the farm labor variables - numbers of workers, labor expenses, etc. They also tend to be raw figures, and probably have more to do with population than anything else. Component #2 is made up mostly of generic employment figures - total civilian labor force, total employed, total unemployed. These are not specific to food systems. Component #3 has a curious collection of median earnings variables and ‘per farm’ variables like acres per farm, income per farm, and local and direct-to-consumer sales. Component #4 does not represent much unique variance, and loooks like a grab bag of variables.\nA couple of early takeaways here are that the raw figures that are tied to population probably shouldn’t be mixed with other variables like proportions. We could try normalizing all the variables so that raw variables are not disproportionately weighted. But it might make more sense to avoid raw counts and dollar amounts entirely.",
    "crumbs": [
      "Secondary Data",
      "Economics"
    ]
  },
  {
    "objectID": "pages/data_environment_maps.html",
    "href": "pages/data_environment_maps.html",
    "title": "Environment: Maps",
    "section": "",
    "text": "Taking a quick tour through some of the spatial data here. Most of these metrics will also be available to peruse on the Shiny app, with the exception of those that are hard to aggregate, like biodiversity hotspots."
  },
  {
    "objectID": "pages/data_environment_maps.html#land-use",
    "href": "pages/data_environment_maps.html#land-use",
    "title": "Environment: Maps",
    "section": "1 Land Use",
    "text": "1 Land Use\nThis is the MRLC 30m LULC layer from 2023. Below the map, you can find a table with codes and descriptions. Sort or expand to see all the values.\n\n\nCode\nlulc &lt;- readRDS('data/sm_data.rds')[['mrlc_lulc_ne']]\n# sm_data &lt;- readRDS('data/sm_data.rds')\ncounties &lt;- readRDS('data/sm_data.rds')[['ne_counties_2024']]\n\nlulc_map &lt;- lulc %&gt;% \n  mapview(\n    layer.name = 'LULC'\n  ) + \n  mapview(\n    counties,\n    alpha.regions = 0,\n    color = 'black',\n    col.regions = 'black',\n    lwd = 1.25,\n    layer.name = 'Counties'\n  )\n\nlulc_map@map %&gt;% \n  addFullscreenControl()\n\n\n\n\nLand use land cover map\n\n\n\n\nCode\npacman::p_load(\n  reactable,\n  dplyr,\n  stringr\n)\n\nmeta &lt;- readRDS('data/sm_data.rds')[['metadata']]\n\nlulc_codes &lt;- meta %&gt;% \n  filter(\n    str_detect(variable_name, '^lulc'),\n    str_detect(variable_name, 'NoData|Diversity', negate = TRUE)\n  ) %&gt;% \n  select(definition) %&gt;% \n  mutate(\n    Value = c(11, 12, 21, 22, 23, 24, 31, 41, 42, 43, 52, 71, 81, 82, 90, 95),\n    Class = c(\n      rep('Water', 2),\n      rep('Developed', 4),\n      'Barren',\n      rep('Forest', 3),\n      'Shrubland',\n      'Herbaceous',\n      rep('Planted/Cultivated', 2),\n      rep('Wetlands', 2)\n    ),\n    Type = c(\n      'Open Water',\n      'Ice or Snow',\n      'Developed, Open Space',\n      'Developed, Low Intensity',\n      'Developed, Medium Intensity',\n      'Developed, High Intensity',\n      'Barren Land (Rock / Sand / Clay)',\n      'Deciduous Forest',\n      'Evergreen Forest',\n      'Mixed Forest',\n      'Shrub / Scrub',\n      'Grassland / Herbaceous',\n      'Pasture / Hay',\n      'Cultivated Crops',\n      'Woody Wetlands',\n      'Emergent Herbaceous Wetlands'\n    )\n  ) %&gt;% \n  select(\n    Value,\n    Class,\n    Type,\n    Description = definition\n  )\n\nreactable(\n  lulc_codes,\n  sortable = TRUE,\n  resizable = TRUE,\n  filterable = TRUE,\n  searchable = FALSE,\n  pagination = TRUE,\n  bordered = TRUE,\n  wrap = TRUE,\n  rownames = FALSE,\n  striped = TRUE,\n  defaultPageSize = 5,\n  showPageSizeOptions = FALSE,\n  highlight = TRUE,\n  style = list(fontSize = \"14px\"),\n  compact = TRUE,\n  columns = list(\n    Value = colDef(minWidth = 40),\n    Class = colDef(minWidth = 100),\n    Type = colDef(minWidth = 100),\n    Description = colDef(minWidth = 500)\n  )\n)"
  },
  {
    "objectID": "pages/data_environment_maps.html#land-use-diversity",
    "href": "pages/data_environment_maps.html#land-use-diversity",
    "title": "Environment: Maps",
    "section": "2 Land Use Diversity",
    "text": "2 Land Use Diversity\nLULC Diversity is derived from the MRLC LULC layer above. LULC types are aggregated by category (water, developed, barren, forest, shrubland, herbaceous, cultivated, wetlands) and Shannon diversity is calculated for each county. It makes for an interesting metric, but I’m not sure it makes for a strong normative metric. If anyone has thoughts on what the “right” amount of LULC diversity is, I’d love to hear from you.\n\n\nCode\ndiv &lt;- readRDS('data/sm_data.rds')[['lulc_div']]\n\ndiv_map &lt;- mapview(\n  div,\n  zcol = 'lulc_div',\n  label = 'county_name',\n  layer.name = 'LULC Diversity',\n  popup = popupTable(\n    div,\n    zcol = c(\n      'county_name',\n      'lulc_div'\n    ),\n    row.numbers = FALSE,\n    feature.id = FALSE\n  )\n)\n\ndiv_map@map %&gt;% \n  addFullscreenControl()\n\n\n\n\nLand Use Land Cover Diversity"
  },
  {
    "objectID": "pages/data_environment_maps.html#rare-threatened-and-endangered-species",
    "href": "pages/data_environment_maps.html#rare-threatened-and-endangered-species",
    "title": "Environment: Maps",
    "section": "3 Rare, Threatened and Endangered Species",
    "text": "3 Rare, Threatened and Endangered Species\nThe Vermont ANR Biofinder has lots of great layers. Technical abstracts for these layers can be found here. Below is a map of rare, threatened, and endangered species polygons statewide. Note that these are lumped together into a multi-polygon to save some space, but the individual polygons didn’t provide a whole lot useful information anyway.\n\n\nCode\npacman::p_load(\n  mapview,\n  leaflet.extras,\n  sf\n)\nrte &lt;- readRDS('data/sm_data.rds')[['biofinder_rte_spp']] %&gt;% \n  summarize()\nrte_map &lt;- mapview(\n  rte,\n  layer.name = 'RTE Species',\n  col.regions = '#154734'\n)\nrte_map@map %&gt;%\n  addFullscreenControl()\n\n\n\n\nMap of Rare, Threatened, and Endangered Species"
  },
  {
    "objectID": "pages/data_environment_maps.html#uncommon-species",
    "href": "pages/data_environment_maps.html#uncommon-species",
    "title": "Environment: Maps",
    "section": "4 Uncommon Species",
    "text": "4 Uncommon Species\nBiofinder also lists uncommon species as those facing a “moderate risk of extinction or extirpation due to restricted range, relatively few populations (often 80 or fewer), recent widespread declines, and other factors.” Same as above, these are lumped together into a single polygon for convenience.\n\n\nCode\nuncommon &lt;- readRDS('data/sm_data.rds')[['biofinder_uncommon_spp']] %&gt;% \n  summarize()\nuncommon_map &lt;- mapview(\n  uncommon,\n  layer.name = 'Uncommon Species',\n  col.regions = '#154734'\n)\nuncommon_map@map %&gt;%\n  addFullscreenControl()\n\n\n\n\nMap of Uncommon Species Distributions"
  },
  {
    "objectID": "pages/data_environment_maps.html#forest-biomass",
    "href": "pages/data_environment_maps.html#forest-biomass",
    "title": "Environment: Maps",
    "section": "5 Forest Biomass",
    "text": "5 Forest Biomass\nThe TreeMap 2016 dataset is quite comprehensive national survey of forest health and diversity. Updates are infrequent, but this is the best layer I’ve found to address biomass. The raster is at 30m.\n\n\nCode\ntreemap &lt;- readRDS('data/sm_data.rds')[['treemap_biomass']]\ncounties &lt;- readRDS('data/sm_data.rds')[['ne_counties_2024']]\n\ntreemap_map &lt;- treemap %&gt;%\n  mapview(\n    layer.name = 'Biomass (tons per acre)',\n    col.regions = viridis(n = 256)\n  ) +\n  mapview(\n    counties,\n    alpha.regions = 0,\n    color = 'black',\n    col.regions = 'black',\n    lwd = 1.25,\n    layer.name = 'Counties'\n  )\ntreemap_map@map %&gt;%\n  addFullscreenControl()\n\n\n\n\nMap of aboveground forest biomass\n\n\nShown below is the mean live above-ground biomass aggregated by county so that it plays well with other metrics. Note that it is measured in tons per acre of forest, non-forest cells were removed from analysis. So, it is not showing density of forest, just biomass in existing forest. This is why the more urban counties still show a reasonable density of live biomass. There is lots more that can be pulled out of this dataset, like dead/down carbon, tree stocking, live canopy cover, height, volume, tree per acre, etc. More info can be found here.\n\n\nCode\npacman::p_load(\n  mapview,\n  dplyr,\n  sf,\n  viridisLite,\n  leaflet,\n  leafpop,\n  stars\n)\n\nbiomass &lt;- readRDS('data/sm_data.rds')[['mean_biomass']]\nbiomass_map &lt;- mapview(\n  biomass,\n  zcol = 'mean_biomass',\n  layer.name = 'Mean Live Above&lt;br&gt;Ground Biomass&lt;br&gt;(tons per acre)',\n  label = 'county_name',\n  popup = popupTable(\n    biomass,\n    zcol = c(\n      'county_name',\n      'mean_biomass'\n    ),\n    feature.id = FALSE,\n    row.numbers = FALSE\n  )\n)"
  },
  {
    "objectID": "pages/data_production.html",
    "href": "pages/data_production.html",
    "title": "Production",
    "section": "",
    "text": "The first plot shows all the production indicators from both the current studies and the original framework in the y-axis. Orange indicates that the indicator is only being used in the current studies, purple that it is only included in the Wiltshire framework, and green that the indicator is used in both the framework and current studies.\nThe x-axis shows the number of secondary data metrics that have been collected to represent those indicators. You can see that there are some indicators for which there exist many data, but many indicators for which I have found little to represent them.\nValue-added market indicators are pulled from various NASS, as are the total quantity of food and forest products and production inputs. There is plenty more that might be pulled from NASS here. Imports and exports are from the Economic Research Service. The exports data are far more detailed than the imports. The former are disaggregated by category at the state level (fresh fruit, processed fruit, dairy…) which is why there are a heap of metrics for it. The import data is weak - I could only find the value of the top five agricultural imports for each state, not a total. Recalls are from FDA records, but I have not any helpful information the impact of recalls in terms of food safety. Crop diversity is represented in the richness indicator by the Cropland CROS data set, which provides estimates of the area of farmland devoted to specific crops across the US. I have disaggregated these at the county and state levels here.\nYou can see there is plenty more in the frameworks that are not represented by secondary data here, particularly related to the consumer side - marketability, nutrition, food waste, and safety. I suspect some of these indicators will migrate toward other dimensions in the refinement process as well. But this does help identify some gaps in the data.\nCode\npacman::p_load(\n  dplyr,\n  ggplot2,\n  stringr,\n  plotly,\n  RColorBrewer\n)\n\n# Load production tree with use notes\nprod_tree &lt;- read.csv('data/trees/prod_tree_with_use.csv')\n\n# Counts of secondary data metrics\ncounts &lt;- meta %&gt;% \n  group_by(Indicator) %&gt;% \n  dplyr::summarize(count = n())\n\n# Join to Wiltshire framework\ncolors &lt;- RColorBrewer::brewer.pal(n = 3, name = 'Dark2')\ndat &lt;- full_join(prod_tree, counts, by = join_by(Indicator == Indicator)) %&gt;% \n  arrange(Indicator) %&gt;% \n  mutate(\n    count = ifelse(is.na(count), 0, count),\n    label_color = case_when(\n      Use == 'both' ~ colors[1],\n      Use == 'wiltshire' ~ colors[3],\n      Use == 'current' ~ colors[2]\n    )\n  )\n# [1] \"#1B9E77\" \"#D95F02\" \"#7570B3\"\n\n# Plot\ndat %&gt;%\n  ggplot(aes(x = Indicator, y = count)) +\n  geom_col(\n    color = 'black',\n    fill = 'grey'\n  ) +\n  geom_point(\n    data = dat,\n    aes(x = 1, y = 1, color = Use),\n    inherit.aes = FALSE,\n    alpha = 0,\n    size = -1\n  ) +\n  scale_color_manual(\n    name = \"Indicator Use:\",\n    values = c(\n      \"both\" = colors[1],\n      \"wiltshire\" = colors[2],\n      \"current\" = colors[3]\n    ),\n    labels = c(\n      'Both',\n      'Wiltshire Only',\n      'Current Only'\n    )\n  ) +\n  theme_classic() +\n  theme(\n    axis.text = element_text(size = 12),\n    axis.text.y = element_text(color = rev(dat$label_color)),\n    axis.title = element_text(size = 14),\n    legend.text = element_text(size = 12),\n    legend.title = element_text(size = 12),\n    legend.position = \"bottom\",\n    plot.margin = margin(t = 10, r = 75, b = 10, l = 10)\n  ) +\n  guides(\n    color = guide_legend(override.aes = list(size = 4, alpha = 1))\n  ) +\n  coord_flip() +\n  labs(y = 'Secondary Data Count')\n\n\n\n\n\nBar Plot of Indicators\nOtherwise, I won’t be diving into the usual PCA exploration for the production dataset because we have collected enough metrics to put together a mostly full, mostly coherent example framework with which we can try aggregating data. This should be coming in January.",
    "crumbs": [
      "Secondary Data",
      "Production"
    ]
  },
  {
    "objectID": "pages/data_production.html#crop-diversity",
    "href": "pages/data_production.html#crop-diversity",
    "title": "Production",
    "section": "1 Crop Diversity",
    "text": "1 Crop Diversity\nI wanted to highlight this cropland data layer from USDA NASS in collaboration with USGS, NRCS, and FSA, among other agencies. It’s a crop-specific LULC layer derived from satellite imagery and ground-truthing. It seems to be about the best thrust at crop diversity across regions that I’ve found, but it also is certainly tailored toward primary crops, and may not represent New England very well. I’d love to hear thoughts on how useful this would be in New England.\n\n\nCode\npacman::p_load(\n  mapview,\n  sf,\n  stars,\n  leaflet,\n  leaflet.extras,\n  leafpop\n)\ncounties_sf &lt;- readRDS('data/sm_data.rds')[['ne_counties_2024']]\nfips_key &lt;- readRDS('data/sm_data.rds')[['fips_key']]\ncrop &lt;- readRDS('data/sm_data.rds')[['cropland_cros']]\n\ncounties &lt;- left_join(counties_sf, fips_key)\n\ndiv_map &lt;- mapview(\n  crop,\n  zcol = '2023_30m_cdls',\n  layer.name = 'Cropland Data Layer'\n) + \n  mapview(\n    counties,\n    label = 'county_name',\n    alpha.regions = 0\n  )\n\ndiv_map@map %&gt;% \n  addFullscreenControl()\n\n\n\n\nCrop diversity in New England\n\n\nI went on to use this layer to calculate Shannon diversity for crop types at the county and state levels. Here is what it looks like:\n\n\nCode\npacman::p_load(\n  mapview,\n  leaflet,\n  stringr,\n  sf\n)\nsource('dev/data_pipeline_functions.R')\n\ndat &lt;- readRDS('data/sm_data.rds')\n\ndiv &lt;- dat$metrics %&gt;% \n  filter(\n    variable_name == 'cropDiversity',\n    str_length(fips) == 5\n  ) %&gt;% \n  get_latest_year() %&gt;% \n  mutate(value = round(as.numeric(value), 3))\n\ndiv &lt;- left_join(dat$ne_counties_2021, div)\nmapview(\n  div,\n  zcol = 'value',\n  label = 'value',\n  layer.name = 'Crop Diversity'\n)\n\n\n\n\nShannon diversity for crop production at county level.\n\n\nSimilarly, we could pull crop richness out of this dataset, but I have a feeling that the bias toward commodity crops would make that a bit more problematic.",
    "crumbs": [
      "Secondary Data",
      "Production"
    ]
  },
  {
    "objectID": "pages/data_production.html#distribution-plots",
    "href": "pages/data_production.html#distribution-plots",
    "title": "Production",
    "section": "2 Distribution Plots",
    "text": "2 Distribution Plots\n\n2.1 By County\nNote that while most of the available secondary data is at the county level, the environment dimension includes a fair amount at the state level as well. This includes greenhouse gas emissions and water quality surveys. For now, I’ll just show these separately, but some creative aggregation will have to happen eventually.\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  ggplot2,\n  rlang,\n  ggpubr,\n  tidyr\n)\nsource('dev/data_pipeline_functions.R')\nsource('dev/filter_fips.R')\nmetrics &lt;- readRDS('data/sm_data.rds')[['metrics']]\nmetadata &lt;- readRDS('data/sm_data.rds')[['metadata']]\n\n# Use metadata to get help filter by dimension\nprod_meta &lt;- metadata %&gt;%\n  filter(dimension == 'production')\n\n# Filter to economics dimension\nprod_metrics &lt;- metrics %&gt;%\n  filter(variable_name %in% prod_meta$variable_name)\n\n# env_metrics$variable_name %&gt;% unique\n# get_str(env_metrics)\n\n# Filter to latest year and new (post-2024) counties\n# And pivot wider so it is easier to get correlations\nprod_county &lt;- prod_metrics %&gt;%\n  filter_fips(scope = 'counties') %&gt;%\n  get_latest_year() %&gt;%\n  select(fips, variable_name, value) %&gt;%\n  mutate(variable_name = str_split_i(variable_name, '_', 1)) %&gt;%\n  pivot_wider(\n    names_from = 'variable_name',\n    values_from = 'value'\n  ) %&gt;%\n  unnest(!fips) %&gt;%\n  mutate(across(c(2:last_col()), as.numeric))\n\n# Save temp file for use in analysis script\nsaveRDS(prod_county, 'data/temp/prod_county.rds')\n\n## Plot\nplots &lt;- map(names(prod_county)[-1], \\(var){\n  if (is.character(prod_county[[var]])) {\n    env_county %&gt;%\n      ggplot(aes(x = !!sym(var))) +\n      geom_bar(\n        fill = 'lightblue',\n        color = 'royalblue',\n        alpha = 0.5\n      ) +\n      theme_classic() +\n      theme(plot.margin = unit(c(rep(0.5, 4)), 'cm'))\n  } else if (is.numeric(prod_county[[var]])) {\n    prod_county %&gt;%\n      ggplot(aes(x = !!sym(var))) +\n      geom_density(\n        fill = 'lightblue',\n        color = 'royalblue',\n        alpha = 0.5\n      ) +\n      theme_classic() +\n      theme(plot.margin = unit(c(rep(0.5, 4)), 'cm'))\n  } else {\n    return(NULL)\n  }\n})\n\n\n# Arrange them in 4 columns\nggarrange(\n  plotlist = plots,\n  ncol = 3,\n  nrow = 4\n)\n\n\n\n\n\nDistributions of production metrics at the county level.\n\n\n\n\n\n\n2.2 By State\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  ggplot2,\n  rlang,\n  ggpubr,\n  tidyr\n)\n\nstate_codes &lt;- readRDS('data/sm_data.rds')[['fips_key']] %&gt;%\n  select(fips, state_code)\n\nprod_state &lt;- prod_metrics %&gt;%\n  filter_fips(scope = 'state') %&gt;%\n  get_latest_year() %&gt;%\n  select(fips, variable_name, value) %&gt;%\n  mutate(variable_name = str_split_i(variable_name, '_', 1)) %&gt;%\n  pivot_wider(\n    names_from = 'variable_name',\n    values_from = 'value'\n  ) %&gt;%\n  unnest(!fips) %&gt;%\n  mutate(across(c(2:last_col()), as.numeric)) %&gt;%\n  left_join(state_codes, by = 'fips')\n\n# Save temp data file for use in analysis script\nsaveRDS(prod_state, 'data/temp/prod_state.rds')\n\n# Variables to map. \nvars &lt;- names(prod_state)[-c(1, 43)]\n\n## Plot\nplots &lt;- map(vars, \\(var){\n  prod_state %&gt;%\n    ggplot(aes(y = !!sym(var), x = state_code, color = state_code)) +\n    geom_point(\n      alpha = 0.5,\n      size = 3\n    ) +\n    theme_classic() +\n    theme(\n      plot.margin = unit(c(rep(0.5, 4)), 'cm'),\n      legend.position = 'none'\n    ) +\n    labs(\n      x = 'State'\n    )\n})\n\n# Arrange them in 4 columns\nggarrange(\n  plotlist = plots,\n  ncol = 4,\n  nrow = 11\n)\n\n\n\n\n\nDistributions of production variables at state level",
    "crumbs": [
      "Secondary Data",
      "Production"
    ]
  },
  {
    "objectID": "pages/data_production.html#bivariate-plots",
    "href": "pages/data_production.html#bivariate-plots",
    "title": "Production",
    "section": "3 Bivariate Plots",
    "text": "3 Bivariate Plots\nUsing a selection of variables at the county level.\n\n\nCode\npacman::p_load(\n  GGally\n)\n\n# Neat function for mapping colors to ggpairs plots\n# https://stackoverflow.com/questions/45873483/ggpairs-plot-with-heatmap-of-correlation-values\nmap_colors &lt;- function(data,\n                       mapping,\n                       method = \"p\",\n                       use = \"pairwise\",\n                       ...) {\n  # grab data\n  x &lt;- eval_data_col(data, mapping$x)\n  y &lt;- eval_data_col(data, mapping$y)\n\n  # calculate correlation\n  corr &lt;- cor(x, y, method = method, use = use)\n  colFn &lt;- colorRampPalette(c(\"blue\", \"white\", \"red\"), interpolate = 'spline')\n  fill &lt;- colFn(100)[findInterval(corr, seq(-1, 1, length = 100))]\n\n  # correlation plot\n  ggally_cor(data = data, mapping = mapping, color = 'black', ...) +\n    theme_void() +\n    theme(panel.background = element_rect(fill = fill))\n}\n\nlower_function &lt;- function(data, mapping, ...) {\n  ggplot(data = data, mapping = mapping) +\n    geom_point(alpha = 0.5) +\n    geom_smooth(color = \"blue\", fill = \"grey\", ...) +\n    theme_bw()\n}\n\n# Rename variables to be shorter\nprod_county %&gt;%\n  select(-fips) %&gt;% \n  ggpairs(\n    upper = list(continuous = map_colors),\n    lower = list(continuous = lower_function),\n    axisLabels = 'show'\n  ) +\n  theme(\n    strip.text = element_text(size =  5),\n    axis.text = element_text(size =   5),\n    legend.text = element_text(size = 5)\n  )",
    "crumbs": [
      "Secondary Data",
      "Production"
    ]
  },
  {
    "objectID": "pages/data_production.html#sec-correlations",
    "href": "pages/data_production.html#sec-correlations",
    "title": "Production",
    "section": "4 Correlations",
    "text": "4 Correlations\nOnly showing correlations by county because we don’t have enough observations to run it by state.\n\n\nCode\npacman::p_load(\n  dplyr,\n  tidyr,\n  tibble,\n  stringr,\n  purrr,\n  tidyr,\n  ggplot2,\n  plotly,\n  reshape,\n  Hmisc,\n  viridisLite\n)\n\n# get_str(env_county)\n\ncor &lt;- prod_county %&gt;%\n  select(-fips) %&gt;%\n  as.matrix() %&gt;%\n  rcorr()\n\n# Melt correlation values and rename columns\ncor_r &lt;- melt(cor$r) %&gt;%\n  setNames(c('var_1', 'var_2', 'value'))\n\n# Save p values\ncor_p &lt;- melt(cor$P)\np.value &lt;- cor_p$value\n\n# Make heatmap with custom text aesthetic for tooltip\nplot &lt;- cor_r %&gt;%\n  ggplot(aes(var_1, var_2, fill = value, text = paste0(\n    'Var 1: ', var_1, '\\n',\n    'Var 2: ', var_2, '\\n',\n    'Correlation: ', format(round(value, 3), nsmall = 3), '\\n',\n    'P-Value: ', format(round(p.value, 3), nsmall = 3)\n  ))) +\n  geom_tile() +\n  scale_fill_viridis_c() +\n  theme(axis.text.x = element_text(hjust = 1, angle = 45)) +\n  labs(\n    x = NULL,\n    y = NULL,\n    fill = 'Correlation'\n  )\n\n# Convert to interactive plotly figure with text tooltip\nggplotly(\n  plot,\n  tooltip = 'text',\n  width = 800,\n  height = 500\n)\n\n\n\n\nInteractive correlation plot of metrics by county",
    "crumbs": [
      "Secondary Data",
      "Production"
    ]
  },
  {
    "objectID": "pages/home.html",
    "href": "pages/home.html",
    "title": "Sustainability Metrics",
    "section": "",
    "text": "Caution\n\n\n\n\n\nThe Sustainability Metrics project, as well as this site itself, are works in progress. All data and analyses shown here are preliminary. If you have any questions, comments, or suggestions about this site or the accompanying Shiny app, feel free to reach out to Chris at christopher.donovan@uvm.edu.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "pages/home.html#sec-intro",
    "href": "pages/home.html#sec-intro",
    "title": "Sustainability Metrics",
    "section": "1 Introduction",
    "text": "1 Introduction\n\n\n\nIntervale Center, Burlington, Vermont. Copyright: Sally McCay, UVM Photo.\n\n\nResilient food systems are increasingly recognized as essential, not only in meeting human needs, but in doing so within planetary bounds (Conijn et al. 2018). Approximately 42% of world’s population depend on agriculture for employment, which is a challenging endeavor in the face of farm consolidation, changing consumption patterns, and climate change (Giller et al. 2021; Aznar-Sánchez et al. 2019). Food systems themselves are responsible for one-third of greenhouse gas emissions, while anthropogenic climate change has reduced agricultural output by 21% in the last 60 years (Crippa et al. 2021; Ortiz-Bobea et al. 2021).\nMonitoring and adaptively managing the sustainability of food systems is thus vital. However, there is little consensus on how to define, let alone measure food system sustainability (Allen and Prosperi 2016; Béné et al. 2019). And while there is an abundance of research at the global level (Bathaei and Štreimikienė 2023; Chaudhary, Gustafson, and Mathys 2018), there exist gaps in understanding at the local, regional, and landscape levels (Dale et al. 2012).",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "pages/home.html#sustainability-metrics",
    "href": "pages/home.html#sustainability-metrics",
    "title": "Sustainability Metrics",
    "section": "2 Sustainability Metrics",
    "text": "2 Sustainability Metrics\n\n\n\nSpread from the Climate Kitchen harvest dinner. Photo credit: Colleen Goodhue, FSRC.\n\n\nThe Sustainability Metrics project is an effort to develop both the conceptual and methodological frameworks to define and measure regional food system sustainability in New England. The framework could be used to monitor sustainability over time and inform interventions at the policy and farm levels, creating a healthier and more resilient food system for both social and ecological ends.\nThe project is led by the Food Systems Research Center at the University of Vermont in partnership with, and funded by, the USDA ARS Food Systems Research Unit in Burlington, Vermont. Five teams of researchers and numerous community partners are currently conducting primary research on the development and measurement of indicators for food system sustainability. You can find more information about this work at the UVM FSRC Sustainability Metrics website. For now, what you will find here is a growing collection of secondary data, visualizations, and exploratory analyses to help support the project.\nMetadata and citations will be provided throughout the document, but it is worth appreciating the work of the folks at USDA AMS Food and Agriculture Mapper and Explorer in particular, as many of the data shown here were cleaned and compiled in their data warehouse. Considerable inspiration was also taken from the Food Systems Dashboard, developed by the Global Alliance for Improved Nutrition.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "pages/home.html#about-fsrc",
    "href": "pages/home.html#about-fsrc",
    "title": "Sustainability Metrics",
    "section": "3 About FSRC",
    "text": "3 About FSRC\nThe Food Systems Research Center at the University of Vermont is transforming the research landscape by funding collaborative projects that put people and the planet first, break down traditional academic silos and are integrated with and responsive to the needs of the communities we serve, including decision-makers, farmers, and food systems actors.\nRooted in the belief that no one group can find the answers alone, FSRC empowers researchers to work together across disciplines to address critical issues like soil health, food security, and climate resilience. Instead of funding research that leads to short-term fixes, our commitment is to give researchers the freedom, resources, and time they need to do relevant research that will inform policies, practices, and programs that will long outlast their work.\nFSRC considers the relationship of food systems across scales from local to global and is a partnership between UVM and the U.S. Department of Agriculture (USDA) Agricultural Research Service (ARS). FSRC’s transdisciplinary approach prioritizes research that studies food systems as a whole, including the networks of people, institutions, physical infrastructure, and natural resources through which food is grown, processed, distributed, sold, prepared, and eaten.\nLearn more about us at the Food Systems Research Center website.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "pages/home.html#license",
    "href": "pages/home.html#license",
    "title": "Sustainability Metrics",
    "section": "4 License",
    "text": "4 License\n\n    This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. \n\n\n    The code is licensed under the GNU General Public License v3.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "pages/indicator_distributions.html",
    "href": "pages/indicator_distributions.html",
    "title": "Indicator Distributions",
    "section": "",
    "text": "Now that our metrics have been aggregated into indicators, we can observe the univariate distributions of the indicators themselves. We will do this for all six sets of transformations.\n\n1 Summary\nBelow are counts of skewed indicator distributions for each transformation.\n\n\n\nCode\npacman::p_load(\n  purrr,\n  dplyr,\n  tibble\n)\n\n# Load reactable custom function\nsource('dev/get_reactable.R')\n\n# Load scores data for all transformations\nscores &lt;- readRDS('data/state_score_iterations.rds')\n# get_str(scores)\n\n# Rearrange data to make a single DF as table\nout &lt;- map_vec(scores, ~ {\n  .x[['indicator_scores']] %&gt;% \n    filter(!state %in% c('US_mean', 'US_median', 'NewEng')) %&gt;% \n    select(-state) %&gt;% \n    psych::describe() %&gt;% \n    select(skew) %&gt;% \n    filter(abs(skew) &gt; 2) %&gt;% \n    nrow()\n}) %&gt;% \n  as.data.frame() %&gt;% \n  rownames_to_column() %&gt;% \n  setNames(c('Transformation', 'Indicators with Skew &gt; 2')) %&gt;% \n  arrange(Transformation)\n# out\n\nget_reactable(\n  out, \n  fullWidth = FALSE,\n  searchable = FALSE,\n  defaultColDef = colDef(\n    minWidth = 200\n  )\n)\n\n\n\n\n\n\n\nIt looks like the Box Cox procedure transformed distributions at the metric level enough that there are no skewed distributions at the indicator level. Both the min-max and z-score transformations left us with only three skewed indicators: access to culturally appropriate food, total quantity exported, and total quantity imported. The latter two are not surprising, as big agricultural states likely have a disproportionate impact. The Z-score with geometric aggregation is a slightly nonsensical combination of methods that we will ignore for now.\nThis is providing some evidence that Box-Cox transformations could be warranted on at least these three problematic indicators (or the metrics therein). Below are the indicator distributions for each transformation. Inidicators with skew &gt; 2 are shown in red.\n\n\n2 Min Max Arithmetic\n\n\nCode\npacman::p_load(\n  ggplot2,\n  purrr,\n  ggpubr\n)\n\n# Load custom function\nsource('dev/get_indicator_distributions.R')\n\n# Plot them\nget_indicator_distributions(scores, 'minmax_arithmetic')\n\n\n\n\n\nDistributions of indicators at the state level for the min-max arithmetic transformations.\n\n\n\n\n\n\n3 Min Max Geometric\n\n\nCode\nget_indicator_distributions(scores, 'minmax_geometric')\n\n\n\n\n\nDistributions of indicators at the state level for the min-max geometric transformations\n\n\n\n\n\n\n4 Z-Score Arithmetic\n\n\nCode\nget_indicator_distributions(scores, 'zscore_arithmetic')\n\n\n\n\n\nDistributions of indicators at the state level for the Z-score arithmetic transformations\n\n\n\n\n\n\n5 Z-Score Geometric\n\n\nCode\nget_indicator_distributions(scores, 'zscore_geometric')\n\n\n\n\n\nDistributions of indicators at the state level for the Z-score geometric transformations\n\n\n\n\n\n\n6 Box Cox Arithmetic\n\n\nCode\nget_indicator_distributions(scores, 'boxcox_arithmetic')\n\n\n\n\n\nDistributions of indicators at the state level for the Box Cox arithmetic transformations\n\n\n\n\n\n\n7 Box Cox Geometric\n\n\nCode\nget_indicator_distributions(scores, 'boxcox_geometric')\n\n\n\n\n\nDistributions of indicators at the state level for the Box Cox geometric transformations\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Secondary Data Rework",
      "Indicator Distributions"
    ]
  },
  {
    "objectID": "pages/refined_framework.html",
    "href": "pages/refined_framework.html",
    "title": "Refined Secondary Data Framework",
    "section": "",
    "text": "This page shows the partially refined framework as it stands after three dimension meetings: economics, environment, and production. It also includes a selection of preliminary secondary data metrics to match those indicators. We have collected around 1500 metrics so far, although many of those are fluff. Effectively, we have around 400 meaningful metrics. Here, we are using a selection of ~91 of them to make a preliminary framework for preliminary analyses. This is more than we have been planning for the refined framework, which will give us a chance to see how aggregate scores change with different combinations of metrics and under different methods of aggregation.\nNote that where I have no metrics to represent an indicator, I have added placeholders of the format NONE_#. This does not mean that secondary data do not exist, just that I either haven’t found it or haven’t cleaned and wrangled it yet. At the time of writing, there are several of the latter, including crop failure, access to care, racial diversity, and others. If you know of any secondary data to fill in the gaps or improve on data we already have, please do reach out to let Chris know about it.\nAt the bottom of this page is a metadata table with sources and definitions for all the metrics.",
    "crumbs": [
      "Secondary Data Rework",
      "Framework"
    ]
  },
  {
    "objectID": "pages/refined_framework.html#partially-refined-framework",
    "href": "pages/refined_framework.html#partially-refined-framework",
    "title": "Refined Secondary Data Framework",
    "section": "1 Partially Refined Framework",
    "text": "1 Partially Refined Framework\nHere is the framework with a selection of secondary metrics, split into each dimension for ease of reading.\n\n1.1 Environment\nWe have reasonable representation of the environment dimension, although some metrics are proxies that are stretched a bit too far. I do have biodiversity and sensitive habitat data, but still need to process it at the state level and add it to the collection. Some weak points are the carbon stocks indicator - so far, this is all from the TreeMap 2016 dataset. I would love to include other stocks of carbon if anyone has leads on datasets. The metrics for embodied carbon are also stretches.\nOne gap I’ve noticed since this dimension was reworked in the dimension meeting is that there is no direct treatment of soil health included anymore. We might add soil metrics for carbon stocks or forest health, but there is no clear home for it. And that being said, I have had no luck finding any reliable soil health datasets, so I’m all ears here too.\n\n\nCode\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'environment',\n  include_metrics = TRUE,\n  y_limits = c(-2, 3.25),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.2 Economics\nIt has definitely been easier to find economics data than other dimensions. Worth noting here is that the access to land indicator is not ideal. I’m using value and farm size as a proxy for access. Use of crop in surance is also a proxy, since I could not find direct insurance claim data from FSA. So for now, we are just using the presidential and ag secretary declarations of disasters that allow for insurance claims.\n\n\nCode\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'economics',\n  include_metrics = TRUE,\n  y_limits = c(-1.5, 3.1),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.3 Production\nThe production dimension looks slim at first glance, but is better than it looks. Agricultural exports are a pretty robust dataset at the state level from ERS, although the import data only includes the values of the top five imports for each state - not ideal. Crop diversity is based on the Cropland Data Layer, a USDA NASS estimate of crop types, which I used to calculate Shannon diversity at the county level. The rest of the metrics come from NASS. Production is an area in which I feel better about using NASS data than usual.\n\n\nCode\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'production',\n  include_metrics = TRUE,\n  y_limits = c(-1.75, 3),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.4 Health\nThe Food Environment Atlas has lots of data on access and nutrition, which accounts for much of the food security data, along with NASS. The ‘food security tbd’ index is just pulled out because this is already an index of food security that encompasses access and affordability. I will use this to explore how redundant they are. I also threw in a slew of metrics for physical health. The Factor and Outcome Z-Scores are already composite indices from the County Health Rankings, a great dataset. This is another area I want to explore with PCA to see how much unique variation these little metrics bring compared to a composite.\n\n\nCode\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'health',\n  include_metrics = TRUE,\n  y_limits = c(-1.9, 3),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.5 Social\nThe social dimension is admittedly slim, but it could have been a lot worse. The County Health Rankings dataset brings a few useful metrics here, like social associations and disconnected youth. Census participation and voter turnout are proxies for participatory governance in food systems - I can’t imagine finding something much more specific than that at this point. I also plan on replacing mean producer age with a diversity index for age structure among producers.\n\n\nCode\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'social',\n  include_metrics = TRUE,\n  y_limits = c(-1.9, 3),\n  palette = \"ggthemes::stata_s2color\"\n)",
    "crumbs": [
      "Secondary Data Rework",
      "Framework"
    ]
  },
  {
    "objectID": "pages/refined_framework.html#metadata",
    "href": "pages/refined_framework.html#metadata",
    "title": "Refined Secondary Data Framework",
    "section": "2 Metadata",
    "text": "2 Metadata\nHere is the metadata for this refined set of secondary metrics.\n\n\nCode\npacman::p_load(\n  dplyr,\n  reactable,\n  stringr,\n  htmltools\n)\n\n# Load full metadata table\nmetadata &lt;- readRDS('data/sm_data.rds')[['metadata']]\n\n# Pull var names out of frame df, extract from all metadata\nvars &lt;- frame$variable_name\nmetadata &lt;- filter(metadata, variable_name %in% vars)\n\n# Pick out variables to display\nmeta &lt;- metadata %&gt;% \n  select(\n    metric,\n    'Variable Name' = variable_name,\n    definition,\n    dimension,\n    index,\n    indicator,\n    units,\n    'Year' = latest_year, # Renaming latest year as year, not including og year\n    source,\n    scope,\n    resolution,\n    url\n) %&gt;% \n  setNames(c(str_to_title(names(.))))\n\n###\nhtmltools::browsable(\n  tagList(\n    \n    tags$div(\n      style = \"display: flex; gap: 16px; margin-bottom: 20px; justify-content: center;\",\n      \n      tags$button(\n        class = \"btn btn-primary\",\n        style = \"display: flex; align-items: center; gap: 8px; padding: 8px 12px;\",\n        tagList(fontawesome::fa(\"download\"), \"Show/hide more columns\"),\n        onclick = \"Reactable.setHiddenColumns('metadata_table', prevColumns =&gt; {\n          return prevColumns.length === 0 ? ['Definition', 'Scope', 'Resolution', 'Url'] : []\n        })\"\n      ),\n      \n      tags$button(\n        class = \"btn btn-primary\",\n        style = \"display: flex; align-items: center; gap: 8px; padding: 8px 12px;\",\n        tagList(fontawesome::fa(\"download\"), \"Download as CSV\"),\n        onclick = \"Reactable.downloadDataCSV('metadata_table', 'sustainability_metadata.csv')\"\n      )\n    ),\n    \n    reactable(\n      meta,\n      sortable = TRUE,\n      resizable = TRUE,\n      filterable = TRUE,\n      searchable = TRUE,\n      pagination = TRUE,\n      bordered = TRUE,\n      wrap = TRUE,\n      rownames = FALSE,\n      onClick = 'select',\n      striped = TRUE,\n      pageSizeOptions = c(5, 10, 25, 50, 100),\n      defaultPageSize = 5,\n      showPageSizeOptions = TRUE,\n      highlight = TRUE,\n      style = list(fontSize = \"14px\"),\n      compact = TRUE,\n      fullWidth = TRUE,\n      columns = list(\n        Metric = colDef(\n          minWidth = 200,\n          sticky = 'left'\n        ),\n        'Variable Name' = colDef(\n          minWidth = 150\n        ),\n        Definition = colDef(\n          minWidth = 250\n        ),\n        'Latest Year' = colDef(minWidth = 75),\n        Source = colDef(minWidth = 250),\n        Scope = colDef(show = FALSE),\n        Resolution = colDef(show = FALSE),\n        Url = colDef(\n          minWidth = 300,\n          show = FALSE\n        )\n      ),\n      defaultColDef = colDef(minWidth = 100),\n      elementId = \"metadata_table\",\n      details = function(index) {\n        div(\n          style = \"padding: 15px; border: 1px solid #ddd; margin: 10px 0;\n             background-color: #E0EEEE; border-radius: 10px; border-color: black;\n             box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\",\n          \n          tags$h4(\n            strong(\"Details\"), \n          ),\n          tags$p(\n            strong('Metric Name: '), \n            as.character(metadata[index, 'metric']),\n          ),\n          tags$p(\n            strong('Variable Name: '), \n            as.character(metadata[index, 'variable_name']),\n          ),\n          tags$p(\n            strong('Definition: '), \n            as.character(metadata[index, 'definition']),\n          ),\n          tags$p(\n            strong('Source: '), \n            as.character(metadata[index, 'source'])\n          ),\n          tags$p(\n            strong('Latest Year: '), \n            as.character(metadata[index, 'latest_year'])\n          ),\n          tags$p(\n            strong('All Years (cleaned, wrangled, and included): '), \n            as.character(metadata[index, 'year'])\n          ),\n          tags$p(\n            strong('Updates: '), \n            str_to_title(as.character(metadata[index, 'updates']))\n          ),\n          tags$p(\n            strong('URL: '), \n            tags$a(\n              href = as.character(metadata[index, 'url']),\n              target = '_blank',\n              as.character(metadata[index, 'url'])\n            )\n          )\n        )\n      }\n    )\n  )\n)\n\n\n\n\n\nShow/hide more columns\n\n\n\nDownload as CSV",
    "crumbs": [
      "Secondary Data Rework",
      "Framework"
    ]
  },
  {
    "objectID": "pages/refine_environment.html",
    "href": "pages/refine_environment.html",
    "title": "Environment Indicator Refinement",
    "section": "",
    "text": "This page describes the various iterations of indicator sets for the environment dimension. First, we observe the indicators included in the dimension at three points in time. The second section then shows the results of the survey following the indicator refinement meeting. A final set of indicators to incorporate into the next RFP is still in the works!",
    "crumbs": [
      "Framework",
      "Indicator Refinement",
      "Environment"
    ]
  },
  {
    "objectID": "pages/refine_environment.html#indicator-progression",
    "href": "pages/refine_environment.html#indicator-progression",
    "title": "Environment Indicator Refinement",
    "section": "1 Indicator Progression",
    "text": "1 Indicator Progression\n\n1.1 Wiltshire\nThis graph shows the original framework for the dimension as described in the Wiltshire et al. paper.\n\n\nCode\n# Use custom function in SMDO repo\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/wiltshire_tree.csv',\n  dimension_in = 'Environment',\n  y_limits = c(-1.5, 2.1),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.2 Matrix\nHere is the current set of indicators in the matrix, following the Sustainability Metrics workshop in July, 2024\n\n\nCode\n# Use custom function in SMDO repo\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/matrix_tree.csv',\n  dimension_in = 'Environment',\n  y_limits = c(-1.5, 2.1),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.3 Refinement Meeting\nFinally, the tentative set of indicators following the indicator refinement meeting on November 22nd, 2024\n\n\nCode\n# Use custom function in SMDO repo\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/env_meeting_tree.csv',\n  dimension_in = 'Environment',\n  y_limits = c(-1.5, 2.1),\n  palette = \"ggthemes::stata_s2color\"\n)",
    "crumbs": [
      "Framework",
      "Indicator Refinement",
      "Environment"
    ]
  },
  {
    "objectID": "pages/refine_environment.html#survey",
    "href": "pages/refine_environment.html#survey",
    "title": "Environment Indicator Refinement",
    "section": "2 Survey",
    "text": "2 Survey\nThese are the results from the follow-up survey to the economic indicator refinement meeting on November 15th. This feedback will be used to refine the framework for the next RFP.\n\n2.1 Indicators\n\n\nCode\nraw &lt;- read_csv('data/surveys/env_survey.csv')\n\ndat &lt;- raw %&gt;% \n  select(\n    ends_with('GROUP'),\n  ) %&gt;% \n  setNames(c(\n    'indi_must',\n    'indi_probably',\n    'indi_probably_not',\n    'indi_must_not',\n    'idx_must',\n    'idx_probably',\n    'idx_probably_not',\n    'idx_must_not'\n  )) %&gt;% \n  .[-c(1:2), ]\n\nto_df &lt;- function(x) {\n  x %&gt;%\n    str_replace_all('PFAS, PFOS', 'PFAS/PFOS') %&gt;% \n    str_replace_all('soil loss/', 'Soil loss/') %&gt;% \n    str_split(',') %&gt;% \n    unlist() %&gt;% \n    table() %&gt;% \n    as.data.frame() %&gt;% \n    setNames(c('indicator', 'freq')) %&gt;% \n    arrange(desc(freq))\n}\n\nindi_out &lt;- map(dat[1:4], to_df)\nidx_out &lt;- map(dat[5:8], to_df)\n\n# Add scores by multipliers\nmultipliers &lt;- c(3:0)\nind_tables &lt;- map2(indi_out, multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(ind_tables, ~ {\n  col_name &lt;- str_remove(.y, 'indi_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n}) %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not * 1e2 + must_not,\n    indicator = fct_reorder(indicator, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:must_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      \"must_not\",\n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(indicator) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n\n\n\nCode\nggplot(graph_table, aes(\n  y = reorder(indicator, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Indicator\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 20),\n    legend.position = 'top'\n    ) +\n  scale_fill_brewer(\n    palette = \"RdBu\", \n    direction = -1,\n    limits = c(\n      \"must\",\n      \"probably\", \n      \"probably_not\", \n      \"must_not\" \n    ),\n    labels = c(\n      \"Must Include\", \n      \"Probably Include\", \n      \"Probably Not Include\", \n      \"Must Not Include\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nWe are coding this so “Must Include” is worth 3 points, “Probably Include” is worth 2 points, “Probably Not Include” is worth 1 point, and “Must Not Include” is worth 0 points. Note that the last column is the sum of proportions of “Must Include” and “Probably Include”. You can sort, search, expand, or page through the table below.\n\n\n\n\n\n\n\n\n2.2 Indices\n\n\nCode\n# Add scores by multipliers\nmultipliers &lt;- c(3:0)\nidx_tables &lt;- map2(idx_out, multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(index = indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(idx_tables, ~ {\n  col_name &lt;- str_remove(.y, 'idx_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n}) %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not,\n    sort_key = ifelse(str_detect(index, 'Carbon'), 5e6, sort_key),\n    index = fct_reorder(index, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:must_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      \"must_not\",\n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(index) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n\ncolors &lt;- RColorBrewer::brewer.pal(4, 'RdBu')\n\nggplot(graph_table, aes(\n  y = reorder(index, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Index\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 20),\n    legend.position = 'top'\n    ) +\n  scale_fill_manual(\n    values = rev(colors),\n    limits = c(\n      \"must\",\n      \"probably\",\n      \"probably_not\",\n      'must_not'\n    ),\n    labels = c(\n      \"Must Include\",\n      \"Probably Include\",\n      \"Probably Not Include\",\n      \"Must Not Include\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nThe indices are going through the same treatment as indicators above - scored from 3 to 0. Note here that the “Carbon ($ GHGs/nutrients)” index seems to be missing a vote. So, it only has 12 points, but the proportion of votes for “Must Include” is 1.",
    "crumbs": [
      "Framework",
      "Indicator Refinement",
      "Environment"
    ]
  },
  {
    "objectID": "pages/selection.html",
    "href": "pages/selection.html",
    "title": "Variable Selection and Regression",
    "section": "",
    "text": "On this page we will take our min-max normalized, geometrically averaged scores, which look like the most reliable and approachable so far, and take a deeper dive into variable selection, regression, and PCA. From the dimension meetings, it sounds like we may have some indicators with a couple of metrics, and potentially others with dozens. Because of this, and because of our focus on developing sensible indicators, I think it will be best to do any weighting at the indicator level or above. This also reduces our variable count substantially in relation to our state count of 51, opening more doors for PCA.\nIt is worth emphasizing at the top that the metrics that are making up this secondary data framework are not a great representation of the system. There are some important holes, as well as a heap of metrics that are serving as rather uninspiring proxies. So, extrapolation of these results beyond the confines of the exercise is not recommended. The purpose here is to explore strengths and tradeoffs in methods for aggregating the data. As primary data come in and make up the bulk of the framework and secondary data are used to fill in the gaps, this should start becoming more interpretable.",
    "crumbs": [
      "Secondary Data Rework",
      "Selection and Regression"
    ]
  },
  {
    "objectID": "pages/selection.html#component-extraction",
    "href": "pages/selection.html#component-extraction",
    "title": "Variable Selection and Regression",
    "section": "2.1 Component Extraction",
    "text": "2.1 Component Extraction\n\n\nCode\npacman::p_load(\n  psych\n)\n\n# Filter down to just indicators for PCA\npca_dat &lt;- dat %&gt;% \n  select(starts_with('indic')) %&gt;% \n  setNames(c(str_remove(names(.), 'indic_')))\n# get_str(pca_dat)\n\n# Explore how many factors to extract\nVSS(pca_dat, n = 8, rotate = 'varimax')\n\n\n\n\n\n\n\n\n\n\nVery Simple Structure\nCall: vss(x = x, n = n, rotate = rotate, diagonal = diagonal, fm = fm, \n    n.obs = n.obs, plot = plot, title = title, use = use, cor = cor)\nVSS complexity 1 achieves a maximimum of 0.48  with  2  factors\nVSS complexity 2 achieves a maximimum of 0.69  with  7  factors\n\nThe Velicer MAP achieves a minimum of 0.04  with  2  factors \nBIC achieves a minimum of  -909.29  with  1  factors\nSample Size adjusted BIC achieves a minimum of  89.1  with  8  factors\n\nStatistics by number of factors \n  vss1 vss2   map dof chisq                prob sqresid  fit RMSEA  BIC SABIC\n1 0.40 0.00 0.039 405   683 0.00000000000000015    44.6 0.40 0.114 -909   362\n2 0.46 0.57 0.037 376   590 0.00000000001050770    31.8 0.57 0.104 -888   292\n3 0.44 0.64 0.038 348   527 0.00000000182045725    25.0 0.67 0.098 -841   251\n4 0.44 0.65 0.038 321   467 0.00000018467020571    19.8 0.74 0.092 -795   212\n5 0.48 0.67 0.037 295   405 0.00002010786049275    14.8 0.80 0.083 -754   172\n6 0.48 0.68 0.037 270   356 0.00033440919666943    11.6 0.84 0.077 -705   142\n7 0.46 0.69 0.039 246   310 0.00335009318118730     9.1 0.88 0.069 -657   115\n8 0.46 0.69 0.040 223   266 0.02620845975602793     7.3 0.90 0.058 -611    89\n  complex eChisq  SRMR eCRMS eBIC\n1     1.0   1156 0.161 0.167 -436\n2     1.3    748 0.130 0.140 -731\n3     1.6    555 0.112 0.125 -813\n4     1.8    415 0.097 0.113 -848\n5     1.9    280 0.079 0.096 -880\n6     2.0    203 0.068 0.086 -859\n7     2.1    143 0.057 0.075 -824\n8     2.2    104 0.048 0.067 -773\n\n\nCode\nfa.parallel(pca_dat)\n\n\n\n\n\n\n\n\n\nParallel analysis suggests that the number of factors =  5  and the number of components =  5 \n\n\nBoth MAP and Parallel Analysis determine that there should be 5 components.\n\n\nCode\npca_out &lt;- pca(pca_dat, nfactors = 5)\nplot(pca_out$values)\nabline(h = 1)\n\n\n\n\n\n\n\n\n\nThe scree plot is not all that convincing, though. One could make an argument for seven components.",
    "crumbs": [
      "Secondary Data Rework",
      "Selection and Regression"
    ]
  },
  {
    "objectID": "pages/selection.html#run-pca",
    "href": "pages/selection.html#run-pca",
    "title": "Variable Selection and Regression",
    "section": "2.2 Run PCA",
    "text": "2.2 Run PCA\nLet’s go ahead with the recommended components from MAP and PA, which are generally more reliable than scree plots.\n\n\nCode\npca_out\n\n\nPrincipal Components Analysis\nCall: principal(r = r, nfactors = nfactors, residuals = residuals, \n    rotate = rotate, n.obs = n.obs, covar = covar, scores = scores, \n    missing = missing, impute = impute, oblique.scores = oblique.scores, \n    method = method, use = use, cor = cor, correct = 0.5, weight = NULL)\nStandardized loadings (pattern matrix) based upon correlation matrix\n                                        RC1   RC2   RC3   RC5   RC4   h2   u2\naccess_to_land                         0.01  0.36 -0.62 -0.05 -0.09 0.53 0.47\nwealth_income_distribution             0.77  0.13  0.15 -0.10  0.04 0.64 0.36\noperations_diversification             0.83 -0.24  0.00  0.15 -0.09 0.77 0.23\nincome_stability                       0.67 -0.02  0.20  0.29  0.38 0.72 0.28\nuse_of_ag_farm_crop_insurance         -0.02 -0.12  0.07  0.52  0.29 0.38 0.62\nfluxes                                -0.13  0.59 -0.23  0.00 -0.21 0.46 0.54\nstocks                                 0.09  0.18  0.66  0.03 -0.06 0.47 0.53\nembodied                              -0.37  0.66 -0.08  0.17 -0.23 0.66 0.34\nhealth                                 0.39 -0.09  0.64  0.14 -0.37 0.73 0.27\nquantity                               0.14  0.13  0.25 -0.05 -0.51 0.36 0.64\nquality                                0.13 -0.17  0.69  0.16  0.03 0.55 0.45\neducational_attainment                 0.47  0.01 -0.07  0.59 -0.15 0.60 0.40\nfood_access                            0.25  0.48  0.48  0.01 -0.19 0.57 0.43\naccess_to_culturally_appropriate_food  0.69  0.10  0.03 -0.08  0.02 0.50 0.50\ndietary_quality                        0.48 -0.38  0.07  0.11 -0.25 0.45 0.55\nfood_affordability                    -0.28 -0.48  0.12 -0.47 -0.19 0.58 0.42\nmental_health_tbd                      0.00 -0.52  0.32 -0.20 -0.13 0.42 0.58\nhousing_supply_and_quality             0.56  0.13  0.30  0.29  0.24 0.56 0.44\nphysical_health_tbd                   -0.23  0.04  0.13 -0.61  0.25 0.51 0.49\ntotal_quantity_exported               -0.10  0.74  0.09  0.03  0.00 0.57 0.43\ntotal_quantity_imported                0.18  0.62  0.24  0.05  0.39 0.63 0.37\nproduction_species_diversity          -0.03  0.02  0.02 -0.02  0.63 0.40 0.60\nproduction_inputs                     -0.15  0.57  0.00 -0.38  0.02 0.49 0.51\ntotal_quantity_forest_products        -0.19 -0.02  0.59 -0.30  0.17 0.51 0.49\nvalue_added_market                     0.74 -0.15 -0.14  0.11 -0.15 0.63 0.37\nsocial_connectedness                  -0.03 -0.19 -0.03 -0.68 -0.14 0.52 0.48\ndiverse_representation                 0.22  0.57 -0.06 -0.23 -0.33 0.53 0.47\ngender_diversity                       0.50 -0.13  0.27  0.17  0.32 0.47 0.53\nage_diversity                          0.27 -0.05  0.06 -0.08  0.68 0.55 0.45\nparticipatory_governance              -0.11 -0.08  0.23  0.75 -0.19 0.67 0.33\n                                      com\naccess_to_land                        1.7\nwealth_income_distribution            1.2\noperations_diversification            1.3\nincome_stability                      2.2\nuse_of_ag_farm_crop_insurance         1.7\nfluxes                                1.7\nstocks                                1.2\nembodied                              2.0\nhealth                                2.5\nquantity                              1.8\nquality                               1.3\neducational_attainment                2.1\nfood_access                           2.8\naccess_to_culturally_appropriate_food 1.1\ndietary_quality                       2.6\nfood_affordability                    3.0\nmental_health_tbd                     2.2\nhousing_supply_and_quality            2.7\nphysical_health_tbd                   1.8\ntotal_quantity_exported               1.1\ntotal_quantity_imported               2.3\nproduction_species_diversity          1.0\nproduction_inputs                     1.9\ntotal_quantity_forest_products        1.9\nvalue_added_market                    1.3\nsocial_connectedness                  1.3\ndiverse_representation                2.4\ngender_diversity                      2.8\nage_diversity                         1.4\nparticipatory_governance              1.4\n\n                       RC1  RC2  RC3  RC5  RC4\nSS loadings           4.54 3.66 2.94 2.91 2.37\nProportion Var        0.15 0.12 0.10 0.10 0.08\nCumulative Var        0.15 0.27 0.37 0.47 0.55\nProportion Explained  0.28 0.22 0.18 0.18 0.14\nCumulative Proportion 0.28 0.50 0.68 0.86 1.00\n\nMean item complexity =  1.9\nTest of the hypothesis that 5 components are sufficient.\n\nThe root mean square of the residuals (RMSR) is  0.09 \n with the empirical chi square  346.3  with prob &lt;  0.021 \n\nFit based upon off diagonal values = 0.85\n\n\nThere is a lot to look at here, but here are some impressions.\nMost of our current economics indicators (access to land to income stability), are coalescing into RC1. However, access to land splits out into RC3, alongside environment indicators like carbon stocks and forest health, as well as production indicators like inputs and total quantity of food products. The access to land indicator does not have an ideal set of metrics under it currently - it is made up of land and building value per farm and acreage per farm as a proxy for access. So it seems reasonable enough that this indicator is pulling away from the rest of the economics indicators.\nThe environment indicators (carbon stocks to water quantity) mostly make up RC5, but are also split between several other components. The carbon stocks and forest health indicators are currently both derived from the USFS TreeMap dataset, so it makes sense they fall together in RC5. This is a particularly scattered dimension though - perhaps partly from hinky proxy metrics and partly for the diversity of the dimension itself.\nHealth indicators (education to physical health) fall pretty consistently into RC2. A notable exception is food access, which falls into RC5 along with TreeMap data. I have a hunch that RC5 is measuring the rural/urban divide at this point. The culturally appropriate food indicator also moves over to RC1 alongside economics indicators. Given that this indicator currently consists only of the ability of School Food Authorities to provide culturally appropriate foods, this is probably tracking with wealth.\nProduction indicators (richness to value added markets) fall mostly into RC2. However, richness (measured by crop diversity) swings out into RC4, which is a bit of a grab bag but does contain some forest indicators. The economics dimension RC1 also loads strongly onto the value added markets indicator.\nFinally, the social dimension is scattered all over the place. I can’t make much sense of it as a whole, given that it has a pretty unsatisfactory set of metrics behind it at this point.\nThe next step for this PCA path is to see how things look if we aggregate our indices and dimensions based on these PCA loadings in the style of Nicoletti (2000), rather than working with the arithmetic/geometric means as we do below.",
    "crumbs": [
      "Secondary Data Rework",
      "Selection and Regression"
    ]
  },
  {
    "objectID": "pages/selection.html#economics",
    "href": "pages/selection.html#economics",
    "title": "Variable Selection and Regression",
    "section": "3.1 Economics",
    "text": "3.1 Economics\n\n3.1.1 Linear Model\nFirst we can try a plain old linear model to see how economics loads onto its indicators.\n\n\nCode\n# Reduce data down to dimen_economics and all indicators\necon_dat &lt;- select(dat, dimen_economics, starts_with('indic')) %&gt;% \n  setNames(c(names(.) %&gt;% str_remove('indic_|dimen_')))\nget_str(econ_dat)\n\n\nrowws_df [51 × 31] (S3: rowwise_df/tbl_df/tbl/data.frame)\n $ economics                            : num [1:51] 0.1362 0.1858 0.1334 0.15..\n $ access_to_land                       : num [1:51] 0.0948 0.0366 0.025 0.155..\n $ wealth_income_distribution           : num [1:51] 0.336 0.36 0.343 0.342 0...\n $ operations_diversification           : num [1:51] 0.01315 0.39392 0.05679 0..\n $ income_stability                     : num [1:51] 0.0496 0.3594 0.3734 0.07..\n $ use_of_ag_farm_crop_insurance        : num [1:51] 0.7686 0.8106 1 0.7014 1 ..\n $ fluxes                               : num [1:51] 0.037147 0.001197 0.05405..\n $ stocks                               : num [1:51] 0.1621 0.3607 0.0181 0.31..\n $ embodied                             : num [1:51] 0.05821 0.00631 0.14482 0..\n $ health                               : num [1:51] 0.246 0.401 0.103 0.353 0..\n $ quantity                             : num [1:51] 0.1788 0.7638 0.1694 0.10..\n $ quality                              : num [1:51] 0.581 0.559 0.449 0.454 0..\n $ educational_attainment               : num [1:51] 0.2323 0.4223 0.4479 0.15..\n $ food_access                          : num [1:51] 0.2805 0.3153 0.0677 0.24..\n $ access_to_culturally_appropriate_food: num [1:51] 0.1563 0.3824 0.0818 0.07..\n $ dietary_quality                      : num [1:51] 0.4706 0.6929 0.2826 0.66..\n $ food_affordability                   : num [1:51] 0.7695 0.2614 0.1394 0.59..\n $ mental_health_tbd                    : num [1:51] 0.764 0.565 0.32 0.54 0.3..\n $ housing_supply_and_quality           : num [1:51] 0.425 0.54 0.611 0.305 0...\n $ physical_health_tbd                  : num [1:51] 0.34 0.486 0.426 0.338 0...\n $ total_quantity_exported              : num [1:51] 0.068031 1 0.068105 0.174..\n $ total_quantity_imported              : num [1:51] 0.01995 1 0.31967 0.01134..\n $ production_species_diversity         : num [1:51] 0.5496 0.3859 0.6537 0.37..\n $ production_inputs                    : num [1:51] 0.2 1 0.381 0.6952 0.4667..\n $ total_quantity_forest_products       : num [1:51] 0.635061 0.000087 0.00048..\n $ value_added_market                   : num [1:51] 0.01481 0.30841 0.04466 0..\n $ social_connectedness                 : num [1:51] 0.425 0.545 0.222 0.489 0..\n $ diverse_representation               : num [1:51] 0.498 0.449 0.284 0.648 0..\n $ gender_diversity                     : num [1:51] 0.274 0.9229 1 0.4825 0.4..\n $ age_diversity                        : num [1:51] 0.623 0.245 0.887 0.415 0..\n $ participatory_governance             : num [1:51] 0.3192 0.514 0.4967 0.011..\n\n\nCode\nlm &lt;- lm(economics ~ ., data = econ_dat)\nsummary(lm)\n\n\n\nCall:\nlm(formula = economics ~ ., data = econ_dat)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.023655 -0.007724 -0.000542  0.006134  0.036492 \n\nCoefficients:\n                                        Estimate Std. Error t value   Pr(&gt;|t|)\n(Intercept)                           -0.1187162  0.0467224  -2.541   0.019454\naccess_to_land                         0.4777076  0.0726249   6.578 0.00000208\nwealth_income_distribution             0.2024093  0.0600107   3.373   0.003025\noperations_diversification             0.0364868  0.0320552   1.138   0.268468\nincome_stability                       0.0355789  0.0340193   1.046   0.308110\nuse_of_ag_farm_crop_insurance          0.0550551  0.0144642   3.806   0.001106\nfluxes                                -0.0517638  0.0273263  -1.894   0.072741\nstocks                                -0.0297724  0.0396908  -0.750   0.461923\nembodied                               0.0884356  0.0491618   1.799   0.087149\nhealth                                 0.1405783  0.0531919   2.643   0.015607\nquantity                               0.0000450  0.0226645   0.002   0.998435\nquality                                0.0231552  0.0347114   0.667   0.512345\neducational_attainment                -0.0170424  0.0228397  -0.746   0.464243\nfood_access                           -0.0405427  0.0340479  -1.191   0.247691\naccess_to_culturally_appropriate_food  0.0231301  0.0294193   0.786   0.440955\ndietary_quality                       -0.0097470  0.0186486  -0.523   0.606949\nfood_affordability                    -0.0481276  0.0221358  -2.174   0.041868\nmental_health_tbd                     -0.0298787  0.0342944  -0.871   0.393961\nhousing_supply_and_quality             0.0794371  0.0419199   1.895   0.072645\nphysical_health_tbd                   -0.0036742  0.0496060  -0.074   0.941692\ntotal_quantity_exported               -0.0565966  0.0305184  -1.855   0.078472\ntotal_quantity_imported                0.0476773  0.0284780   1.674   0.109664\nproduction_species_diversity           0.0525955  0.0252480   2.083   0.050281\nproduction_inputs                     -0.0505254  0.0216038  -2.339   0.029845\ntotal_quantity_forest_products         0.0167068  0.0172500   0.969   0.344356\nvalue_added_market                     0.1057431  0.0269338   3.926   0.000836\nsocial_connectedness                   0.2314442  0.0570904   4.054   0.000620\ndiverse_representation                 0.0001922  0.0252819   0.008   0.994010\ngender_diversity                      -0.0239381  0.0287487  -0.833   0.414865\nage_diversity                         -0.0064259  0.0182051  -0.353   0.727802\nparticipatory_governance               0.0039054  0.0195169   0.200   0.843419\n                                         \n(Intercept)                           *  \naccess_to_land                        ***\nwealth_income_distribution            ** \noperations_diversification               \nincome_stability                         \nuse_of_ag_farm_crop_insurance         ** \nfluxes                                .  \nstocks                                   \nembodied                              .  \nhealth                                *  \nquantity                                 \nquality                                  \neducational_attainment                   \nfood_access                              \naccess_to_culturally_appropriate_food    \ndietary_quality                          \nfood_affordability                    *  \nmental_health_tbd                        \nhousing_supply_and_quality            .  \nphysical_health_tbd                      \ntotal_quantity_exported               .  \ntotal_quantity_imported                  \nproduction_species_diversity          .  \nproduction_inputs                     *  \ntotal_quantity_forest_products           \nvalue_added_market                    ***\nsocial_connectedness                  ***\ndiverse_representation                   \ngender_diversity                         \nage_diversity                            \nparticipatory_governance                 \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.01854 on 20 degrees of freedom\nMultiple R-squared:  0.9719,    Adjusted R-squared:  0.9297 \nF-statistic: 23.05 on 30 and 20 DF,  p-value: 0.0000000004204\n\n\nWe can see that most of the economics indicators (access to land, wealth and income distribution, income stability) are significant predictors, while operations diversification is close. But some surprises are access to culturally appropriate food (school food authorities serving culturally relevant food), housing supply and quality, as well as a few production indicators, like richness (crop diversity), production inputs, and value-added markets. Social connectedness from the social dimension also makes it on the list. The largest coefficients by a wide margin are for access to land and wealth and income distribution.\n\n\n3.1.2 Splitting Data\nHere we split out data into a 60/40 training/test set for cross validation with GLMnet and Random Forest models. Note that we are pushing the limits of our sample size. But this should help protect against overfitting.\n\n\nCode\npacman::p_load(\n  caret,\n  ranger,\n  glmnet\n)\n\n# Split data 60/40\nset.seed(42)\nindices &lt;- createDataPartition(econ_dat$economics, p = 0.60, list = FALSE)\ntraining_data &lt;- econ_dat[indices, ]\ntesting_data &lt;- econ_dat[-indices,]\n\nmy_folds &lt;- createFolds(training_data$economics, k = 5, list = TRUE)\n\n# Control\nmy_control &lt;- trainControl(\n  method = 'cv',\n  number = 5,\n  verboseIter = TRUE,\n  index = my_folds\n)\n\n# Check for zero variance or near zero variance indicators\nnearZeroVar(dat, names = TRUE, saveMetrics = TRUE)\n# All clear\n\n\n\n\n3.1.3 GLMnet\nHere we use a GLMnet to find an optimal balance between a ridge regression, which penalizes variables based on the magnitude of coefficients, and lasso regression, which adds a penalty based on the absolute value of coefficients. We use a tuning grid to find optimal values of alpha (0 = ridge, 1 = lasso) and lambda (the penalty parameter). Both this and the random forest model are particularly good at prediction, but also provide a metric for variable importance that can help us interpret our indicators.\n\n\nCode\nset.seed(42)\necon_glmnet &lt;- train(\n  economics ~ .,\n  data = training_data, \n  tuneGrid = expand.grid(\n    alpha = seq(0.1, 1, length = 5),\n    lambda = seq(0.0001, 0.1, length = 100)\n  ),\n  method = \"glmnet\",\n  trControl = my_control,\n  preProcess = c('zv', 'center', 'scale')\n)\n\n\n+ Fold1: alpha=0.100, lambda=0.1 \n- Fold1: alpha=0.100, lambda=0.1 \n+ Fold1: alpha=0.325, lambda=0.1 \n- Fold1: alpha=0.325, lambda=0.1 \n+ Fold1: alpha=0.550, lambda=0.1 \n- Fold1: alpha=0.550, lambda=0.1 \n+ Fold1: alpha=0.775, lambda=0.1 \n- Fold1: alpha=0.775, lambda=0.1 \n+ Fold1: alpha=1.000, lambda=0.1 \n- Fold1: alpha=1.000, lambda=0.1 \n+ Fold2: alpha=0.100, lambda=0.1 \n- Fold2: alpha=0.100, lambda=0.1 \n+ Fold2: alpha=0.325, lambda=0.1 \n- Fold2: alpha=0.325, lambda=0.1 \n+ Fold2: alpha=0.550, lambda=0.1 \n- Fold2: alpha=0.550, lambda=0.1 \n+ Fold2: alpha=0.775, lambda=0.1 \n- Fold2: alpha=0.775, lambda=0.1 \n+ Fold2: alpha=1.000, lambda=0.1 \n- Fold2: alpha=1.000, lambda=0.1 \n+ Fold3: alpha=0.100, lambda=0.1 \n- Fold3: alpha=0.100, lambda=0.1 \n+ Fold3: alpha=0.325, lambda=0.1 \n- Fold3: alpha=0.325, lambda=0.1 \n+ Fold3: alpha=0.550, lambda=0.1 \n- Fold3: alpha=0.550, lambda=0.1 \n+ Fold3: alpha=0.775, lambda=0.1 \n- Fold3: alpha=0.775, lambda=0.1 \n+ Fold3: alpha=1.000, lambda=0.1 \n- Fold3: alpha=1.000, lambda=0.1 \n+ Fold4: alpha=0.100, lambda=0.1 \n- Fold4: alpha=0.100, lambda=0.1 \n+ Fold4: alpha=0.325, lambda=0.1 \n- Fold4: alpha=0.325, lambda=0.1 \n+ Fold4: alpha=0.550, lambda=0.1 \n- Fold4: alpha=0.550, lambda=0.1 \n+ Fold4: alpha=0.775, lambda=0.1 \n- Fold4: alpha=0.775, lambda=0.1 \n+ Fold4: alpha=1.000, lambda=0.1 \n- Fold4: alpha=1.000, lambda=0.1 \n+ Fold5: alpha=0.100, lambda=0.1 \n- Fold5: alpha=0.100, lambda=0.1 \n+ Fold5: alpha=0.325, lambda=0.1 \n- Fold5: alpha=0.325, lambda=0.1 \n+ Fold5: alpha=0.550, lambda=0.1 \n- Fold5: alpha=0.550, lambda=0.1 \n+ Fold5: alpha=0.775, lambda=0.1 \n- Fold5: alpha=0.775, lambda=0.1 \n+ Fold5: alpha=1.000, lambda=0.1 \n- Fold5: alpha=1.000, lambda=0.1 \n\n\nAggregating results\nSelecting tuning parameters\nFitting alpha = 0.775, lambda = 0.0253 on full training set\n\n\nCode\nimportance &lt;- varImp(econ_glmnet, scale = TRUE)\nplot(importance)\n\n\n\n\n\n\n\n\n\nCode\n# Predict\n# p &lt;- predict(econ_glmnet, testing_data)\n# postResample(pred = p, obs = testing_data$economics)\n\n\nThe optimal hyperparameters from the tuning grid were alpha = 0.1 (mostly ridge regression) and lambda = 0.00313. The variable importance plot is on a relative scale of 0 (unimportant) to 100 (most important) in terms of predictive power. Curiously, it is showing that the value added market indicator from the production dimension is a better predictor of economics than any economics indicator.\n\n\n3.1.4 Random Forest\nNow we can try a random forest, which is particularly good at handling non-linear relationships. Here we use the RMSE to determine the optimal combination of mtry (the number of variables selected at each node in the decision tree), the split rule, and the minimum node size.\n\n\nCode\nset.seed(42)\necon_rf &lt;- train(\n  economics ~ .,\n  data = training_data, \n  tuneLength = 7,\n  method = \"ranger\",\n  trControl = my_control,\n  importance = 'impurity'\n)\n\n\n+ Fold1: mtry= 2, min.node.size=5, splitrule=variance \n- Fold1: mtry= 2, min.node.size=5, splitrule=variance \n+ Fold1: mtry= 6, min.node.size=5, splitrule=variance \n- Fold1: mtry= 6, min.node.size=5, splitrule=variance \n+ Fold1: mtry=11, min.node.size=5, splitrule=variance \n- Fold1: mtry=11, min.node.size=5, splitrule=variance \n+ Fold1: mtry=16, min.node.size=5, splitrule=variance \n- Fold1: mtry=16, min.node.size=5, splitrule=variance \n+ Fold1: mtry=20, min.node.size=5, splitrule=variance \n- Fold1: mtry=20, min.node.size=5, splitrule=variance \n+ Fold1: mtry=25, min.node.size=5, splitrule=variance \n- Fold1: mtry=25, min.node.size=5, splitrule=variance \n+ Fold1: mtry=30, min.node.size=5, splitrule=variance \n- Fold1: mtry=30, min.node.size=5, splitrule=variance \n+ Fold1: mtry= 2, min.node.size=5, splitrule=extratrees \n- Fold1: mtry= 2, min.node.size=5, splitrule=extratrees \n+ Fold1: mtry= 6, min.node.size=5, splitrule=extratrees \n- Fold1: mtry= 6, min.node.size=5, splitrule=extratrees \n+ Fold1: mtry=11, min.node.size=5, splitrule=extratrees \n- Fold1: mtry=11, min.node.size=5, splitrule=extratrees \n+ Fold1: mtry=16, min.node.size=5, splitrule=extratrees \n- Fold1: mtry=16, min.node.size=5, splitrule=extratrees \n+ Fold1: mtry=20, min.node.size=5, splitrule=extratrees \n- Fold1: mtry=20, min.node.size=5, splitrule=extratrees \n+ Fold1: mtry=25, min.node.size=5, splitrule=extratrees \n- Fold1: mtry=25, min.node.size=5, splitrule=extratrees \n+ Fold1: mtry=30, min.node.size=5, splitrule=extratrees \n- Fold1: mtry=30, min.node.size=5, splitrule=extratrees \n+ Fold2: mtry= 2, min.node.size=5, splitrule=variance \n- Fold2: mtry= 2, min.node.size=5, splitrule=variance \n+ Fold2: mtry= 6, min.node.size=5, splitrule=variance \n- Fold2: mtry= 6, min.node.size=5, splitrule=variance \n+ Fold2: mtry=11, min.node.size=5, splitrule=variance \n- Fold2: mtry=11, min.node.size=5, splitrule=variance \n+ Fold2: mtry=16, min.node.size=5, splitrule=variance \n- Fold2: mtry=16, min.node.size=5, splitrule=variance \n+ Fold2: mtry=20, min.node.size=5, splitrule=variance \n- Fold2: mtry=20, min.node.size=5, splitrule=variance \n+ Fold2: mtry=25, min.node.size=5, splitrule=variance \n- Fold2: mtry=25, min.node.size=5, splitrule=variance \n+ Fold2: mtry=30, min.node.size=5, splitrule=variance \n- Fold2: mtry=30, min.node.size=5, splitrule=variance \n+ Fold2: mtry= 2, min.node.size=5, splitrule=extratrees \n- Fold2: mtry= 2, min.node.size=5, splitrule=extratrees \n+ Fold2: mtry= 6, min.node.size=5, splitrule=extratrees \n- Fold2: mtry= 6, min.node.size=5, splitrule=extratrees \n+ Fold2: mtry=11, min.node.size=5, splitrule=extratrees \n- Fold2: mtry=11, min.node.size=5, splitrule=extratrees \n+ Fold2: mtry=16, min.node.size=5, splitrule=extratrees \n- Fold2: mtry=16, min.node.size=5, splitrule=extratrees \n+ Fold2: mtry=20, min.node.size=5, splitrule=extratrees \n- Fold2: mtry=20, min.node.size=5, splitrule=extratrees \n+ Fold2: mtry=25, min.node.size=5, splitrule=extratrees \n- Fold2: mtry=25, min.node.size=5, splitrule=extratrees \n+ Fold2: mtry=30, min.node.size=5, splitrule=extratrees \n- Fold2: mtry=30, min.node.size=5, splitrule=extratrees \n+ Fold3: mtry= 2, min.node.size=5, splitrule=variance \n- Fold3: mtry= 2, min.node.size=5, splitrule=variance \n+ Fold3: mtry= 6, min.node.size=5, splitrule=variance \n- Fold3: mtry= 6, min.node.size=5, splitrule=variance \n+ Fold3: mtry=11, min.node.size=5, splitrule=variance \n- Fold3: mtry=11, min.node.size=5, splitrule=variance \n+ Fold3: mtry=16, min.node.size=5, splitrule=variance \n- Fold3: mtry=16, min.node.size=5, splitrule=variance \n+ Fold3: mtry=20, min.node.size=5, splitrule=variance \n- Fold3: mtry=20, min.node.size=5, splitrule=variance \n+ Fold3: mtry=25, min.node.size=5, splitrule=variance \n- Fold3: mtry=25, min.node.size=5, splitrule=variance \n+ Fold3: mtry=30, min.node.size=5, splitrule=variance \n- Fold3: mtry=30, min.node.size=5, splitrule=variance \n+ Fold3: mtry= 2, min.node.size=5, splitrule=extratrees \n- Fold3: mtry= 2, min.node.size=5, splitrule=extratrees \n+ Fold3: mtry= 6, min.node.size=5, splitrule=extratrees \n- Fold3: mtry= 6, min.node.size=5, splitrule=extratrees \n+ Fold3: mtry=11, min.node.size=5, splitrule=extratrees \n- Fold3: mtry=11, min.node.size=5, splitrule=extratrees \n+ Fold3: mtry=16, min.node.size=5, splitrule=extratrees \n- Fold3: mtry=16, min.node.size=5, splitrule=extratrees \n+ Fold3: mtry=20, min.node.size=5, splitrule=extratrees \n- Fold3: mtry=20, min.node.size=5, splitrule=extratrees \n+ Fold3: mtry=25, min.node.size=5, splitrule=extratrees \n- Fold3: mtry=25, min.node.size=5, splitrule=extratrees \n+ Fold3: mtry=30, min.node.size=5, splitrule=extratrees \n- Fold3: mtry=30, min.node.size=5, splitrule=extratrees \n+ Fold4: mtry= 2, min.node.size=5, splitrule=variance \n- Fold4: mtry= 2, min.node.size=5, splitrule=variance \n+ Fold4: mtry= 6, min.node.size=5, splitrule=variance \n- Fold4: mtry= 6, min.node.size=5, splitrule=variance \n+ Fold4: mtry=11, min.node.size=5, splitrule=variance \n- Fold4: mtry=11, min.node.size=5, splitrule=variance \n+ Fold4: mtry=16, min.node.size=5, splitrule=variance \n- Fold4: mtry=16, min.node.size=5, splitrule=variance \n+ Fold4: mtry=20, min.node.size=5, splitrule=variance \n- Fold4: mtry=20, min.node.size=5, splitrule=variance \n+ Fold4: mtry=25, min.node.size=5, splitrule=variance \n- Fold4: mtry=25, min.node.size=5, splitrule=variance \n+ Fold4: mtry=30, min.node.size=5, splitrule=variance \n- Fold4: mtry=30, min.node.size=5, splitrule=variance \n+ Fold4: mtry= 2, min.node.size=5, splitrule=extratrees \n- Fold4: mtry= 2, min.node.size=5, splitrule=extratrees \n+ Fold4: mtry= 6, min.node.size=5, splitrule=extratrees \n- Fold4: mtry= 6, min.node.size=5, splitrule=extratrees \n+ Fold4: mtry=11, min.node.size=5, splitrule=extratrees \n- Fold4: mtry=11, min.node.size=5, splitrule=extratrees \n+ Fold4: mtry=16, min.node.size=5, splitrule=extratrees \n- Fold4: mtry=16, min.node.size=5, splitrule=extratrees \n+ Fold4: mtry=20, min.node.size=5, splitrule=extratrees \n- Fold4: mtry=20, min.node.size=5, splitrule=extratrees \n+ Fold4: mtry=25, min.node.size=5, splitrule=extratrees \n- Fold4: mtry=25, min.node.size=5, splitrule=extratrees \n+ Fold4: mtry=30, min.node.size=5, splitrule=extratrees \n- Fold4: mtry=30, min.node.size=5, splitrule=extratrees \n+ Fold5: mtry= 2, min.node.size=5, splitrule=variance \n- Fold5: mtry= 2, min.node.size=5, splitrule=variance \n+ Fold5: mtry= 6, min.node.size=5, splitrule=variance \n- Fold5: mtry= 6, min.node.size=5, splitrule=variance \n+ Fold5: mtry=11, min.node.size=5, splitrule=variance \n- Fold5: mtry=11, min.node.size=5, splitrule=variance \n+ Fold5: mtry=16, min.node.size=5, splitrule=variance \n- Fold5: mtry=16, min.node.size=5, splitrule=variance \n+ Fold5: mtry=20, min.node.size=5, splitrule=variance \n- Fold5: mtry=20, min.node.size=5, splitrule=variance \n+ Fold5: mtry=25, min.node.size=5, splitrule=variance \n- Fold5: mtry=25, min.node.size=5, splitrule=variance \n+ Fold5: mtry=30, min.node.size=5, splitrule=variance \n- Fold5: mtry=30, min.node.size=5, splitrule=variance \n+ Fold5: mtry= 2, min.node.size=5, splitrule=extratrees \n- Fold5: mtry= 2, min.node.size=5, splitrule=extratrees \n+ Fold5: mtry= 6, min.node.size=5, splitrule=extratrees \n- Fold5: mtry= 6, min.node.size=5, splitrule=extratrees \n+ Fold5: mtry=11, min.node.size=5, splitrule=extratrees \n- Fold5: mtry=11, min.node.size=5, splitrule=extratrees \n+ Fold5: mtry=16, min.node.size=5, splitrule=extratrees \n- Fold5: mtry=16, min.node.size=5, splitrule=extratrees \n+ Fold5: mtry=20, min.node.size=5, splitrule=extratrees \n- Fold5: mtry=20, min.node.size=5, splitrule=extratrees \n+ Fold5: mtry=25, min.node.size=5, splitrule=extratrees \n- Fold5: mtry=25, min.node.size=5, splitrule=extratrees \n+ Fold5: mtry=30, min.node.size=5, splitrule=extratrees \n- Fold5: mtry=30, min.node.size=5, splitrule=extratrees \n\n\nAggregating results\nSelecting tuning parameters\nFitting mtry = 30, splitrule = extratrees, min.node.size = 5 on full training set\n\n\nCode\n# econ_rf\n# plot(econ_rf)\n\nimportance &lt;- varImp(econ_rf, scale = TRUE)\nplot(importance)\n\n\n\n\n\n\n\n\n\nCode\n# Predict\n# p &lt;- predict(model_mf, testing_data)\n# postResample(pred = p, obs = testing_data$rebl_tpm)\n\n\nThe random forest model is also picking out the value-added market indicator as the best predictor of economics dimension scores, followed closely by operations diversification, wealth and income distribution, and income stability.\nVery curious how value-added markets keep sticking out. The two metrics making up this indicator are both from NASS: the percentage of farms reporting value-added sales, and of those farms, the percentage of value-added sales out of total sales.",
    "crumbs": [
      "Secondary Data Rework",
      "Selection and Regression"
    ]
  },
  {
    "objectID": "pages/tables.html",
    "href": "pages/tables.html",
    "title": "Metrics Table",
    "section": "",
    "text": "This page contains a metadata table for exploring the sources of secondary data used throughout this project.\nUsing the table:\n\nClick column headers to sort\nGlobal search in the top right, or column search in each header\nChange page length and page through results at the bottom\nUse the download button to download a .csv file of the filtered table\nClick the arrow on the left of each row for details, including a URL to the data source.\n\n\n\nCode\npacman::p_load(\n  dplyr,\n  reactable,\n  stringr,\n  htmltools\n)\n\n# Load full metadata table\nmetadata_all &lt;- readRDS('data/sm_data.rds')[['metadata']]\n\n# Pick out variables to display\nmetadata &lt;- metadata_all %&gt;% \n  select(\n    metric,\n    'Variable Name' = variable_name,\n    definition,\n    dimension,\n    index,\n    indicator,\n    units,\n    'Year' = latest_year, # Renaming latest year as year, not including og year\n    source,\n    scope,\n    resolution,\n    url\n) %&gt;% \n  setNames(c(str_to_title(names(.))))\n\n###\nhtmltools::browsable(\n  tagList(\n    \n    tags$div(\n      style = \"display: flex; gap: 16px; margin-bottom: 20px; justify-content: center;\",\n      \n      tags$button(\n        class = \"btn btn-primary\",\n        style = \"display: flex; align-items: center; gap: 8px; padding: 8px 12px;\",\n        tagList(fontawesome::fa(\"download\"), \"Show/hide more columns\"),\n        onclick = \"Reactable.setHiddenColumns('metadata_table', prevColumns =&gt; {\n          return prevColumns.length === 0 ? ['Definition', 'Scope', 'Resolution', 'Url'] : []\n        })\"\n      ),\n      \n      tags$button(\n        class = \"btn btn-primary\",\n        style = \"display: flex; align-items: center; gap: 8px; padding: 8px 12px;\",\n        tagList(fontawesome::fa(\"download\"), \"Download as CSV\"),\n        onclick = \"Reactable.downloadDataCSV('metadata_table', 'sustainability_metadata.csv')\"\n      )\n    ),\n    \n    reactable(\n      metadata,\n      sortable = TRUE,\n      resizable = TRUE,\n      filterable = TRUE,\n      searchable = TRUE,\n      pagination = TRUE,\n      bordered = TRUE,\n      wrap = TRUE,\n      rownames = FALSE,\n      onClick = 'select',\n      striped = TRUE,\n      pageSizeOptions = c(5, 10, 25, 50, 100),\n      defaultPageSize = 5,\n      showPageSizeOptions = TRUE,\n      highlight = TRUE,\n      style = list(fontSize = \"14px\"),\n      compact = TRUE,\n      fullWidth = TRUE,\n      columns = list(\n        Metric = colDef(\n          minWidth = 200,\n          sticky = 'left'\n        ),\n        'Variable Name' = colDef(\n          minWidth = 150\n        ),\n        Definition = colDef(\n          minWidth = 250\n        ),\n        'Latest Year' = colDef(minWidth = 75),\n        Source = colDef(minWidth = 250),\n        Scope = colDef(show = FALSE),\n        Resolution = colDef(show = FALSE),\n        Url = colDef(\n          minWidth = 300,\n          show = FALSE\n        )\n      ),\n      defaultColDef = colDef(minWidth = 100),\n      elementId = \"metadata_table\",\n      details = function(index) {\n        div(\n          style = \"padding: 15px; border: 1px solid #ddd; margin: 10px 0;\n             background-color: #E0EEEE; border-radius: 10px; border-color: black;\n             box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\",\n          \n          tags$h4(\n            strong(\"Details\"), \n          ),\n          tags$p(\n            strong('Metric Name: '), \n            as.character(metadata_all[index, 'metric']),\n          ),\n          tags$p(\n            strong('Variable Name: '), \n            as.character(metadata_all[index, 'variable_name']),\n          ),\n          tags$p(\n            strong('Definition: '), \n            as.character(metadata_all[index, 'definition']),\n          ),\n          tags$p(\n            strong('Source: '), \n            as.character(metadata_all[index, 'source'])\n          ),\n          tags$p(\n            strong('Latest Year: '), \n            as.character(metadata_all[index, 'latest_year'])\n          ),\n          tags$p(\n            strong('All Years (cleaned, wrangled, and included): '), \n            as.character(metadata_all[index, 'year'])\n          ),\n          tags$p(\n            strong('Updates: '), \n            str_to_title(as.character(metadata_all[index, 'updates']))\n          ),\n          tags$p(\n            strong('URL: '), \n            tags$a(\n              href = as.character(metadata_all[index, 'url']),\n              target = '_blank',\n              as.character(metadata_all[index, 'url'])\n            )\n          )\n        )\n      }\n    )\n  )\n)\n\n\n\n\n\nShow/hide more columns\n\n\n\nDownload as CSV\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Secondary Data",
      "Tables"
    ]
  }
]