[
  {
    "objectID": "pages/tables.html",
    "href": "pages/tables.html",
    "title": "Metric Tables",
    "section": "",
    "text": "This page contains a couple of tables for exploring the secondary data metrics that have been collected. The first contains the metadata and links to sources. The second contains the actual data. This one is harder to navigate, as it will take a few filters to get results that are comprehensible. You can also just download a .csv from the table to work with.",
    "crumbs": [
      "Secondary Data",
      "Tables"
    ]
  },
  {
    "objectID": "pages/tables.html#metadata-table",
    "href": "pages/tables.html#metadata-table",
    "title": "Metric Tables",
    "section": "1 Metadata Table",
    "text": "1 Metadata Table\nUsing the table:\n\nClick column headers to sort\nGlobal search in the top right, or column search in each header\nChange page length and page through results at the bottom\nUse the download button to download a .csv file of the filtered table\nClick the arrow on the left of each row for details, including a URL to the data source.\n\n\n\nCode\npacman::p_load(\n  dplyr,\n  reactable,\n  stringr,\n  htmltools\n)\n\n# Load full metadata table\nmetadata_all &lt;- readRDS('data/sm_data.rds')[['metadata']]\n\n# Pick out variables to display\nmetadata &lt;- metadata_all %&gt;% \n  select(\n    metric,\n    'Variable Name' = variable_name,\n    definition,\n    dimension,\n    index,\n    indicator,\n    units,\n    'Year' = latest_year, # Renaming latest year as year, not including og year\n    source,\n    scope,\n    resolution,\n    url\n) %&gt;% \n  setNames(c(str_to_title(names(.))))\n\n###\nhtmltools::browsable(\n  tagList(\n    \n    tags$div(\n      style = \"display: flex; gap: 16px; margin-bottom: 20px; justify-content: center;\",\n      \n      tags$button(\n        class = \"btn btn-primary\",\n        style = \"display: flex; align-items: center; gap: 8px; padding: 8px 12px;\",\n        tagList(fontawesome::fa(\"download\"), \"Show/hide more columns\"),\n        onclick = \"Reactable.setHiddenColumns('metadata_table', prevColumns =&gt; {\n          return prevColumns.length === 0 ? ['Definition', 'Scope', 'Resolution', 'Url'] : []\n        })\"\n      ),\n      \n      tags$button(\n        class = \"btn btn-primary\",\n        style = \"display: flex; align-items: center; gap: 8px; padding: 8px 12px;\",\n        tagList(fontawesome::fa(\"download\"), \"Download as CSV\"),\n        onclick = \"Reactable.downloadDataCSV('metadata_table', 'sustainability_metadata.csv')\"\n      )\n    ),\n    \n    reactable(\n      metadata,\n      sortable = TRUE,\n      resizable = TRUE,\n      filterable = TRUE,\n      searchable = TRUE,\n      pagination = TRUE,\n      bordered = TRUE,\n      wrap = TRUE,\n      rownames = FALSE,\n      onClick = 'select',\n      striped = TRUE,\n      pageSizeOptions = c(5, 10, 25, 50, 100),\n      defaultPageSize = 5,\n      showPageSizeOptions = TRUE,\n      highlight = TRUE,\n      style = list(fontSize = \"14px\"),\n      compact = TRUE,\n      fullWidth = TRUE,\n      columns = list(\n        Metric = colDef(\n          minWidth = 200,\n          sticky = 'left'\n        ),\n        'Variable Name' = colDef(\n          minWidth = 150\n        ),\n        Definition = colDef(\n          minWidth = 250\n        ),\n        'Latest Year' = colDef(minWidth = 75),\n        Source = colDef(minWidth = 250),\n        Scope = colDef(show = FALSE),\n        Resolution = colDef(show = FALSE),\n        Url = colDef(\n          minWidth = 300,\n          show = FALSE\n        )\n      ),\n      defaultColDef = colDef(minWidth = 100),\n      elementId = \"metadata_table\",\n      details = function(index) {\n        div(\n          style = \"padding: 15px; border: 1px solid #ddd; margin: 10px 0;\n             background-color: #E0EEEE; border-radius: 10px; border-color: black;\n             box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\",\n          \n          tags$h4(\n            strong(\"Details\"), \n          ),\n          tags$p(\n            strong('Metric Name: '), \n            as.character(metadata_all[index, 'metric']),\n          ),\n          tags$p(\n            strong('Variable Name: '), \n            as.character(metadata_all[index, 'variable_name']),\n          ),\n          tags$p(\n            strong('Definition: '), \n            as.character(metadata_all[index, 'definition']),\n          ),\n          tags$p(\n            strong('Source: '), \n            as.character(metadata_all[index, 'source'])\n          ),\n          tags$p(\n            strong('Latest Year: '), \n            as.character(metadata_all[index, 'latest_year'])\n          ),\n          tags$p(\n            strong('All Years (cleaned, wrangled, and included): '), \n            as.character(metadata_all[index, 'year'])\n          ),\n          tags$p(\n            strong('Updates: '), \n            str_to_title(as.character(metadata_all[index, 'updates']))\n          ),\n          tags$p(\n            strong('URL: '), \n            tags$a(\n              href = as.character(metadata_all[index, 'url']),\n              target = '_blank',\n              as.character(metadata_all[index, 'url'])\n            )\n          )\n        )\n      }\n    )\n  )\n)\n\n\n\n\n\nShow/hide more columns\n\n\n\nDownload as CSV",
    "crumbs": [
      "Secondary Data",
      "Tables"
    ]
  },
  {
    "objectID": "pages/tables.html#data-table",
    "href": "pages/tables.html#data-table",
    "title": "Metric Tables",
    "section": "2 Data Table",
    "text": "2 Data Table\n\n\nCode\npacman::p_load(\n  dplyr,\n  reactable,\n  stringr,\n  htmltools\n)\n\n# Load metrics and metadata\nmetadata_all &lt;- readRDS('data/sm_data.rds')[['metadata']]\nmetrics &lt;- readRDS('data/sm_data.rds')[['metrics']]\nfips_key &lt;- readRDS('data/sm_data.rds')[['fips_key']]\n\n# Value formatting function based on units\nsource('dev/format_values.R')\n\n# Join with metadata and county fips codes\nmetrics &lt;- metrics %&gt;% \n  left_join(metadata_all, by = join_by('variable_name')) %&gt;% \n  left_join(fips_key, by = join_by('fips')) %&gt;% \n  mutate(county_name = ifelse(is.na(county_name), state_name, county_name)) %&gt;% \n  format_values() %&gt;% \n  select(\n    metric,\n    'Variable Name' = variable_name,\n    definition,\n    year = year.x,\n    Area = county_name,\n    units,\n    value\n  ) %&gt;% \n  setNames(c(str_to_title(names(.)))) %&gt;% \n  dplyr::filter(!is.na(Value))\n\n\n## Reactable table\nhtmltools::browsable(\n  tagList(\n    \n    tags$div(\n      style = \"display: flex; gap: 16px; margin-bottom: 20px; justify-content: center;\",\n      tags$button(\n        class = \"btn btn-primary\",\n        style = \"display: flex; align-items: center; gap: 8px; padding: 8px 12px;\",\n        tagList(fontawesome::fa(\"download\"), \"Download as CSV\"),\n        onclick = \"Reactable.downloadDataCSV('metrics_table', 'sustainability_metrics.csv')\"\n      )\n    ),\n    \n    reactable(\n      metrics,\n      sortable = TRUE,\n      resizable = TRUE,\n      filterable = TRUE,\n      searchable = TRUE,\n      pagination = TRUE,\n      bordered = TRUE,\n      wrap = TRUE,\n      rownames = FALSE,\n      onClick = 'select',\n      striped = TRUE,\n      pageSizeOptions = c(5, 10, 25, 50, 100),\n      defaultPageSize = 5,\n      showPageSizeOptions = TRUE,\n      highlight = TRUE,\n      style = list(fontSize = \"14px\"),\n      compact = TRUE,\n      fullWidth = TRUE,\n      columns = list(\n        Metric = colDef(\n          minWidth = 125,\n          sticky = 'left'\n        ),\n        'Variable Name' = colDef(\n          minWidth = 125\n        ),\n        Definition = colDef(\n          minWidth = 250\n        ),\n        Units = colDef(minWidth = 100),\n        'Year' = colDef(minWidth = 100)\n      ),\n      defaultColDef = colDef(minWidth = 100),\n      elementId = \"metrics_table\"\n    )\n  )\n)\n\n\n\n\n\nDownload as CSV",
    "crumbs": [
      "Secondary Data",
      "Tables"
    ]
  },
  {
    "objectID": "pages/refine_environment.html",
    "href": "pages/refine_environment.html",
    "title": "Environment Indicator Refinement",
    "section": "",
    "text": "This page describes the various iterations of indicator sets for the environment dimension. First, we observe the indicators included in the dimension at three points in time. The second section then shows the results of the survey following the indicator refinement meeting. A final set of indicators to incorporate into the next RFP is still in the works!",
    "crumbs": [
      "Framework",
      "Indicator Refinement",
      "Environment"
    ]
  },
  {
    "objectID": "pages/refine_environment.html#indicator-progression",
    "href": "pages/refine_environment.html#indicator-progression",
    "title": "Environment Indicator Refinement",
    "section": "1 Indicator Progression",
    "text": "1 Indicator Progression\n\n1.1 Wiltshire\nThis graph shows the original framework for the dimension as described in the Wiltshire et al.Â paper.\n\n\nCode\n# Use custom function in SMDO repo\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/wiltshire_tree.csv',\n  dimension_in = 'Environment',\n  y_limits = c(-1.5, 2.1),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.2 Matrix\nHere is the current set of indicators in the matrix, following the Sustainability Metrics workshop in July, 2024\n\n\nCode\n# Use custom function in SMDO repo\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/matrix_tree.csv',\n  dimension_in = 'Environment',\n  y_limits = c(-1.5, 2.1),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.3 Refinement Meeting\nFinally, the tentative set of indicators following the indicator refinement meeting on November 22nd, 2024\n\n\nCode\n# Use custom function in SMDO repo\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/env_meeting_tree.csv',\n  dimension_in = 'Environment',\n  y_limits = c(-1.5, 2.1),\n  palette = \"ggthemes::stata_s2color\"\n)",
    "crumbs": [
      "Framework",
      "Indicator Refinement",
      "Environment"
    ]
  },
  {
    "objectID": "pages/refine_environment.html#survey",
    "href": "pages/refine_environment.html#survey",
    "title": "Environment Indicator Refinement",
    "section": "2 Survey",
    "text": "2 Survey\nThese are the results from the follow-up survey to the economic indicator refinement meeting on November 15th. This feedback will be used to refine the framework for the next RFP.\n\n2.1 Indicators\n\n\nCode\nraw &lt;- read_csv('data/surveys/env_survey.csv')\n\ndat &lt;- raw %&gt;% \n  select(\n    ends_with('GROUP'),\n  ) %&gt;% \n  setNames(c(\n    'indi_must',\n    'indi_probably',\n    'indi_probably_not',\n    'indi_must_not',\n    'idx_must',\n    'idx_probably',\n    'idx_probably_not',\n    'idx_must_not'\n  )) %&gt;% \n  .[-c(1:2), ]\n\nto_df &lt;- function(x) {\n  x %&gt;%\n    str_replace_all('PFAS, PFOS', 'PFAS/PFOS') %&gt;% \n    str_replace_all('soil loss/', 'Soil loss/') %&gt;% \n    str_split(',') %&gt;% \n    unlist() %&gt;% \n    table() %&gt;% \n    as.data.frame() %&gt;% \n    setNames(c('indicator', 'freq')) %&gt;% \n    arrange(desc(freq))\n}\n\nindi_out &lt;- map(dat[1:4], to_df)\nidx_out &lt;- map(dat[5:8], to_df)\n\n# Add scores by multipliers\nmultipliers &lt;- c(3:0)\nind_tables &lt;- map2(indi_out, multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(ind_tables, ~ {\n  col_name &lt;- str_remove(.y, 'indi_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n}) %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not * 1e2 + must_not,\n    indicator = fct_reorder(indicator, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:must_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      \"must_not\",\n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(indicator) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n\n\n\nCode\nggplot(graph_table, aes(\n  y = reorder(indicator, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Indicator\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 20),\n    legend.position = 'top'\n    ) +\n  scale_fill_brewer(\n    palette = \"RdBu\", \n    direction = -1,\n    limits = c(\n      \"must\",\n      \"probably\", \n      \"probably_not\", \n      \"must_not\" \n    ),\n    labels = c(\n      \"Must Include\", \n      \"Probably Include\", \n      \"Probably Not Include\", \n      \"Must Not Include\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nWe are coding this so âMust Includeâ is worth 3 points, âProbably Includeâ is worth 2 points, âProbably Not Includeâ is worth 1 point, and âMust Not Includeâ is worth 0 points. Note that the last column is the sum of proportions of âMust Includeâ and âProbably Includeâ. You can sort, search, expand, or page through the table below.\n\n\n\n\n\n\n\n\n2.2 Indices\n\n\nCode\n# Add scores by multipliers\nmultipliers &lt;- c(3:0)\nidx_tables &lt;- map2(idx_out, multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(index = indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(idx_tables, ~ {\n  col_name &lt;- str_remove(.y, 'idx_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n}) %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not,\n    sort_key = ifelse(str_detect(index, 'Carbon'), 5e6, sort_key),\n    index = fct_reorder(index, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:must_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      \"must_not\",\n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(index) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n\ncolors &lt;- RColorBrewer::brewer.pal(4, 'RdBu')\n\nggplot(graph_table, aes(\n  y = reorder(index, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Index\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 20),\n    legend.position = 'top'\n    ) +\n  scale_fill_manual(\n    values = rev(colors),\n    limits = c(\n      \"must\",\n      \"probably\",\n      \"probably_not\",\n      'must_not'\n    ),\n    labels = c(\n      \"Must Include\",\n      \"Probably Include\",\n      \"Probably Not Include\",\n      \"Must Not Include\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nThe indices are going through the same treatment as indicators above - scored from 3 to 0. Note here that the âCarbon ($ GHGs/nutrients)â index seems to be missing a vote. So, it only has 12 points, but the proportion of votes for âMust Includeâ is 1.",
    "crumbs": [
      "Framework",
      "Indicator Refinement",
      "Environment"
    ]
  },
  {
    "objectID": "pages/refined_framework.html",
    "href": "pages/refined_framework.html",
    "title": "Refined Secondary Data Framework",
    "section": "",
    "text": "This page shows the partially refined framework as it stands after two dimension meetings: economics and environment. It also includes a selection of secondary data metrics to match those indicators. We have collected around 1500 metrics so far, although many of those are fluff. Effectively, we have around 250 meaningful metrics. Here, we are using a selection of 95 of them to make a preliminary framework for preliminary analyses. This is more than we have been planning for the refined framework, which will give us a chance to see how aggregate scores change with different combinations of metrics and under different methods of aggregation.\nThere are still a few gaps I would have liked to fill by now:\nAnother issue that is on our radar is that I have been trying to collect data at the county level whenever possible, giving us a sample of ~68 counties (depending on the year) with which to run PCA and exploratory analyses. Unfortunately, some crucial data is only available at the state level. We can aggregate back up to the state if need be, but then we are left with only 6 units of analysis. The longer-term solution I think will be to start around back again and collect all data at the state level across all states. This will let us use all the metrics at our disposal while still having a big enough sample size to do some empirical work.",
    "crumbs": [
      "Secondary Data Rework",
      "Framework"
    ]
  },
  {
    "objectID": "pages/refined_framework.html#partially-refined-framework",
    "href": "pages/refined_framework.html#partially-refined-framework",
    "title": "Refined Secondary Data Framework",
    "section": "1 Partially Refined Framework",
    "text": "1 Partially Refined Framework\nHere is the framework with a selection of secondary metrics, split into each dimension for ease of reading.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.1 Environment\nWe are missing any soils data in the environment dimension. We have a reasonable spread of metrics for carbon, ghg, and nutrients, although the stocks are only coming from the TreeMap 2016 dataset. Belowground carbon would be great to add here if I can find it. Fluxes are from a great EPA dataset, filtered down to agricultural emissions only. Here, I have aggregated by the type of emission, but we also have very specific breakdowns. Species and habitat is not great - I have more rare species and habitat layers, but I havenât sorted out how to make sense of them at this scale.\n\n\nCode\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'environment',\n  include_metrics = TRUE,\n  y_limits = c(-2, 3.25),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.2 Economics\nIt has definitely been easier to find economics data than other dimensions. Worth noting here is that the access to land indicator is not ideal. Iâm using value and farm size as a proxy for access. Use of crop insurance is also a proxy, since I could not find direct insurance claim data from FSA. So for now, we are just using the presidential and ag secretary declarations of disasters that allow for insurance claims.\n\n\nCode\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'economics',\n  include_metrics = TRUE,\n  y_limits = c(-1.5, 3.1),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.3 Production\nThe production dimension looks slim at first glance, but is better than it looks. Agricultural exports are a pretty robust dataset at the state level from ERS, although the import data only includes the values of the top five imports for each state - not ideal. Crop diversity is based on the Cropland Data Layer, a USDA NASS estimate of crop types, which I used to calculate Shannon diversity at the county level. The rest of the metrics come from NASS. Production is an area in which I feel better about using NASS data than usual.\n\n\nCode\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'production',\n  include_metrics = TRUE,\n  y_limits = c(-1.75, 3),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.4 Health\nThe Food Environment Atlas has lots of data on access and nutrition, which accounts for much of the food security data, along with NASS. The âfood security tbdâ index is just pulled out because this is already an index of food security that encompasses access and affordability. I will use this to explore how redundant they are. I also threw in a slew of metrics for physical health. The Factor and Outcome Z-Scores are already composite indices from the County Health Rankings, a great dataset. This is another area I want to explore with PCA to see how much unique variation these little metrics bring compared to a composite.\n\n\nCode\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'health',\n  include_metrics = TRUE,\n  y_limits = c(-1.9, 3),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.5 Social\nThe social dimension is admittedly slim, but it could have been a lot worse. The County Health Rankings dataset brings a few useful metrics here, like social associations and disconnected youth. Census participation and voter turnout are proxies for participatory governance in food systems - I canât imagine finding something much more specific than that at this point. I also plan on replacing mean producer age with a diversity index for age structure among producers.\n\n\nCode\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'social',\n  include_metrics = TRUE,\n  y_limits = c(-1.9, 3),\n  palette = \"ggthemes::stata_s2color\"\n)",
    "crumbs": [
      "Secondary Data Rework",
      "Framework"
    ]
  },
  {
    "objectID": "pages/refined_framework.html#metadata",
    "href": "pages/refined_framework.html#metadata",
    "title": "Refined Secondary Data Framework",
    "section": "2 Metadata",
    "text": "2 Metadata\nHere is the metadata for this refined set of secondary metrics.\n\n\nCode\npacman::p_load(\n  dplyr,\n  reactable,\n  stringr,\n  htmltools\n)\n\n# Load full metadata table\nmetadata &lt;- readRDS('data/sm_data.rds')[['metadata']]\n\n# Pull var names out of frame df, extract from all metadata\nvars &lt;- frame$variable_name\nmetadata &lt;- filter(metadata, variable_name %in% vars)\n\n# Pick out variables to display\nmeta &lt;- metadata %&gt;% \n  select(\n    metric,\n    'Variable Name' = variable_name,\n    definition,\n    dimension,\n    index,\n    indicator,\n    units,\n    'Year' = latest_year, # Renaming latest year as year, not including og year\n    source,\n    scope,\n    resolution,\n    url\n) %&gt;% \n  setNames(c(str_to_title(names(.))))\n\n###\nhtmltools::browsable(\n  tagList(\n    \n    tags$div(\n      style = \"display: flex; gap: 16px; margin-bottom: 20px; justify-content: center;\",\n      \n      tags$button(\n        class = \"btn btn-primary\",\n        style = \"display: flex; align-items: center; gap: 8px; padding: 8px 12px;\",\n        tagList(fontawesome::fa(\"download\"), \"Show/hide more columns\"),\n        onclick = \"Reactable.setHiddenColumns('metadata_table', prevColumns =&gt; {\n          return prevColumns.length === 0 ? ['Definition', 'Scope', 'Resolution', 'Url'] : []\n        })\"\n      ),\n      \n      tags$button(\n        class = \"btn btn-primary\",\n        style = \"display: flex; align-items: center; gap: 8px; padding: 8px 12px;\",\n        tagList(fontawesome::fa(\"download\"), \"Download as CSV\"),\n        onclick = \"Reactable.downloadDataCSV('metadata_table', 'sustainability_metadata.csv')\"\n      )\n    ),\n    \n    reactable(\n      meta,\n      sortable = TRUE,\n      resizable = TRUE,\n      filterable = TRUE,\n      searchable = TRUE,\n      pagination = TRUE,\n      bordered = TRUE,\n      wrap = TRUE,\n      rownames = FALSE,\n      onClick = 'select',\n      striped = TRUE,\n      pageSizeOptions = c(5, 10, 25, 50, 100),\n      defaultPageSize = 5,\n      showPageSizeOptions = TRUE,\n      highlight = TRUE,\n      style = list(fontSize = \"14px\"),\n      compact = TRUE,\n      fullWidth = TRUE,\n      columns = list(\n        Metric = colDef(\n          minWidth = 200,\n          sticky = 'left'\n        ),\n        'Variable Name' = colDef(\n          minWidth = 150\n        ),\n        Definition = colDef(\n          minWidth = 250\n        ),\n        'Latest Year' = colDef(minWidth = 75),\n        Source = colDef(minWidth = 250),\n        Scope = colDef(show = FALSE),\n        Resolution = colDef(show = FALSE),\n        Url = colDef(\n          minWidth = 300,\n          show = FALSE\n        )\n      ),\n      defaultColDef = colDef(minWidth = 100),\n      elementId = \"metadata_table\",\n      details = function(index) {\n        div(\n          style = \"padding: 15px; border: 1px solid #ddd; margin: 10px 0;\n             background-color: #E0EEEE; border-radius: 10px; border-color: black;\n             box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\",\n          \n          tags$h4(\n            strong(\"Details\"), \n          ),\n          tags$p(\n            strong('Metric Name: '), \n            as.character(metadata[index, 'metric']),\n          ),\n          tags$p(\n            strong('Variable Name: '), \n            as.character(metadata[index, 'variable_name']),\n          ),\n          tags$p(\n            strong('Definition: '), \n            as.character(metadata[index, 'definition']),\n          ),\n          tags$p(\n            strong('Source: '), \n            as.character(metadata[index, 'source'])\n          ),\n          tags$p(\n            strong('Latest Year: '), \n            as.character(metadata[index, 'latest_year'])\n          ),\n          tags$p(\n            strong('All Years (cleaned, wrangled, and included): '), \n            as.character(metadata[index, 'year'])\n          ),\n          tags$p(\n            strong('Updates: '), \n            str_to_title(as.character(metadata[index, 'updates']))\n          ),\n          tags$p(\n            strong('URL: '), \n            tags$a(\n              href = as.character(metadata[index, 'url']),\n              target = '_blank',\n              as.character(metadata[index, 'url'])\n            )\n          )\n        )\n      }\n    )\n  )\n)\n\n\n\n\n\nShow/hide more columns\n\n\n\nDownload as CSV",
    "crumbs": [
      "Secondary Data Rework",
      "Framework"
    ]
  },
  {
    "objectID": "pages/framework.html",
    "href": "pages/framework.html",
    "title": "Framework",
    "section": "",
    "text": "Just including some visualizations of the framework here for now. These include all the indicators currently in the matrix.",
    "crumbs": [
      "Framework",
      "Overview"
    ]
  },
  {
    "objectID": "pages/framework.html#radial-plot",
    "href": "pages/framework.html#radial-plot",
    "title": "Framework",
    "section": "1 Radial Plot",
    "text": "1 Radial Plot\n\n\nCode\n## Load packages\npacman::p_load(\n  ggraph,\n  igraph,\n  dplyr,\n  RColorBrewer,\n  viridisLite\n)\n\n\n## Load data and add an origin level\ndat &lt;- readRDS('data/trees/tree_dat.rds') %&gt;% \n  mutate(Framework = 'Sustainability') %&gt;% \n  select(Framework, Dimension:Indicator)\n\n\n## Make edges\n# include groupings by dimension, then combine them\nedges &lt;- list()\nedges$sm_dim &lt;- dat %&gt;% \n  select(Framework, Dimension) %&gt;% \n  unique() %&gt;% \n  rename(from = Framework, to = Dimension) %&gt;% \n  mutate(group = to)\nedges$dim_ind &lt;- dat %&gt;% \n  select(Dimension, Index) %&gt;% \n  unique() %&gt;% \n  rename(from = Dimension, to = Index) %&gt;% \n  mutate(group = from)\nedges$ind_ind &lt;- dat %&gt;% \n  select(Index, Indicator) %&gt;% \n  unique() %&gt;% \n  rename(from = Index, to = Indicator) %&gt;% \n  mutate(group = edges$dim_ind$from[match(.$from, edges$dim_ind$to)])\nedges &lt;- bind_rows(edges)\n\n\n## Make vertices\n# Each line is a single vertex (dimension, index, or indicator)\n# We are just giving them random values to control point size for now\nvertices = data.frame(\n  name = unique(c(as.character(edges$from), as.character(edges$to))) , \n  value = runif(nrow(edges) + 1)\n) \n\n# Add the dimension groupings to the vertices as well\nvertices$group = edges$group[match(vertices$name, edges$to)]\n\n# Calculate the angles to arrange indicator labels\nvertices$id = NA\nmyleaves = which(is.na(match(vertices$name, edges$from)))\nnleaves = length(myleaves)\nvertices$id[myleaves] = seq(1:nleaves)\nvertices$angle = 90 - 360 * vertices$id / nleaves\n\n# Calculate alignment of indicator labels\nvertices$hjust &lt;- ifelse(vertices$angle &lt; -90, 1, 0)\n\n# Flip label angles around 180 degrees if they are facing the wrong way\nvertices$angle &lt;- ifelse(vertices$angle &lt; -90, vertices$angle + 180, vertices$angle)\n\n\n## Create graph\n# Make ggraph object from edges and vertices\ngraph &lt;- graph_from_data_frame(edges, vertices = vertices)\n\n# Plot the graph\nggraph(graph, layout = 'dendrogram', circular = TRUE) +\n  \n  # Color edges by dimension\n  geom_edge_diagonal(aes(color = group), width = 0.5) +\n  \n  # Create text for indicators using angles, hjust, and dimension groupings\n  geom_node_text(\n    aes(\n      x = x * 1.04,\n      y = y * 1.04,\n      filter = leaf,\n      label = name,\n      angle = angle,\n      hjust = hjust,\n      colour = group\n    ),\n    size = 2.7,\n    alpha = 1\n  ) +\n  \n  # Make the points for indicators based on dimension groupings\n  # geom_node_point(aes(\n  #   filter = leaf,\n  #   x = x * 1.07,\n  #   y = y * 1.07,\n  #   colour = group,\n  #   size = value,\n  #   alpha = 0.2\n  # )) +\n  \n  # Label the dimensions within the graph\n  geom_node_label(\n    aes(label = ifelse(name == group, name, NA)),\n    label.padding = unit(0.2, \"lines\"),\n    label.r = unit(0.3, \"lines\"),\n    label.size = 0.1,\n    size = 3\n  ) +\n  \n  # Various formatting options\n  scale_colour_manual(values = brewer.pal(5, 'Set1')) +\n  scale_edge_color_manual(values = brewer.pal(5, 'Set1')) +\n  scale_size_continuous(range = c(0.1, 7)) +\n  theme_void() +\n  theme(\n    legend.position = \"none\",\n    plot.margin = unit(c(0, 0, 0, 0), \"cm\")\n  ) +\n  expand_limits(x = c(-2, 2), y = c(-2, 2))\n\n\n\n\n\nRadial dendrogram of Sustainability Metrics framework",
    "crumbs": [
      "Framework",
      "Overview"
    ]
  },
  {
    "objectID": "pages/framework.html#cladogram",
    "href": "pages/framework.html#cladogram",
    "title": "Framework",
    "section": "2 Cladogram",
    "text": "2 Cladogram\nA slightly more readable version of the diagram above.\n\n\nCode\npacman::p_load(\n  ggtree,\n  dplyr,\n  ape,\n  data.tree,\n  viridisLite,\n  stringr\n)\n\n## Load data and add an origin level\ndat &lt;- readRDS('data/trees/tree_dat.rds') %&gt;% \n  mutate(Framework = 'Sustainability') %&gt;% \n  select(Framework, Dimension:Indicator) %&gt;% \n  mutate(across(\n    everything(), \n    ~ str_trim(str_replace_all(., ';|%|/|\\\\.|\\\"|,|\\\\(|\\\\)', '_'))\n  ))\n\ndat$pathString &lt;- paste(\n  dat$Framework,\n  dat$Dimension,\n  dat$Index,\n  dat$Indicator,\n  sep = '/'\n)\ntree &lt;- as.Node(dat)\n\n# Convert the data.tree structure to Newick format\ntree_newick &lt;- ToNewick(tree)\n\n# Read the Newick tree into ape\nphylo_tree &lt;- read.tree(text = tree_newick)\n\n# Make all edge lengths 1\nphylo_tree$edge.length &lt;- rep(1, length(phylo_tree$edge.length))\n\n# Add a space to end of node labels so it isn't cut off\nphylo_tree$node.label &lt;- paste0(phylo_tree$node.label, ' ')\n\n# Plot it\nplot(\n  phylo_tree, \n  type = 'c',\n  cex = 0.75,\n  edge.width = 2,\n  show.tip.label = TRUE,\n  label.offset = 0,\n  no.margin = TRUE,\n  tip.color = 'black',\n  edge.color = viridis(181),\n  x.lim = c(-0.1, 5)\n)\n\nnodelabels(\n  phylo_tree$node.label,\n  cex = 0.8,\n  bg = 'white'\n)\n\n\n\n\n\nCladogram of Sustainability Metrics framework",
    "crumbs": [
      "Framework",
      "Overview"
    ]
  },
  {
    "objectID": "pages/data_environment_maps.html",
    "href": "pages/data_environment_maps.html",
    "title": "Environment: Maps",
    "section": "",
    "text": "Taking a quick tour through some of the spatial data here. Most of these metrics will also be available to peruse on the Shiny app, with the exception of those that are hard to aggregate, like biodiversity hotspots.",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Maps"
    ]
  },
  {
    "objectID": "pages/data_environment_maps.html#land-use",
    "href": "pages/data_environment_maps.html#land-use",
    "title": "Environment: Maps",
    "section": "1 Land Use",
    "text": "1 Land Use\nThis is the MRLC 30m LULC layer from 2023. Below the map, you can find a table with codes and descriptions. Sort or expand to see all the values.\n\n\nCode\nlulc &lt;- readRDS('data/sm_data.rds')[['mrlc_lulc_ne']]\ncounties &lt;- readRDS('data/sm_data.rds')[['ne_counties_2024']]\n\nlulc_map &lt;- lulc %&gt;% \n  mapview(\n    layer.name = 'LULC'\n  ) + \n  mapview(\n    counties,\n    alpha.regions = 0,\n    color = 'black',\n    col.regions = 'black',\n    lwd = 1.25,\n    layer.name = 'Counties'\n  )\n\nlulc_map@map %&gt;% \n  addFullscreenControl()\n\n\n\n\nLand use land cover map\n\n\n\n\nCode\npacman::p_load(\n  reactable,\n  dplyr,\n  stringr\n)\n\nmeta &lt;- readRDS('data/sm_data.rds')[['metadata']]\n\nlulc_codes &lt;- meta %&gt;% \n  filter(\n    str_detect(variable_name, '^lulc'),\n    str_detect(variable_name, 'NoData|Diversity', negate = TRUE)\n  ) %&gt;% \n  select(definition) %&gt;% \n  mutate(\n    Value = c(11, 21, 22, 23, 24, 31, 41, 42, 43, 52, 71, 81, 82, 90, 95),\n    Class = c(\n      'Water',\n      rep('Developed', 4),\n      'Barren',\n      rep('Forest', 3),\n      'Shrubland',\n      'Herbaceous',\n      rep('Planted/Cultivated', 2),\n      rep('Wetlands', 2)\n    ),\n    Type = c(\n      'Open Water',\n      'Developed, Open Space',\n      'Developed, Low Intensity',\n      'Developed, Medium Intensity',\n      'Developed, High Intensity',\n      'Barren Land (Rock / Sand / Clay)',\n      'Deciduous Forest',\n      'Evergreen Forest',\n      'Mixed Forest',\n      'Shrub / Scrub',\n      'Grassland / Herbaceous',\n      'Pasture / Hay',\n      'Cultivated Crops',\n      'Woody Wetlands',\n      'Emergent Herbaceous Wetlands'\n    )\n  ) %&gt;% \n  select(\n    Value,\n    Class,\n    Type,\n    Description = definition\n  )\n\nreactable(\n  lulc_codes,\n  sortable = TRUE,\n  resizable = TRUE,\n  filterable = TRUE,\n  searchable = FALSE,\n  pagination = TRUE,\n  bordered = TRUE,\n  wrap = TRUE,\n  rownames = FALSE,\n  striped = TRUE,\n  defaultPageSize = 5,\n  showPageSizeOptions = FALSE,\n  highlight = TRUE,\n  style = list(fontSize = \"14px\"),\n  compact = TRUE,\n  columns = list(\n    Value = colDef(minWidth = 40),\n    Class = colDef(minWidth = 100),\n    Type = colDef(minWidth = 100),\n    Description = colDef(minWidth = 500)\n  )\n)",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Maps"
    ]
  },
  {
    "objectID": "pages/data_environment_maps.html#land-use-diversity",
    "href": "pages/data_environment_maps.html#land-use-diversity",
    "title": "Environment: Maps",
    "section": "2 Land Use Diversity",
    "text": "2 Land Use Diversity\nLULC Diversity is derived from the MRLC LULC layer above. LULC types are aggregated by category (water, developed, barren, forest, shrubland, herbaceous, cultivated, wetlands) and Shannon diversity is calculated for each county. It makes for an interesting metric, but Iâm not sure it makes for a strong normative metric. If anyone has thoughts on what the ârightâ amount of LULC diversity is, Iâd love to hear from you.\n\n\nCode\ndiv &lt;- readRDS('data/sm_data.rds')[['lulc_div']]\n\ndiv_map &lt;- mapview(\n  div,\n  zcol = 'lulc_div',\n  label = 'county_name',\n  layer.name = 'LULC Diversity',\n  popup = popupTable(\n    div,\n    zcol = c(\n      'county_name',\n      'lulc_div'\n    ),\n    row.numbers = FALSE,\n    feature.id = FALSE\n  )\n)\n\ndiv_map@map %&gt;% \n  addFullscreenControl()\n\n\n\n\nLand Use Land Cover Diversity",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Maps"
    ]
  },
  {
    "objectID": "pages/data_environment_maps.html#rare-threatened-and-endangered-species",
    "href": "pages/data_environment_maps.html#rare-threatened-and-endangered-species",
    "title": "Environment: Maps",
    "section": "3 Rare, Threatened and Endangered Species",
    "text": "3 Rare, Threatened and Endangered Species\nThe Vermont ANR Biofinder has lots of great layers. Technical abstracts for these layers can be found here. Below is a map of rare, threatened, and endangered species polygons statewide. Note that these are lumped together into a multi-polygon to save some space, but the individual polygons didnât provide a whole lot useful information anyway.\n\n\nCode\npacman::p_load(\n  mapview,\n  leaflet.extras,\n  sf\n)\nrte &lt;- readRDS('data/sm_data.rds')[['biofinder_rte_spp']] %&gt;% \n  summarize()\nrte_map &lt;- mapview(\n  rte,\n  layer.name = 'RTE Species',\n  col.regions = '#154734'\n)\nrte_map@map %&gt;%\n  addFullscreenControl()\n\n\n\n\nMap of Rare, Threatened, and Endangered Species",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Maps"
    ]
  },
  {
    "objectID": "pages/data_environment_maps.html#uncommon-species",
    "href": "pages/data_environment_maps.html#uncommon-species",
    "title": "Environment: Maps",
    "section": "4 Uncommon Species",
    "text": "4 Uncommon Species\nBiofinder also lists uncommon species as those facing a âmoderate risk of extinction or extirpation due to restricted range, relatively few populations (often 80 or fewer), recent widespread declines, and other factors.â Same as above, these are lumped together into a single polygon for convenience.\n\n\nCode\nuncommon &lt;- readRDS('data/sm_data.rds')[['biofinder_uncommon_spp']] %&gt;% \n  summarize()\nuncommon_map &lt;- mapview(\n  uncommon,\n  layer.name = 'Uncommon Species',\n  col.regions = '#154734'\n)\nuncommon_map@map %&gt;%\n  addFullscreenControl()\n\n\n\n\nMap of Uncommon Species Distributions",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Maps"
    ]
  },
  {
    "objectID": "pages/data_environment_maps.html#forest-biomass",
    "href": "pages/data_environment_maps.html#forest-biomass",
    "title": "Environment: Maps",
    "section": "5 Forest Biomass",
    "text": "5 Forest Biomass\nThe TreeMap 2016 dataset is quite comprehensive national survey of forest health and diversity. Updates are infrequent, but this is the best layer Iâve found to address biomass. The raster is at 30m.\n\n\nCode\ntreemap &lt;- readRDS('data/sm_data.rds')[['treemap_biomass']]\ncounties &lt;- readRDS('data/sm_data.rds')[['ne_counties_2024']]\n\ntreemap_map &lt;- treemap %&gt;%\n  mapview(\n    layer.name = 'Biomass (tons per acre)',\n    col.regions = viridis(n = 256)\n  ) +\n  mapview(\n    counties,\n    alpha.regions = 0,\n    color = 'black',\n    col.regions = 'black',\n    lwd = 1.25,\n    layer.name = 'Counties'\n  )\ntreemap_map@map %&gt;%\n  addFullscreenControl()\n\n\n\n\nMap of aboveground forest biomass\n\n\nShown below is the mean live above-ground biomass aggregated by county so that it plays well with other metrics. Note that it is measured in tons per acre of forest, non-forest cells were removed from analysis. So, it is not showing density of forest, just biomass in existing forest. This is why the more urban counties still show a reasonable density of live biomass. There is lots more that can be pulled out of this dataset, like dead/down carbon, tree stocking, live canopy cover, height, volume, tree per acre, etc. More info can be found here.\n\n\nCode\npacman::p_load(\n  mapview,\n  dplyr,\n  sf,\n  viridisLite,\n  leaflet,\n  leafpop,\n  stars\n)\n\nbiomass &lt;- readRDS('data/sm_data.rds')[['mean_biomass']]\nbiomass_map &lt;- mapview(\n  biomass,\n  zcol = 'mean_biomass',\n  layer.name = 'Mean Live Above&lt;br&gt;Ground Biomass&lt;br&gt;(tons per acre)',\n  label = 'county_name',\n  popup = popupTable(\n    biomass,\n    zcol = c(\n      'county_name',\n      'mean_biomass'\n    ),\n    feature.id = FALSE,\n    row.numbers = FALSE\n  )\n)",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Maps"
    ]
  },
  {
    "objectID": "pages/data_economics.html",
    "href": "pages/data_economics.html",
    "title": "Economics",
    "section": "",
    "text": "Shown in the diagram below are a total of 45 indicators within the economics dimension. Indices are labeled within the diagram. 17 indicators are both included in the Wiltshire et al.Â framework as well as being studied by one or more teams (red), 9 are included in the Wiltshire et al.Â but not currently belong studied (green), while 19 were not in the original framework, but have been added by one or more teams (blue).\nThe points beside each indicator name represent the number of secondary data metrics that have been aggregated for each indicator. Sources include USDA NASS, BLS, ERS, Census Bureau, and others. The quality and appropriateness of these metrics vary widely - I do not mean to suggest that having more of them means an indicator is more accurately better represented. For more information on the data sources, head to the Tables page to see metadata.\nOne other point to note here is that I removed several dozen metrics from BLS wage labor data broken down by NAICS industry code so as not to inflate that indicator relative to the others.\n\n\nCode\n## Load packages\npacman::p_load(\n  ggraph,\n  igraph,\n  dplyr,\n  RColorBrewer,\n  viridisLite,\n  ggrepel,\n  stringr\n)\n\nconflicted::conflicts_prefer(\n  dplyr::as_data_frame(),\n  .quiet = TRUE\n)\n\n## Load data for tree and metrics\ndat &lt;- readRDS('data/trees/econ_tree.rds') %&gt;% \n  select(Dimension:Source)\nmetadata_all &lt;- readRDS('data/sm_data.rds')[['metadata']]\nmeta &lt;- metadata_all %&gt;% \n  filter(\n    dimension == 'economics'\n  )\n\n# Rename metadata so it fits into formatting of tree data\n# This is quite not ideal - Note to harmonize this properly later\nmeta &lt;- meta %&gt;% \n  mutate(\n    indicator = str_to_sentence(indicator),\n    indicator = case_when(\n      str_detect(indicator, '^Assets') ~ 'Balance sheet (assets and liabilities)',\n      str_detect(indicator, '^Business failure') ~ 'Business failure rate of food business',\n      str_detect(indicator, '^Direct') ~ '% direct-to-consumer sales',\n      str_detect(indicator, '^Job avail') ~ 'Availability of good-paying jobs in food systems',\n      str_detect(indicator, '^Local sales') ~ '% local sales',\n      str_detect(indicator, '^Operator salary') ~ 'Operator salary / wage',\n      str_detect(indicator, '^Total sales') ~ 'Total sales / revenue',\n      str_detect(indicator, '^Wealth/income') ~ 'Wealth / income distribution',\n      TRUE ~ indicator\n    )\n  ) \n\n# Join counts of secondary data metrics to original dataset\n# Remove the NAICS variables - there are so many of them, don't add much\ncounts &lt;- meta %&gt;% \n  filter(str_detect(variable_name, '^lq|lvl|Lvl|Naics', negate = TRUE)) %&gt;% \n  group_by(indicator) %&gt;% \n  dplyr::summarize(count = n())\n\n\n## Make edges\n# include groupings by dimension, then combine them\nedges &lt;- list()\nedges$dim_ind &lt;- dat %&gt;% \n  select(Dimension, Index) %&gt;% \n  unique() %&gt;% \n  dplyr::rename(from = Dimension, to = Index) %&gt;% \n  mutate(group = to)\nedges$ind_ind &lt;- dat %&gt;% \n  select(Index, Indicator) %&gt;% \n  unique() %&gt;% \n  dplyr::rename(from = Index, to = Indicator) %&gt;% \n  mutate(group = from)\nedges &lt;- bind_rows(edges)\n\n# Add column for use (will use in colors of text?)\nedges$group &lt;- c(rep(NA, 10), dat$Source)\n\n\n## Make vertices\n# Each line is a single vertex (dimension, index, or indicator)\n# We are just giving them random values to control point size for now\nvertices = data.frame(\n  name = unique(c(as.character(edges$from), as.character(edges$to)))\n) %&gt;% \n  left_join(counts, by = join_by(name == indicator)) %&gt;% \n  dplyr::rename('value' = count)\n\n# Add the dimension groupings to the vertices as well\nvertices$group = edges$group[match(vertices$name, edges$to)]\n\n# Calculate the angles to arrange indicator labels\nvertices$id = NA\nmyleaves = which(is.na(match(vertices$name, edges$from)))\nnleaves = length(myleaves)\nvertices$id[myleaves] = seq(1:nleaves)\nvertices$angle = 90 - 360 * vertices$id / nleaves\n\n# Calculate alignment of indicator labels\nvertices$hjust &lt;- ifelse(vertices$angle &lt; -90, 1, 0)\n\n# Flip label angles around 180 degrees if they are facing the wrong way\nvertices$angle &lt;- ifelse(vertices$angle &lt; -90, vertices$angle + 180, vertices$angle)\n\n\n## Create graph\n# Make ggraph object from edges and vertices\ngraph &lt;- graph_from_data_frame(edges, vertices = vertices)\n\n# Plot the graph\nggraph(graph, layout = 'dendrogram', circular = TRUE) +\n  \n  # Color edges by dimension\n  geom_edge_diagonal(color = 'black', width = 0.5) +\n  \n  # Create text for indicators using angles, hjust, and dimension groupings\n  geom_node_text(\n    aes(\n      x = x * 1.15,\n      y = y * 1.15,\n      filter = leaf,\n      label = name,\n      angle = angle,\n      hjust = hjust,\n      colour = group\n    ),\n    size = 3,\n    alpha = 1\n  ) +\n  \n  # Label indices within graph\n  geom_label_repel(\n    aes(\n      x = x,\n      y = y,\n      label = ifelse(name %in% unique(dat$Index), name, NA)\n    ),\n    label.padding = unit(0.15, \"lines\"),\n    label.r = unit(0.3, \"lines\"),\n    label.size = 0.05,\n    size = 2.25,\n    force = 0.1,    \n    force_pull = 1, \n    max.overlaps = 10 \n  ) +\n  \n  # Make the points for indicators based on secondary metric count\n  geom_node_point(\n    aes(\n      filter = leaf,\n      x = x * 1.07,\n      y = y * 1.07,\n      colour = group,\n      size = value\n    ),\n    alpha = 0.4\n  ) +\n  \n  # Various formatting options\n  scale_colour_manual(values = brewer.pal(3, 'Set1')) +\n  # scale_size_continuous(range = c(0.1, 7)) +\n  theme_void() +\n  theme(\n    plot.margin = unit(c(0, 0, 0, 0), \"cm\")\n  ) +\n  scale_colour_manual(\n    name = \"Indicator Use\",\n    values = brewer.pal(3, 'Set1'),\n    labels = c(\"Both\", \"Current Only\", \"Wiltshire Only\")\n  ) +\n  expand_limits(x = c(-2.5, 2.5), y = c(-2.5, 2.5))\n\n\n\n\n\nRadial dendrogram of Sustainability Metrics framework",
    "crumbs": [
      "Secondary Data",
      "Economics"
    ]
  },
  {
    "objectID": "pages/data_economics.html#dimension-overview",
    "href": "pages/data_economics.html#dimension-overview",
    "title": "Economics",
    "section": "",
    "text": "Shown in the diagram below are a total of 45 indicators within the economics dimension. Indices are labeled within the diagram. 17 indicators are both included in the Wiltshire et al.Â framework as well as being studied by one or more teams (red), 9 are included in the Wiltshire et al.Â but not currently belong studied (green), while 19 were not in the original framework, but have been added by one or more teams (blue).\nThe points beside each indicator name represent the number of secondary data metrics that have been aggregated for each indicator. Sources include USDA NASS, BLS, ERS, Census Bureau, and others. The quality and appropriateness of these metrics vary widely - I do not mean to suggest that having more of them means an indicator is more accurately better represented. For more information on the data sources, head to the Tables page to see metadata.\nOne other point to note here is that I removed several dozen metrics from BLS wage labor data broken down by NAICS industry code so as not to inflate that indicator relative to the others.\n\n\nCode\n## Load packages\npacman::p_load(\n  ggraph,\n  igraph,\n  dplyr,\n  RColorBrewer,\n  viridisLite,\n  ggrepel,\n  stringr\n)\n\nconflicted::conflicts_prefer(\n  dplyr::as_data_frame(),\n  .quiet = TRUE\n)\n\n## Load data for tree and metrics\ndat &lt;- readRDS('data/trees/econ_tree.rds') %&gt;% \n  select(Dimension:Source)\nmetadata_all &lt;- readRDS('data/sm_data.rds')[['metadata']]\nmeta &lt;- metadata_all %&gt;% \n  filter(\n    dimension == 'economics'\n  )\n\n# Rename metadata so it fits into formatting of tree data\n# This is quite not ideal - Note to harmonize this properly later\nmeta &lt;- meta %&gt;% \n  mutate(\n    indicator = str_to_sentence(indicator),\n    indicator = case_when(\n      str_detect(indicator, '^Assets') ~ 'Balance sheet (assets and liabilities)',\n      str_detect(indicator, '^Business failure') ~ 'Business failure rate of food business',\n      str_detect(indicator, '^Direct') ~ '% direct-to-consumer sales',\n      str_detect(indicator, '^Job avail') ~ 'Availability of good-paying jobs in food systems',\n      str_detect(indicator, '^Local sales') ~ '% local sales',\n      str_detect(indicator, '^Operator salary') ~ 'Operator salary / wage',\n      str_detect(indicator, '^Total sales') ~ 'Total sales / revenue',\n      str_detect(indicator, '^Wealth/income') ~ 'Wealth / income distribution',\n      TRUE ~ indicator\n    )\n  ) \n\n# Join counts of secondary data metrics to original dataset\n# Remove the NAICS variables - there are so many of them, don't add much\ncounts &lt;- meta %&gt;% \n  filter(str_detect(variable_name, '^lq|lvl|Lvl|Naics', negate = TRUE)) %&gt;% \n  group_by(indicator) %&gt;% \n  dplyr::summarize(count = n())\n\n\n## Make edges\n# include groupings by dimension, then combine them\nedges &lt;- list()\nedges$dim_ind &lt;- dat %&gt;% \n  select(Dimension, Index) %&gt;% \n  unique() %&gt;% \n  dplyr::rename(from = Dimension, to = Index) %&gt;% \n  mutate(group = to)\nedges$ind_ind &lt;- dat %&gt;% \n  select(Index, Indicator) %&gt;% \n  unique() %&gt;% \n  dplyr::rename(from = Index, to = Indicator) %&gt;% \n  mutate(group = from)\nedges &lt;- bind_rows(edges)\n\n# Add column for use (will use in colors of text?)\nedges$group &lt;- c(rep(NA, 10), dat$Source)\n\n\n## Make vertices\n# Each line is a single vertex (dimension, index, or indicator)\n# We are just giving them random values to control point size for now\nvertices = data.frame(\n  name = unique(c(as.character(edges$from), as.character(edges$to)))\n) %&gt;% \n  left_join(counts, by = join_by(name == indicator)) %&gt;% \n  dplyr::rename('value' = count)\n\n# Add the dimension groupings to the vertices as well\nvertices$group = edges$group[match(vertices$name, edges$to)]\n\n# Calculate the angles to arrange indicator labels\nvertices$id = NA\nmyleaves = which(is.na(match(vertices$name, edges$from)))\nnleaves = length(myleaves)\nvertices$id[myleaves] = seq(1:nleaves)\nvertices$angle = 90 - 360 * vertices$id / nleaves\n\n# Calculate alignment of indicator labels\nvertices$hjust &lt;- ifelse(vertices$angle &lt; -90, 1, 0)\n\n# Flip label angles around 180 degrees if they are facing the wrong way\nvertices$angle &lt;- ifelse(vertices$angle &lt; -90, vertices$angle + 180, vertices$angle)\n\n\n## Create graph\n# Make ggraph object from edges and vertices\ngraph &lt;- graph_from_data_frame(edges, vertices = vertices)\n\n# Plot the graph\nggraph(graph, layout = 'dendrogram', circular = TRUE) +\n  \n  # Color edges by dimension\n  geom_edge_diagonal(color = 'black', width = 0.5) +\n  \n  # Create text for indicators using angles, hjust, and dimension groupings\n  geom_node_text(\n    aes(\n      x = x * 1.15,\n      y = y * 1.15,\n      filter = leaf,\n      label = name,\n      angle = angle,\n      hjust = hjust,\n      colour = group\n    ),\n    size = 3,\n    alpha = 1\n  ) +\n  \n  # Label indices within graph\n  geom_label_repel(\n    aes(\n      x = x,\n      y = y,\n      label = ifelse(name %in% unique(dat$Index), name, NA)\n    ),\n    label.padding = unit(0.15, \"lines\"),\n    label.r = unit(0.3, \"lines\"),\n    label.size = 0.05,\n    size = 2.25,\n    force = 0.1,    \n    force_pull = 1, \n    max.overlaps = 10 \n  ) +\n  \n  # Make the points for indicators based on secondary metric count\n  geom_node_point(\n    aes(\n      filter = leaf,\n      x = x * 1.07,\n      y = y * 1.07,\n      colour = group,\n      size = value\n    ),\n    alpha = 0.4\n  ) +\n  \n  # Various formatting options\n  scale_colour_manual(values = brewer.pal(3, 'Set1')) +\n  # scale_size_continuous(range = c(0.1, 7)) +\n  theme_void() +\n  theme(\n    plot.margin = unit(c(0, 0, 0, 0), \"cm\")\n  ) +\n  scale_colour_manual(\n    name = \"Indicator Use\",\n    values = brewer.pal(3, 'Set1'),\n    labels = c(\"Both\", \"Current Only\", \"Wiltshire Only\")\n  ) +\n  expand_limits(x = c(-2.5, 2.5), y = c(-2.5, 2.5))\n\n\n\n\n\nRadial dendrogram of Sustainability Metrics framework",
    "crumbs": [
      "Secondary Data",
      "Economics"
    ]
  },
  {
    "objectID": "pages/data_economics.html#distributions",
    "href": "pages/data_economics.html#distributions",
    "title": "Economics",
    "section": "2 Distributions",
    "text": "2 Distributions\nWe are taking out the abundant but largely redundant BLS NAICS wage data variables to leave us with a more approachable set of 46 variables to explore here. First just show univariate distributions by county.\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  ggplot2,\n  rlang,\n  ggpubr,\n  tidyr\n)\n\nsource('dev/data_pipeline_functions.R')\nsource('dev/filter_fips.R')\nmetrics &lt;- readRDS('data/sm_data.rds')[['metrics']]\nmetadata &lt;- readRDS('data/sm_data.rds')[['metadata']]\n\n# Use metadata to get help filter by dimension\necon_meta &lt;- metadata %&gt;% \n  filter(dimension == 'economics')\n\n# Filter to economics dimension\necon_metrics &lt;- metrics %&gt;% \n  filter(variable_name %in% econ_meta$variable_name)\n\n# Filter to latest year and new (post-2024) counties\n# Also remove NAICS variables to leave us with an approachable number\n# And pivot wider so it is easier to get correlations\necon_metrics_latest &lt;- econ_metrics %&gt;%\n  filter_fips(scope = 'new') %&gt;% \n  get_latest_year() %&gt;% \n  filter(\n    str_detect(\n      variable_name, \n      'Naics|NAICS|^lq|^avgEmpLvl|expHiredLaborPercOpExp', \n      negate = TRUE\n    )\n  )\n\n# Pivot wider for easier correlations below\necon_metrics_latest &lt;- econ_metrics_latest %&gt;% \n  select(fips, variable_name, value) %&gt;% \n  unique() %&gt;% \n  mutate(variable_name = str_split_i(variable_name, '_', 1)) %&gt;% \n  pivot_wider(\n    names_from = 'variable_name',\n    values_from = 'value'\n  ) %&gt;% \n  unnest(!fips) %&gt;% \n  mutate(across(c(civLaborForce:last_col()), as.numeric))\n\n\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  ggplot2,\n  rlang,\n  ggpubr,\n  tidyr\n)\n\nplots &lt;- map(names(econ_metrics_latest)[-1], \\(var){\n  if (is.character(econ_metrics_latest[[var]])) {\n    econ_metrics_latest %&gt;% \n      ggplot(aes(x = !!sym(var))) + \n      geom_bar(\n        fill = 'lightblue',\n        color = 'royalblue',\n        alpha = 0.5\n      ) +\n      theme_classic() +\n      theme(plot.margin = unit(c(rep(0.5, 4)), 'cm'))\n  } else if (is.numeric(econ_metrics_latest[[var]])) {\n    econ_metrics_latest %&gt;% \n      ggplot(aes(x = !!sym(var))) + \n      geom_density(\n        fill = 'lightblue',\n        color = 'royalblue',\n        alpha = 0.5\n      ) +\n      theme_classic() +\n      theme(plot.margin = unit(c(rep(0.5, 4)), 'cm'))\n  } else {\n    return(NULL)\n  }\n}) \n\n# Arrange them in 4 columns\nggarrange(\n  plotlist = plots,\n  ncol = 4,\n  nrow = 12\n)\n\n\n\n\n\nDistributions of economic metrics at the county level.",
    "crumbs": [
      "Secondary Data",
      "Economics"
    ]
  },
  {
    "objectID": "pages/data_economics.html#correlation-heatmap",
    "href": "pages/data_economics.html#correlation-heatmap",
    "title": "Economics",
    "section": "3 Correlation Heatmap",
    "text": "3 Correlation Heatmap\nThrowing those same variables into a correlation matrix. Hover to see variable names, Pearson correlation, and p-values.\n\n\nCode\npacman::p_load(\n  dplyr,\n  tidyr,\n  tibble,\n  stringr,\n  purrr,\n  tidyr,\n  ggplot2,\n  plotly,\n  reshape,\n  Hmisc,\n  viridisLite\n)\n\n# Arrange variables in some halfway reasonable order\ncor_dat &lt;- econ_metrics_latest %&gt;% \n  select(\n    matches('Code_|metro'),\n    matches('employ|abor|Worker'),\n    matches('Sales'),\n    matches('Earn|Income'),\n    everything(),\n    -fips,\n    -matches('expHiredLaborPercOpExp') # This one didn't come through\n  )\n\n# Make a correlation matrix using all the selected variables\ncor &lt;- cor_dat %&gt;% \n  as.matrix() %&gt;% \n  rcorr()\n\n# Melt correlation values and rename columns\ncor_r &lt;- melt(cor$r) %&gt;% \n  setNames(c('var_1', 'var_2', 'value'))\n\n# Save p values\ncor_p &lt;- melt(cor$P)\np.value &lt;- cor_p$value\n\n# Make heatmap with custom text aesthetic for tooltip\nplot &lt;- cor_r %&gt;% \n  ggplot(aes(var_1, var_2, fill = value, text = paste0(\n    'Var 1: ', var_1, '\\n',\n    'Var 2: ', var_2, '\\n',\n    'Correlation: ', format(round(value, 3), nsmall = 3), '\\n',\n    'P-Value: ', format(round(p.value, 3), nsmall = 3)\n  ))) + \n  geom_tile() + \n  scale_fill_viridis_c() + \n  theme(axis.text.x = element_text(hjust = 1, angle = 45)) +\n  labs(\n    x = NULL,\n    y = NULL,\n    fill = 'Correlation'\n  )\n\n# Convert to interactive plotly figure with text tooltip\nggplotly(\n  plot, \n  tooltip = 'text',\n  width = 1000,\n  height = 800\n)\n\n\n\n\nInteractive Correlation Plot",
    "crumbs": [
      "Secondary Data",
      "Economics"
    ]
  },
  {
    "objectID": "pages/data_economics.html#pca",
    "href": "pages/data_economics.html#pca",
    "title": "Economics",
    "section": "4 PCA",
    "text": "4 PCA\nPCA is a popular tool in this area for exploring unique variation with many collinear variables. It is a way to reduce the dimensionality of the data into fewer, more interpretable principal components.\nIt also requires complete data, which we do not have. So we either have to run a probabililistic PCA or run imputations. Iâm using a random forest algorithm to impute data here as a first pass (Stekhoven and BÃ¼hlmann 2012). This really warrants a deeper dive into the type and severity of missingness though, and PPCA is likely the better option in the end.\n\n\nCode\npacman::p_load(\n  missForest\n)\n\n# Wrangle dataset. Need all numeric vars or factor vars. And can't be tibble\n# Also removing character vars - can't use these in PCA\ndat &lt;- econ_metrics_latest %&gt;%\n  select(where(is.numeric)) %&gt;%\n  as.data.frame()\n# get_str(dat)\n\n# Check missing variables\n# skimr::skim(dat)\n\n# Impute missing variables\nset.seed(42)\nmf_out &lt;- dat %&gt;%\n  missForest(\n    ntree = 200,\n    mtry = 10,\n    verbose = FALSE,\n    variablewise = FALSE\n  )\n\n# Save imputed dataset\nimp &lt;- mf_out$ximp\n\n# Print OOB\nmf_out$OOBerror\n\n\n    NRMSE \n0.1839393 \n\n\nOut of bag error is shown as normalized root mean square error. Now we can explore how many composite factors is appropriate for the data.\n\n\nCode\npacman::p_load(\n  psych\n)\nVSS(imp)\n\n\n\n\n\n\n\n\n\n\nVery Simple Structure\nCall: vss(x = x, n = n, rotate = rotate, diagonal = diagonal, fm = fm, \n    n.obs = n.obs, plot = plot, title = title, use = use, cor = cor)\nVSS complexity 1 achieves a maximimum of 0.68  with  2  factors\nVSS complexity 2 achieves a maximimum of 0.87  with  2  factors\n\nThe Velicer MAP achieves a minimum of 0.04  with  7  factors \nBIC achieves a minimum of  -489.17  with  5  factors\nSample Size adjusted BIC achieves a minimum of  1478.99  with  8  factors\n\nStatistics by number of factors \n  vss1 vss2   map dof chisq\n1 0.58 0.00 0.104 860  4406\n2 0.68 0.87 0.060 818  3618\n3 0.64 0.84 0.059 777  3298\n4 0.64 0.84 0.058 737  2920\n5 0.59 0.83 0.045 698  2552\n6 0.57 0.80 0.045 660  2437\n7 0.56 0.79 0.042 623  2280\n8 0.57 0.81 0.045 587  2186\n                                                                                                                                                                                                                                                                                                                   prob\n1 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n2 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n3 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016\n4 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001645637239849334630984942218212552234035683795809746\n5 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000690875312224248350895239312308149237651377916336059570312500000000000000000000000000000000000000000\n6 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020100945303999495240160344522450941440183669328689575195312500000000000000000000000000000000000000000000000\n7 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004548934418792562005100232891408040813985280692577362060546875000000000000000000000000000000000000000000000000000000000000\n8 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000223377243925002633411630581505846748768817633390426635742187500000000000000000000000000000000000000000000000000000000000000000\n  sqresid  fit RMSEA  BIC SABIC complex eChisq  SRMR eCRMS  eBIC\n1   110.5 0.58  0.23  659  3371     1.0   6540 0.215 0.221  2793\n2    34.9 0.87  0.21   54  2633     1.3   1485 0.103 0.108 -2079\n3    24.3 0.91  0.20  -87  2363     1.6    907 0.080 0.086 -2478\n4    18.3 0.93  0.19 -291  2032     1.7    610 0.066 0.073 -2601\n5    13.9 0.95  0.18 -489  1711     1.7    388 0.053 0.060 -2652\n6    11.6 0.96  0.19 -439  1642     1.9    305 0.047 0.054 -2570\n7     9.3 0.96  0.18 -434  1530     2.0    212 0.039 0.047 -2503\n8     8.0 0.97  0.19 -372  1479     2.0    170 0.035 0.043 -2388\n\n\nCode\nfa.parallel(imp)\n\n\n\n\n\n\n\n\n\nParallel analysis suggests that the number of factors =  5  and the number of components =  4 \n\n\nVSS gives a wide range from 2 to 8, MAP shows 7, parallel analysis shows 4. I tend to trust PA the most, so letâs go with 4.\n\n\nCode\n(pca_out &lt;- pca(imp, nfactors = 4))\n\n\nPrincipal Components Analysis\nCall: principal(r = r, nfactors = nfactors, residuals = residuals, \n    rotate = rotate, n.obs = n.obs, covar = covar, scores = scores, \n    missing = missing, impute = impute, oblique.scores = oblique.scores, \n    method = method, use = use, cor = cor, correct = 0.5, weight = NULL)\nStandardized loadings (pattern matrix) based upon correlation matrix\n                        RC1   RC2   RC3   RC4    h2    u2 com\ncivLaborForce          0.23  0.90  0.19  0.02 0.897 0.103 1.2\nemployed               0.23  0.90  0.19  0.02 0.895 0.105 1.2\nunemployed             0.24  0.91  0.16  0.10 0.914 0.086 1.2\nunemploymentRate       0.12  0.12 -0.02  0.78 0.637 0.363 1.1\nmedHhIncome            0.08  0.36  0.82 -0.02 0.808 0.192 1.4\nmedHhIncomePercState   0.06  0.09  0.81 -0.17 0.705 0.295 1.1\ngini                  -0.19  0.38 -0.03  0.47 0.402 0.598 2.3\nnCSA                   0.17  0.37 -0.09 -0.24 0.231 0.769 2.3\nnFarmersMarket         0.34  0.84  0.14 -0.05 0.837 0.163 1.4\nnOnFarmMarket          0.03  0.07  0.14 -0.09 0.034 0.966 2.4\nagTourSalesPerc       -0.14  0.24  0.35  0.64 0.606 0.394 2.0\nd2cSalesPerc          -0.23  0.42  0.52  0.10 0.507 0.493 2.4\nlocalSalesPerc        -0.16  0.40  0.55  0.06 0.486 0.514 2.1\nnAnaerDigestion        0.53 -0.38 -0.09  0.06 0.434 0.566 1.9\nnCompost               0.37  0.77  0.15  0.07 0.762 0.238 1.5\nnFoodHubs              0.18 -0.02  0.01 -0.10 0.043 0.957 1.7\nnMeatProcess           0.17  0.79  0.09  0.04 0.665 0.335 1.1\nmedianEarnMaleFood     0.00  0.23  0.12 -0.36 0.201 0.799 2.0\nmedianEarnFemaleFood  -0.19  0.12  0.17  0.65 0.497 0.503 1.4\nwomenEarnPercMaleFood -0.15 -0.15 -0.05  0.69 0.529 0.471 1.2\nmedianEarnMaleFarm    -0.16  0.05  0.33  0.27 0.211 0.789 2.5\nmedianEarnFemaleFarm  -0.13 -0.06  0.73  0.21 0.602 0.398 1.2\nwomenEarnPercMaleFarm -0.09  0.01  0.64  0.05 0.419 0.581 1.1\nnHiredWorkers          0.92  0.31  0.01 -0.09 0.951 0.049 1.2\nnOpsMigrantWorkers     0.79  0.09  0.05 -0.10 0.646 0.354 1.1\nnOpsHiredLabor         0.88  0.27 -0.09 -0.23 0.897 0.103 1.4\nnOpsHiredLaborExp      0.87  0.27 -0.09 -0.22 0.897 0.103 1.4\nnWorkersLE150          0.88  0.25 -0.04 -0.04 0.841 0.159 1.2\nnMigrantWorkers        0.61 -0.15 -0.13  0.11 0.425 0.575 1.3\nnOpsWorkersLE150       0.88  0.24 -0.11 -0.22 0.897 0.103 1.3\nnWorkersGE150          0.85  0.38  0.09 -0.10 0.887 0.113 1.4\nnOpsWorkersGE150       0.88  0.30  0.01 -0.18 0.906 0.094 1.3\nnOpsUnpaidWorkers      0.69  0.26 -0.22 -0.35 0.712 0.288 2.1\nnUnpaidWorkers         0.65  0.35 -0.23 -0.32 0.697 0.303 2.4\nexpHiredLabor          0.95  0.15  0.04 -0.06 0.931 0.069 1.1\nexpHiredLaborPF        0.62 -0.08  0.25  0.13 0.468 0.532 1.5\nexpPF                  0.75 -0.34  0.12  0.28 0.776 0.224 1.8\nfarmIncomePF           0.32  0.27  0.63  0.05 0.578 0.422 1.9\nacresOperated          0.69 -0.43 -0.35 -0.06 0.786 0.214 2.2\nacresPF                0.32 -0.61 -0.51  0.09 0.740 0.260 2.5\nmedianAcresPF          0.22 -0.55 -0.60 -0.03 0.709 0.291 2.3\nlandValPF              0.21 -0.18  0.56 -0.01 0.392 0.608 1.5\nlandValPerAcre        -0.13  0.48  0.48  0.21 0.521 0.479 2.5\n\n                        RC1  RC2  RC3  RC4\nSS loadings           11.01 7.59 5.25 3.14\nProportion Var         0.26 0.18 0.12 0.07\nCumulative Var         0.26 0.43 0.55 0.63\nProportion Explained   0.41 0.28 0.19 0.12\nCumulative Proportion  0.41 0.69 0.88 1.00\n\nMean item complexity =  1.7\nTest of the hypothesis that 4 components are sufficient.\n\nThe root mean square of the residuals (RMSR) is  0.07 \n with the empirical chi square  678.89  with prob &lt;  0.94 \n\nFit based upon off diagonal values = 0.96\n\n\nCode\nplot(pca_out$values)\nabline(h = 1)\n\n\n\n\n\n\n\n\n\nFrom the scree plot and eigenvalues it looks like the first three components bear lots of unique variance, but after that there is no clear elbow where a qualitative decision can be made to choose a certain number of components. The Kaiser-Guttman rule suggests keeping any compents with an eigenvalue &gt; 1 (at the horizontal line), but we can see here that this is a rather dubious distinction.\nIf we look at the output from the PCA call, we can see how closely each variable (row) correlates with each component (columns 1-4). The variables most associated with Component #1 are the farm labor variables - numbers of workers, labor expenses, etc. They also tend to be raw figures, and probably have more to do with population than anything else. Component #2 is made up mostly of generic employment figures - total civilian labor force, total employed, total unemployed. These are not specific to food systems. Component #3 has a curious collection of median earnings variables and âper farmâ variables like acres per farm, income per farm, and local and direct-to-consumer sales. Component #4 does not represent much unique variance, and loooks like a grab bag of variables.\nA couple of early takeaways here are that the raw figures that are tied to population probably shouldnât be mixed with other variables like proportions. We could try normalizing all the variables so that raw variables are not disproportionately weighted. But it might make more sense to avoid raw counts and dollar amounts entirely.",
    "crumbs": [
      "Secondary Data",
      "Economics"
    ]
  },
  {
    "objectID": "pages/data_environment_analysis.html",
    "href": "pages/data_environment_analysis.html",
    "title": "Environment: Analysis",
    "section": "",
    "text": "This section will serve as a first pass at using some methods in the literature to aggregate metrics. I should say at the start that we have a pretty narrow selection of metrics to work with so far, which do not do a great job at capturing the breadth of the dimension. Iâm also working with just the county-level data here. This provides some opportunities to use data-driven analyses like PCA, but it is worth noting that these will not get us to the holistic, system-wide measurements of sustainability we are after without including some normative judgments as to how to combine geographic areas as well as our five dimensions. So, letâs just go through the motions here, see how the process unfolds, and note anything worth digging into more down the road.",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Analysis"
    ]
  },
  {
    "objectID": "pages/data_environment_analysis.html#imputation",
    "href": "pages/data_environment_analysis.html#imputation",
    "title": "Environment: Analysis",
    "section": "1 Imputation",
    "text": "1 Imputation\nPCA requires complete data, so we either have to impute, delete, or use PPCA. Iâm choosing to impute with missing forest here as it is pretty good at handling MAR and non-linear data, but PPCA is certainly worth exploring.\n\n\nCode\npacman::p_load(\n  missForest,\n  tibble\n)\nsource('dev/filter_fips.R')\nenv_county &lt;- readRDS('data/temp/env_county.rds')\n\n# Wrangle dataset. Need all numeric vars or factor vars. And can't be tibble\n# Also removing character vars - can't use these in PCA\n# Using old Connecticut counties - some lulc data is missing for them though\ndat &lt;- env_county %&gt;%\n  filter_fips('old') %&gt;%\n  select(fips, where(is.numeric)) %&gt;%\n  column_to_rownames('fips') %&gt;%\n  as.data.frame()\n# get_str(dat)\n# skimr::skim(dat)\n\n# Remove variables with most missing data - too much to impute.\n# Also remove the proportional LULC values - keeping diversity though\ndat &lt;- dat %&gt;%\n  select(-matches('consIncome'), -matches('^lulcProp'))\n\n# Impute missing variables\nset.seed(42)\nmf_out &lt;- dat %&gt;%\n  missForest(\n    ntree = 200,\n    mtry = 10,\n    verbose = FALSE,\n    variablewise = FALSE\n  )\n\n# Save imputed dataset\nimp &lt;- mf_out$ximp\n\n# Print OOB\nmf_out$OOBerror\n\n\n     NRMSE \n0.00142119",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Analysis"
    ]
  },
  {
    "objectID": "pages/data_environment_analysis.html#standardization",
    "href": "pages/data_environment_analysis.html#standardization",
    "title": "Environment: Analysis",
    "section": "2 Standardization",
    "text": "2 Standardization\nCentering and scaling to give every variable a mean of 0 and SD of 1.\n\n\nCode\ndat &lt;- map_dfc(imp, ~ scale(.x, center = TRUE, scale = TRUE))\n\n\nNow that we have standardized variables, we have to make normative decisions about what constitutes a good or bad value. This will certainly be a collaborative process where we seek input from teams to come to some kind of consensus once we have primary data. But until then, Iâm going to make some heroic assumptions that LULC diversity is good, above ground forest biomass is good, conservation practices and easements are good, and fertilizer expenses are bad. Open to thoughts here as always.\nWith that, we can recode our normalized variables accordingly.\n\n\nCode\nnormed &lt;- dat %&gt;%\n  mutate(across(c(matches('^fert')), ~ -.x))",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Analysis"
    ]
  },
  {
    "objectID": "pages/data_environment_analysis.html#component-extraction",
    "href": "pages/data_environment_analysis.html#component-extraction",
    "title": "Environment: Analysis",
    "section": "3 Component Extraction",
    "text": "3 Component Extraction\nDetermine the number of components to extract using a few tools: very simple structure (VSS), Velicerâs minimum average partial (MAP) test, parallel analysis, and a scree plot.\n\n\nCode\npacman::p_load(\n  psych\n)\nVSS(normed)\n\n\n\n\n\n\n\n\n\n\nVery Simple Structure\nCall: vss(x = x, n = n, rotate = rotate, diagonal = diagonal, fm = fm, \n    n.obs = n.obs, plot = plot, title = title, use = use, cor = cor)\nVSS complexity 1 achieves a maximimum of 0.79  with  1  factors\nVSS complexity 2 achieves a maximimum of 0.94  with  2  factors\n\nThe Velicer MAP achieves a minimum of 0.06  with  8  factors \nBIC achieves a minimum of  -212.51  with  8  factors\nSample Size adjusted BIC achieves a minimum of  190.51  with  8  factors\n\nStatistics by number of factors \n  vss1 vss2   map dof chisq\n1 0.79 0.00 0.157 275  1633\n2 0.76 0.94 0.081 251  1083\n3 0.73 0.94 0.077 228   897\n4 0.60 0.88 0.081 206   722\n5 0.55 0.85 0.063 185   597\n6 0.53 0.85 0.063 165   547\n7 0.52 0.82 0.062 146   429\n8 0.52 0.79 0.060 128   326\n                                                                                                                                                                                                prob\n1 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000026\n2 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000098945650053411355068916366306552845344413071870803833007812500000000000000000000000000000\n3 0.000000000000000000000000000000000000000000000000000000000000000000000000000000039129475697953917264458600921983588705188594758510589599609375000000000000000000000000000000000000000000000000000\n4 0.000000000000000000000000000000000000000000000000000000000199731474755364932938822564167935524892527610063552856445312500000000000000000000000000000000000000000000000000000000000000000000000000\n5 0.000000000000000000000000000000000000000000007276720351213096420976006450942463743558619171380996704101562500000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n6 0.000000000000000000000000000000000000000001728048955548177157337183529328683562198420986533164978027343750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n7 0.000000000000000000000000000014378040859718844080537836216393543509184382855892181396484375000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n8 0.000000000000000000340581713196040165598371673993938202329445630311965942382812500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  sqresid  fit RMSEA  BIC SABIC complex eChisq  SRMR eCRMS eBIC\n1   34.26 0.79  0.27  476  1342     1.0 1687.8 0.205 0.214  531\n2    9.70 0.94  0.22   28   818     1.2  348.0 0.093 0.102 -707\n3    5.48 0.97  0.21  -61   657     1.4  170.5 0.065 0.075 -788\n4    3.90 0.98  0.19 -145   504     1.7  105.4 0.051 0.062 -761\n5    2.57 0.98  0.18 -181   402     1.8   55.9 0.037 0.047 -722\n6    1.42 0.99  0.19 -147   373     1.8   24.9 0.025 0.034 -669\n7    0.89 0.99  0.17 -185   274     1.8   12.9 0.018 0.026 -601\n8    0.59 1.00  0.15 -213   191     1.8    6.6 0.013 0.020 -532\n\n\nCode\nfa.parallel(normed)\n\n\n\n\n\n\n\n\n\nParallel analysis suggests that the number of factors =  3  and the number of components =  3 \n\n\nCode\npca_out &lt;- pca(normed, nfactors = 3, rotate = 'varimax')\nplot(pca_out$values)\nabline(h = 1)\n\n\n\n\n\n\n\n\n\nThis scree plot shows the eigenvalues (unit variance explained) of each principal component (y-axis) against each component (x-axis). The first few components explain lots of variance, but there is a decent elbow around the fourth component.\nVSS suggests 1 or 2, MAP suggests 8, parallel analysis shows 3. Iâm going with 3 here, which will be explained further below.",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Analysis"
    ]
  },
  {
    "objectID": "pages/data_environment_analysis.html#principal-components-analysis",
    "href": "pages/data_environment_analysis.html#principal-components-analysis",
    "title": "Environment: Analysis",
    "section": "4 Principal Components Analysis",
    "text": "4 Principal Components Analysis\nNow we letâs look run the PCA.\n\n\nCode\n(pca_out &lt;- pca(normed, nfactors = 3, rotate = 'varimax'))\n\n\nPrincipal Components Analysis\nCall: principal(r = r, nfactors = nfactors, residuals = residuals, \n    rotate = rotate, n.obs = n.obs, covar = covar, scores = scores, \n    missing = missing, impute = impute, oblique.scores = oblique.scores, \n    method = method, use = use, cor = cor, correct = 0.5, weight = NULL)\nStandardized loadings (pattern matrix) based upon correlation matrix\n                            RC1   RC2   RC3   h2    u2 com\nlulcDiversity              0.03  0.58 -0.13 0.35 0.647 1.1\nmeanAboveGrndForBiomass   -0.36  0.54  0.01 0.42 0.580 1.7\nalleyCropSilvapastureNOps  0.18  0.64  0.53 0.72 0.276 2.1\nconsEasementAcres          0.06  0.39  0.83 0.84 0.161 1.4\nconsEasementAcresPF        0.26 -0.08  0.78 0.68 0.317 1.2\nconsEasementNOps          -0.15  0.79  0.35 0.76 0.235 1.5\nconsTillExclNoTillAcres    0.94  0.14  0.10 0.92 0.081 1.1\nconsTillExclNoTillAcresPF  0.92 -0.03  0.12 0.85 0.146 1.0\nconsTillExclNoTillNOps     0.34  0.82  0.16 0.82 0.181 1.4\nconsTillNoTillAcres        0.70  0.29  0.36 0.71 0.288 1.9\nconsTillNoTillAcresPF      0.64 -0.05  0.33 0.52 0.478 1.5\nconsTillNoTillNOps         0.17  0.89  0.13 0.83 0.168 1.1\ncoverCropExclCrpAcres      0.91  0.20 -0.04 0.86 0.139 1.1\ncoverCropExclCrpAcresPF    0.89  0.00  0.13 0.81 0.190 1.0\ncoverCropExclCrpNOps       0.30  0.87  0.03 0.84 0.158 1.2\ndrainedDitchesAcres        0.92  0.17  0.04 0.89 0.112 1.1\ndrainedDitchesAcresPF      0.94  0.06  0.06 0.88 0.116 1.0\ndrainedDitchesNOps         0.47  0.51  0.15 0.51 0.492 2.2\ndrainedTileAcres           0.69  0.06  0.37 0.61 0.392 1.5\ndrainedTileAcresPF         0.68 -0.08  0.40 0.63 0.366 1.6\ndrainedTileNOps            0.71  0.39  0.32 0.75 0.249 2.0\nprecisionAgNOps            0.69  0.53 -0.14 0.77 0.226 2.0\nrotateIntenseGrazeNOps     0.19  0.71  0.47 0.77 0.228 1.9\nfertExpenseTotal          -0.86 -0.31  0.18 0.87 0.131 1.4\nfertExpenseOpsWithExp     -0.12 -0.93  0.08 0.88 0.121 1.0\n\n                       RC1  RC2  RC3\nSS loadings           9.38 6.39 2.75\nProportion Var        0.38 0.26 0.11\nCumulative Var        0.38 0.63 0.74\nProportion Explained  0.51 0.34 0.15\nCumulative Proportion 0.51 0.85 1.00\n\nMean item complexity =  1.4\nTest of the hypothesis that 3 components are sufficient.\n\nThe root mean square of the residuals (RMSR) is  0.07 \n with the empirical chi square  192.26  with prob &lt;  0.96 \n\nFit based upon off diagonal values = 0.98\n\n\nRecommendations for creating composite indices are to extract components that each have eigenvalues &gt; 1, explained variance &gt; 0.10, and such that the proportion of explained variance for the total set is &gt; 0.60 (Nicoletti 2000; OECD 2008).\nOur total cumulative variance is explained is 0.74, and our component that explains the least variance is RC4 with 0.11. Note that extracting four or more components here gives us a component with less than 0.10, so this is why we are sticking to three. The first component (RC1) explains 38% of the variance in the data. The second component is respectable at 0.26, while the third is barely above the threshold at 0.11.\nLooking at the metrics, we can see that the first component loads mostly onto the conservation practices, no-till acres, cover cropping, drainage, and total fertilizer expenses. The second component leads onto mean above-ground biomass (although there is cross-loading with the first component), operations with silvapasture, operations with easements, rotational grazing operations, and operations with fertilizer expenses. This seems to be catching more of the population-related metrics. The last component only loads onto a few metrics: easement acres, easement acres per farm, and silvapasture operations (which has some heavy cross-loading).",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Analysis"
    ]
  },
  {
    "objectID": "pages/data_environment_analysis.html#aggregation",
    "href": "pages/data_environment_analysis.html#aggregation",
    "title": "Environment: Analysis",
    "section": "5 Aggregation",
    "text": "5 Aggregation\nHere, we follow Nicoletti and calculate the normalized sum of square factor loadings, which represent the proportion of total unit variance of the metrics that is explained by the component.\n\n\nCode\n## Get metric weights following Nicoletti 2000\n# Pull out metric loadings\nloadings &lt;- pca_out$weights %&gt;%\n  as.data.frame()\n\n# For each set of loadings, get squares, and then normalized proportions\nsq_loadings &lt;- map(loadings, ~ .x^2)\nmetric_weights &lt;- map(sq_loadings, ~ .x / sum(.x))\nhead(as.data.frame(metric_weights))\n\n\n           RC1          RC2          RC3\n1 0.0005619064 0.0752164042 0.0258282884\n2 0.0345317828 0.0690265012 0.0003647945\n3 0.0101384970 0.0285992549 0.0687543999\n4 0.0307134305 0.0001543834 0.2569873792\n5 0.0022917387 0.0388343663 0.2597289090\n6 0.0390099137 0.0853674939 0.0244854925\n\n\nNow we can use these to weight metrics and aggregate them into a component score for each county.\n\n\nCode\n# Component scores for each component across each county\ncomponent_scores &lt;- map(metric_weights, \\(x) {\n  as.matrix(normed) %*% x\n}) %&gt;%\n  as.data.frame()\nhead(component_scores)\n\n\n          RC1         RC2         RC3\n1 -0.14329669 -0.19176506 -0.40741468\n2 -0.14822774  0.07187198 -0.17694498\n3 -0.25276927 -0.44271379 -0.29656260\n4 -0.34052455 -0.21438065 -0.04465999\n5  0.06911446  0.16985119 -0.20467504\n6 -0.42230232 -0.58407610 -0.59714488\n\n\nAn alternative method here is regression scores, which are native to PCA. Iâll calculate these as well to compare to the component scores above.\n\n\nCode\n# Get regression scores from pca output\nregression_scores &lt;- as.data.frame(pca_out$scores)\nhead(regression_scores)\n\n\n          RC1         RC2        RC3\n1  0.07619635 -0.47060359 -0.4575708\n2 -0.27948884  0.62365888 -0.5172847\n3 -0.06844224 -0.82645311  0.2309383\n4 -0.41986627 -0.08548724 -0.1010532\n5  0.36215173  0.19477898 -0.4475573\n6 -0.31849605 -0.90986747 -0.3048266\n\n\nRunning a correlation to see how similar they are:\n\n\nCode\ncoefs &lt;- map2_dbl(component_scores, regression_scores, \\(x, y) cor(x, y)) %&gt;%\n  round(3)\ncat(paste0(\n  'Pearson Correlation Coefficients:\\n',\n  'RC1: ', coefs[1], '\\n',\n  'RC2: ', coefs[2], '\\n',\n  'RC3: ', coefs[3]\n))\n\n\nPearson Correlation Coefficients:\nRC1: 0.925\nRC2: 0.83\nRC3: 0.855\n\n\nIt looks like they are reasonably similar, although RC2 and RC3 have substantially lower correlation coefficients. It will be worth noting this and coming back to explore the differences at some point.\nFor now, letâs keep following Nicoletti and aggregate the component scores into a single variable.\n\n\nCode\nsum_sq_loadings &lt;- map_dbl(sq_loadings, ~ sum(.x))\n(factor_weights &lt;- map_dbl(sum_sq_loadings, ~ .x / (sum(sum_sq_loadings))))\n\n\n      RC1       RC2       RC3 \n0.1681632 0.2456354 0.5862013 \n\n\nCurious that the component that accounted for the most variance is weighted the lowest. Worth doing a dive here at some point and figuring out why that is.\nWe will use these to weight each component to combine them.\n\n\nCode\ndimension_scores &lt;- component_scores %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    dimension_score = sum(RC1, RC2, RC3),\n    across(everything(), ~ round(.x, 3))\n  ) %&gt;%\n  bind_cols(rownames(imp)) %&gt;%\n  select(fips = 5, everything())\nhead(dimension_scores)\n\n\n# A tibble: 6 Ã 5\n# Rowwise: \n  fips     RC1    RC2    RC3 dimension_score\n  &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;           &lt;dbl&gt;\n1 23001 -0.143 -0.192 -0.407          -0.742\n2 23005 -0.148  0.072 -0.177          -0.253\n3 23007 -0.253 -0.443 -0.297          -0.992\n4 23009 -0.341 -0.214 -0.045          -0.6  \n5 23011  0.069  0.17  -0.205           0.034\n6 23013 -0.422 -0.584 -0.597          -1.60 \n\n\nNow that we have all three component scores and the dimension score, letâs take a look at a map. Select the data to display with the layer button on the left.\n\n\nCode\npacman::p_load(\n  mapview,\n  leaflet,\n  leafpop\n)\nmap_dat &lt;- readRDS('data/sm_data.rds')[['ne_counties_2021']] %&gt;%\n  right_join(dimension_scores) %&gt;%\n  left_join(fips_key) %&gt;%\n  select(\n    fips,\n    RC1:RC3,\n    'Dimension Score' = dimension_score,\n    County = county_name,\n    State = state_name,\n    geometry\n  )\n\nmap_dat %&gt;%\n  mapview(\n    zcol = c(\n      'Dimension Score',\n      'RC1',\n      'RC2',\n      'RC3'\n    ),\n    burst = FALSE,\n    hide = c(FALSE, rep(TRUE, 3)),\n    popup = popupTable(\n      map_dat,\n      zcol = names(map_dat)[-length(map_dat)],\n      row.numbers = FALSE,\n      feature.id = FALSE\n  )\n)\n\n\n\n\n\n\nKeep in mind there are lots of caveats with this very preliminary analysis, the most egregious being a set of metrics that does not well represent the dimension it purports to measure. Missing data and various branching paths of decisions in the index scoring also deserve further scrutiny.\nStill, there is plenty to look at here as a first pass at aggregating dimension scores. The first component, RC1, was heavily influenced by the geography - it loads the strongest onto metrics measuring acres or acres per farm. I presume this is why Aroostook county shows up so high on this scale. RC2 loaded strongly onto the number of operations using various conservation practices (easements, no-till, rotational grazing). It seems to track a little bit with county size, but is highest near relatively urban areas. RC3 was most associated with conservation easement acres and easement acres per farm, and consequently seems to track with rural areas.\nI donât think that the dimension score inspires much confidence as it is now. The weighting method for combining components is hard to interpret intuitively, and I think more expert driven normative decisions might make more sense at that point. On the bright side, it is a good expedition into the kinds of ambiguous decisions that will need to be made to aggregate this data across the whole system.",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Analysis"
    ]
  },
  {
    "objectID": "pages/data_environment_overview.html",
    "href": "pages/data_environment_overview.html",
    "title": "Environment: Overview",
    "section": "",
    "text": "The first plot shows all the environment indicators from both the current studies and the original framework in the y-axis. Purple indicates that the indicator is only being used in the current studies, orange that it is only included in the Wiltshire framework, and green that the indicator is used in both the framework and current studies.\nThe x-axis shows the number of secondary data metrics that have been collected to represent those indicators. You can see that there are some indicators for which there exist many data, but many indicators for which I have found little to represent them.\nNASS figures are used to cover on-farm water use, energy efficiency, and acres in conservation practices. I used the National Aquatic Resource Surveys aggregated at the state level to measure water quality. Land use diversity is pretty well represented by Multi-Resolution Land Characteristics LULC layers, which I also aggregated at the county level. Greenhouse gas emissions come from EPA figures by state, broken down by economic sector. Finally, the USFS TreeMap dataset accounts for aboveground biomass and would do reasonably well in tree vigor. There is more to pull out here than I have so far.\nOtherwise, if anyone has ideas for secondary datasets to cover the rest of the indicators, please do let me know.\nCode\npacman::p_load(\n  dplyr,\n  ggplot2,\n  stringr,\n  plotly,\n  RColorBrewer\n)\n\n## Load data for tree and metrics\nenv_tree &lt;- readRDS('data/trees/env_tree.rds')\n\nmeta &lt;- readRDS('data/sm_data.rds')[['metadata']] %&gt;% \n  filter(dimension == 'environment')\n\n# Format to match Wiltshire framework\nmeta &lt;- meta %&gt;% \n  mutate(\n    indicator = str_to_sentence(indicator),\n    indicator = case_when(\n      str_detect(indicator, '^Above') ~ 'Aboveground biomass',\n      str_detect(indicator, '^Water') ~ 'Water use / irrigation efficiency',\n      TRUE ~ indicator\n    )\n  ) \n\n# Counts of secondary data metrics\ncounts &lt;- meta %&gt;% \n  group_by(indicator) %&gt;% \n  dplyr::summarize(count = n())\n\n# Join to Wiltshire framework\ncolors &lt;- RColorBrewer::brewer.pal(n = 3, name = 'Dark2')\ndat &lt;- full_join(env_tree, counts, by = join_by(Indicator == indicator)) %&gt;% \n  mutate(\n    count = ifelse(is.na(count), 0, count),\n    label_color = case_when(\n      Use == 'both' ~ colors[1],\n      Use == 'wiltshire_only' ~ colors[2],\n      Use == 'current_only' ~ colors[3]\n    )\n  )\n\n# Plot\ndat %&gt;%\n  ggplot(aes(x = Indicator, y = count)) +\n  geom_col(\n    color = 'black',\n    fill = 'grey'\n  ) +\n  geom_point(\n    data = dat,\n    aes(x = 1, y = 1, color = Use),\n    inherit.aes = FALSE,\n    alpha = 0,\n    size = -1\n  ) +\n  scale_color_manual(\n    name = \"Indicator Use:\",\n    values = c(\n      \"both\" = colors[1],\n      \"current_only\" = colors[3],\n      \"wiltshire_only\" = colors[2]\n    ),\n    labels = c(\n      'Both',\n      'Current Only',\n      'Framework Only'\n    )\n  ) +\n  theme_classic() +\n  theme(\n    axis.text = element_text(size = 12),\n    axis.text.y = element_text(color = dat$label_color),\n    axis.title = element_text(size = 14),\n    legend.text = element_text(size = 12),\n    legend.title = element_text(size = 12),\n    legend.position = \"bottom\",\n    plot.margin = margin(t = 10, r = 75, b = 10, l = 10)\n  ) +\n  guides(\n    color = guide_legend(override.aes = list(size = 4, alpha = 1))\n  ) +\n  coord_flip() +\n  labs(y = 'Secondary Data Count')\n\n\n\n\n\nBar Plot of Indicators",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Overview"
    ]
  },
  {
    "objectID": "pages/data_environment_overview.html#distribution-plots",
    "href": "pages/data_environment_overview.html#distribution-plots",
    "title": "Environment: Overview",
    "section": "1 Distribution Plots",
    "text": "1 Distribution Plots\n\n1.1 By County\nNote that while most of the available secondary data is at the county level, the environment dimension includes a fair amount at the state level as well. This includes greenhouse gas emissions and water quality surveys. For now, Iâll just show these separately, but some creative aggregation will have to happen eventually.\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  ggplot2,\n  rlang,\n  ggpubr,\n  tidyr\n)\nsource('dev/data_pipeline_functions.R')\nsource('dev/filter_fips.R')\nmetrics &lt;- readRDS('data/sm_data.rds')[['metrics']]\nmetadata &lt;- readRDS('data/sm_data.rds')[['metadata']]\n\n# Use metadata to get help filter by dimension\nenv_meta &lt;- metadata %&gt;%\n  filter(dimension == 'environment')\n\n# Filter to economics dimension\nenv_metrics &lt;- metrics %&gt;%\n  filter(variable_name %in% env_meta$variable_name)\n\n# env_metrics$variable_name %&gt;% unique\n# get_str(env_metrics)\n\n# Filter to latest year and new (post-2024) counties\n# And pivot wider so it is easier to get correlations\nenv_county &lt;- env_metrics %&gt;%\n  filter_fips(scope = 'counties') %&gt;%\n  get_latest_year() %&gt;%\n  select(fips, variable_name, value) %&gt;%\n  mutate(variable_name = str_split_i(variable_name, '_', 1)) %&gt;%\n  pivot_wider(\n    names_from = 'variable_name',\n    values_from = 'value'\n  ) %&gt;%\n  unnest(!fips) %&gt;%\n  mutate(across(c(2:last_col()), as.numeric))\n\n# Save temp file for use in analysis script\nsaveRDS(env_county, 'data/temp/env_county.rds')\n\n## Plot\nplots &lt;- map(names(env_county)[-1], \\(var){\n  if (is.character(env_county[[var]])) {\n    env_county %&gt;%\n      ggplot(aes(x = !!sym(var))) +\n      geom_bar(\n        fill = 'lightblue',\n        color = 'royalblue',\n        alpha = 0.5\n      ) +\n      theme_classic() +\n      theme(plot.margin = unit(c(rep(0.5, 4)), 'cm'))\n  } else if (is.numeric(env_county[[var]])) {\n    env_county %&gt;%\n      ggplot(aes(x = !!sym(var))) +\n      geom_density(\n        fill = 'lightblue',\n        color = 'royalblue',\n        alpha = 0.5\n      ) +\n      theme_classic() +\n      theme(plot.margin = unit(c(rep(0.5, 4)), 'cm'))\n  } else {\n    return(NULL)\n  }\n})\n\n\n# Arrange them in 4 columns\nggarrange(\n  plotlist = plots,\n  ncol = 4,\n  nrow = 11\n)\n\n\n\n\n\nDistributions of economic metrics at the county level.\n\n\n\n\n\n\n1.2 By State\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  ggplot2,\n  rlang,\n  ggpubr,\n  tidyr\n)\n\nstate_codes &lt;- readRDS('data/sm_data.rds')[['fips_key']] %&gt;%\n  select(fips, state_code)\n\nenv_state &lt;- env_metrics %&gt;%\n  filter_fips(scope = 'state') %&gt;%\n  get_latest_year() %&gt;%\n  select(fips, variable_name, value) %&gt;%\n  mutate(variable_name = str_split_i(variable_name, '_', 1)) %&gt;%\n  pivot_wider(\n    names_from = 'variable_name',\n    values_from = 'value'\n  ) %&gt;%\n  unnest(!fips) %&gt;%\n  mutate(across(c(2:last_col()), as.numeric)) %&gt;%\n  left_join(state_codes, by = 'fips')\n\n# Save temp data file for use in analysis script\nsaveRDS(env_state, 'data/temp/env_state.rds')\n\n# Variables to map. Take out some that didn't come through well.\nvars &lt;- names(env_state)[-1] %&gt;%\n  str_subset(\n    'lakesAcidCond|lakesCylsperEpaCond|lakesMicxEpaCond|state_code|waterIrrSrcOffFarmExp|waterIrrReclaimedAcreFt|waterIrrReclaimedOpenAcres',\n    negate = TRUE\n  )\n\n## Plot\nplots &lt;- map(vars, \\(var){\n  env_state %&gt;%\n    ggplot(aes(y = !!sym(var), x = state_code, color = state_code)) +\n    geom_point(\n      alpha = 0.5,\n      size = 3\n    ) +\n    theme_classic() +\n    theme(\n      plot.margin = unit(c(rep(0.5, 4)), 'cm'),\n      legend.position = 'none'\n    ) +\n    labs(\n      x = 'State'\n    )\n})\n\n# Arrange them in 4 columns\nggarrange(\n  plotlist = plots,\n  ncol = 4,\n  nrow = 17\n)\n\n\n\n\n\nDistributions of environmental variables at state level",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Overview"
    ]
  },
  {
    "objectID": "pages/data_environment_overview.html#bivariate-plots",
    "href": "pages/data_environment_overview.html#bivariate-plots",
    "title": "Environment: Overview",
    "section": "2 Bivariate Plots",
    "text": "2 Bivariate Plots\nUsing a selection of variables at the county level. The variable names are a bit hard to fit in here, but from left to right across the top they are LULC diversity, mean live above-ground forest biomass, conservation income per farm, conservatino easement acres per farm, conservation tillage: no-till acres per farm, conservation tillage: excluding no-till acres per farm, and cover cropping: excluding CRP acres per farm.\n\n\nCode\npacman::p_load(\n  GGally\n)\n\n# Neat function for mapping colors to ggpairs plots\n# https://stackoverflow.com/questions/45873483/ggpairs-plot-with-heatmap-of-correlation-values\nmap_colors &lt;- function(data,\n                       mapping,\n                       method = \"p\",\n                       use = \"pairwise\",\n                       ...) {\n  # grab data\n  x &lt;- eval_data_col(data, mapping$x)\n  y &lt;- eval_data_col(data, mapping$y)\n\n  # calculate correlation\n  corr &lt;- cor(x, y, method = method, use = use)\n  colFn &lt;- colorRampPalette(c(\"blue\", \"white\", \"red\"), interpolate = 'spline')\n  fill &lt;- colFn(100)[findInterval(corr, seq(-1, 1, length = 100))]\n\n  # correlation plot\n  ggally_cor(data = data, mapping = mapping, color = 'black', ...) +\n    theme_void() +\n    theme(panel.background = element_rect(fill = fill))\n}\n\nlower_function &lt;- function(data, mapping, ...) {\n  ggplot(data = data, mapping = mapping) +\n    geom_point(alpha = 0.5) +\n    geom_smooth(color = \"blue\", fill = \"grey\", ...) +\n    theme_bw()\n}\n\n# Rename variables to be shorter\nenv_county %&gt;%\n  select(\n    LULC = lulcDiversity,\n    Biomass = meanAboveGrndForBiomass,\n    consIncomePF,\n    consEasementAcresPF,\n    consTillNoTillAcresPF,\n    consTillExclNoTillAcresPF,\n    coverCropExclCrpAcresPF\n  ) %&gt;%\n  ggpairs(\n    upper = list(continuous = map_colors),\n    lower = list(continuous = lower_function),\n    axisLabels = 'show'\n  ) +\n  theme(\n    strip.text = element_text(size =  5),\n    axis.text = element_text(size =   5),\n    legend.text = element_text(size = 5)\n  )\n\n\n\n\n\n\n\n\n\nIt looks like there are a few non-linear relationships, conservation income per farm in particular, but for the most part, linear relationships do a decent job here.",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Overview"
    ]
  },
  {
    "objectID": "pages/data_environment_overview.html#sec-correlations",
    "href": "pages/data_environment_overview.html#sec-correlations",
    "title": "Environment: Overview",
    "section": "3 Correlations",
    "text": "3 Correlations\nOnly showing correlations by county because we donât have enough observations to run it by state.\n\n\nCode\npacman::p_load(\n  dplyr,\n  tidyr,\n  tibble,\n  stringr,\n  purrr,\n  tidyr,\n  ggplot2,\n  plotly,\n  reshape,\n  Hmisc,\n  viridisLite\n)\n\n# get_str(env_county)\n\ncor &lt;- env_county %&gt;%\n  select(-fips, -lulcPropNoData) %&gt;%\n  as.matrix() %&gt;%\n  rcorr()\n\n# Melt correlation values and rename columns\ncor_r &lt;- melt(cor$r) %&gt;%\n  setNames(c('var_1', 'var_2', 'value'))\n\n# Save p values\ncor_p &lt;- melt(cor$P)\np.value &lt;- cor_p$value\n\n# Make heatmap with custom text aesthetic for tooltip\nplot &lt;- cor_r %&gt;%\n  ggplot(aes(var_1, var_2, fill = value, text = paste0(\n    'Var 1: ', var_1, '\\n',\n    'Var 2: ', var_2, '\\n',\n    'Correlation: ', format(round(value, 3), nsmall = 3), '\\n',\n    'P-Value: ', format(round(p.value, 3), nsmall = 3)\n  ))) +\n  geom_tile() +\n  scale_fill_viridis_c() +\n  theme(axis.text.x = element_text(hjust = 1, angle = 45)) +\n  labs(\n    x = NULL,\n    y = NULL,\n    fill = 'Correlation'\n  )\n\n# Convert to interactive plotly figure with text tooltip\nggplotly(\n  plot,\n  tooltip = 'text',\n  width = 1000,\n  height = 800\n)\n\n\n\n\nInteractive correlation plot of metrics by county",
    "crumbs": [
      "Secondary Data",
      "Environment",
      "Overview"
    ]
  },
  {
    "objectID": "pages/home.html",
    "href": "pages/home.html",
    "title": "Sustainability Metrics",
    "section": "",
    "text": "Caution\n\n\n\n\n\nThe Sustainability Metrics project, as well as this site itself, are works in progress. All data and analyses shown here are preliminary. If you have any questions, comments, or suggestions about this site or the accompanying Shiny app, feel free to reach out to Chris at christopher.donovan@uvm.edu.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "pages/home.html#sec-intro",
    "href": "pages/home.html#sec-intro",
    "title": "Sustainability Metrics",
    "section": "1 Introduction",
    "text": "1 Introduction\n\n\n\nIntervale Center, Burlington, Vermont. Copyright: Sally McCay, UVM Photo.\n\n\nResilient food systems are increasingly recognized as essential, not only in meeting human needs, but in doing so within planetary bounds (Conijn et al. 2018). Approximately 42% of worldâs population depend on agriculture for employment, which is a challenging endeavor in the face of farm consolidation, changing consumption patterns, and climate change (Giller et al. 2021; Aznar-SÃ¡nchez et al. 2019). Food systems themselves are responsible for one-third of greenhouse gas emissions, while anthropogenic climate change has reduced agricultural output by 21% in the last 60 years (Crippa et al. 2021; Ortiz-Bobea et al. 2021).\nMonitoring and adaptively managing the sustainability of food systems is thus vital. However, there is little consensus on how to define, let alone measure food system sustainability (Allen and Prosperi 2016; BÃ©nÃ© et al. 2019). And while there is an abundance of research at the global level (Bathaei and Å treimikienÄ 2023; Chaudhary, Gustafson, and Mathys 2018), there exist gaps in understanding at the local, regional, and landscape levels (Dale et al. 2012).",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "pages/home.html#sustainability-metrics",
    "href": "pages/home.html#sustainability-metrics",
    "title": "Sustainability Metrics",
    "section": "2 Sustainability Metrics",
    "text": "2 Sustainability Metrics\n\n\n\nSpread from the Climate Kitchen harvest dinner. Photo credit: Colleen Goodhue, FSRC.\n\n\nThe Sustainability Metrics project is an effort to develop both the conceptual and methodological frameworks to define and measure regional food system sustainability in New England. The framework could be used to monitor sustainability over time and inform interventions at the policy and farm levels, creating a healthier and more resilient food system for both social and ecological ends.\nThe project is led by the Food Systems Research Center at the University of Vermont in partnership with, and funded by, the USDA ARS Food Systems Research Unit in Burlington, Vermont. Five teams of researchers and numerous community partners are currently conducting primary research on the development and measurement of indicators for food system sustainability. You can find more information about this work at the UVM FSRC Sustainability Metrics website. For now, what you will find here is a growing collection of secondary data, visualizations, and exploratory analyses to help support the project.\nMetadata and citations will be provided throughout the document, but it is worth appreciating the work of the folks at USDA AMS Food and Agriculture Mapper and Explorer in particular, as many of the data shown here were cleaned and compiled in their data warehouse. Considerable inspiration was also taken from the Food Systems Dashboard, developed by the Global Alliance for Improved Nutrition.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "pages/home.html#about-fsrc",
    "href": "pages/home.html#about-fsrc",
    "title": "Sustainability Metrics",
    "section": "3 About FSRC",
    "text": "3 About FSRC\nThe Food Systems Research Center at the University of Vermont is transforming the research landscape by funding collaborative projects that put people and the planet first, break down traditional academic silos and are integrated with and responsive to the needs of the communities we serve, including decision-makers, farmers, and food systems actors.\nRooted in the belief that no one group can find the answers alone, FSRC empowers researchers to work together across disciplines to address critical issues like soil health, food security, and climate resilience. Instead of funding research that leads to short-term fixes, our commitment is to give researchers the freedom, resources, and time they need to do relevant research that will inform policies, practices, and programs that will long outlast their work.\nFSRC considers the relationship of food systems across scales from local to global and is a partnership between UVM and the U.S. Department of Agriculture (USDA) Agricultural Research Service (ARS). FSRCâs transdisciplinary approach prioritizes research that studies food systems as a whole, including the networks of people, institutions, physical infrastructure, and natural resources through which food is grown, processed, distributed, sold, prepared, and eaten.\nLearn more about us at the Food Systems Research Center website.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "pages/home.html#license",
    "href": "pages/home.html#license",
    "title": "Sustainability Metrics",
    "section": "4 License",
    "text": "4 License\n\n    This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. \n\n\n    The code is licensed under the GNU General Public License v3.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "pages/refine_economics.html",
    "href": "pages/refine_economics.html",
    "title": "Economic Indicator Refinement",
    "section": "",
    "text": "This page describes the various iterations of indicator sets for the economics dimensions. First, we observe the indicators included in the dimension at three points in time. The second section then shows the results of the survey following the indicator refinement meeting. A final set of indicators to incorporate into the next RFP is still in the works!",
    "crumbs": [
      "Framework",
      "Indicator Refinement",
      "Economics"
    ]
  },
  {
    "objectID": "pages/refine_economics.html#indicator-progression",
    "href": "pages/refine_economics.html#indicator-progression",
    "title": "Economic Indicator Refinement",
    "section": "1 Indicator Progression",
    "text": "1 Indicator Progression\n\n1.1 Wiltshire\nThis graph shows the original framework as described in the Wiltshire et al.Â paper.\n\n\nCode\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/econ_wiltshire_tree.csv',\n  dimension_in = 'economics',\n  include_metrics = FALSE,\n  y_limits = c(-1.5, 2.1)\n)\n\n\n\n\n\n\n\n\n\n\n\n1.2 Matrix\nHere is the current set of indicators in the matrix, following the Sustainability Metrics workshop in July, 2024\n\n\nCode\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/econ_tree.csv',\n  dimension_in = 'economics',\n  y_limits = c(-1.5, 2.1)\n)\n\n\n\n\n\n\n\n\n\n\n\n1.3 Refinement Meeting\nFinally, the tentative set of indicators following the indicator refinement meeting on November 15th, 2024\n\n\nCode\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/econ_meeting_tree.csv',\n  dimension_in = 'economics',\n  y_limits = c(-1.5, 2.1)\n)",
    "crumbs": [
      "Framework",
      "Indicator Refinement",
      "Economics"
    ]
  },
  {
    "objectID": "pages/refine_economics.html#survey",
    "href": "pages/refine_economics.html#survey",
    "title": "Economic Indicator Refinement",
    "section": "2 Survey",
    "text": "2 Survey\nThese are the results from the follow-up survey to the economic indicator refinement meeting on November 15th. This feedback will be used to refine the framework for the next RFP.\n\n2.1 Indicators\n\n\nCode\nraw &lt;- read_csv('data/surveys/econ_survey.csv')\n\ndat &lt;- raw %&gt;% \n  select(\n    starts_with('Q'),\n    -ends_with('RANK')\n  ) %&gt;% \n  setNames(c(\n    'indi_must',\n    'indi_probably',\n    'indi_probably_not',\n    'indi_must_not',\n    paste0('add_indi_', 1:3),\n    'notes',\n    'idx_must',\n    'idx_probably',\n    'idx_probably_not',\n    'idx_must_not',\n    paste0('add_idx_', 1:3),\n    'idx_notes',\n    'final_notes'\n  )) %&gt;% \n  .[-c(1:2), ]\n\ngroups &lt;- select(dat, indi_must:indi_must_not, idx_must:idx_probably_not)\n\nto_df &lt;- function(x) {\n  x %&gt;% \n    str_split(',') %&gt;% \n    unlist() %&gt;% \n    table() %&gt;% \n    as.data.frame() %&gt;% \n    setNames(c('indicator', 'freq')) %&gt;% \n    arrange(desc(freq))\n}\n\nindi_out &lt;- map(groups[1:4], to_df)\nidx_out &lt;- map(groups[5:7], to_df)\n\n# Add scores by multipliers\nmultipliers &lt;- c(3:0)\nind_tables &lt;- map2(indi_out, multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(ind_tables, ~ {\n  col_name &lt;- str_remove(.y, 'indi_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n}) %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not * 1e2 + must_not,\n    indicator = fct_reorder(indicator, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:must_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      \"must_not\",\n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(indicator) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n\n\n\nCode\nggplot(graph_table, aes(\n  y = reorder(indicator, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Indicator\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 20),\n    legend.position = 'top'\n    ) +\n  scale_fill_brewer(\n    palette = \"RdBu\", \n    direction = -1,\n    limits = c(\n      \"must\",\n      \"probably\", \n      \"probably_not\", \n      \"must_not\" \n    ),\n    labels = c(\n      \"Must Include\", \n      \"Probably Include\", \n      \"Probably Not Include\", \n      \"Must Not Include\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nWe are coding this so âMust Includeâ is worth 3 points, âProbably Includeâ is worth 2 points, âProbably Not Includeâ is worth 1 point, and âMust Not Includeâ is worth 0 points. Note that the last column is the sum of proportions of âMust Includeâ and âProbably Includeâ. You can sort, search, expand, or page through the table below.\n\n\nCode\n# Add category to tables\nprops &lt;- ind_tables %&gt;% \n  imap(~ .x %&gt;% mutate(cat = .y)) %&gt;% \n  bind_rows() %&gt;% \n  select(-score)\n \n# Get proportion of probably include OR must include\nprop_prob_or_must_include &lt;- props %&gt;% \n  filter(cat %in% c('indi_must', 'indi_probably')) %&gt;% \n  group_by(indicator) %&gt;% \n  summarize(prop_include = sum(freq) / 6) %&gt;% \n  arrange(desc(prop_include))\n\n# Get proportion of must include\nprop_must_include &lt;- props %&gt;% \n  filter(cat == 'indi_must') %&gt;% \n  group_by(indicator) %&gt;% \n  summarize(prop_must = sum(freq) / 6) %&gt;% \n  arrange(desc(prop_must))\n\n# Add up weighted scores\nind_scores &lt;- ind_tables %&gt;% \n  bind_rows() %&gt;% \n  group_by(indicator) %&gt;% \n  summarize(score = sum(score, na.rm = TRUE)) %&gt;% \n  arrange(desc(score))\n\n# Join everything together\nscores_table &lt;- ind_scores %&gt;% \n  full_join(prop_must_include) %&gt;% \n  full_join(prop_prob_or_must_include) %&gt;% \n  arrange(desc(score)) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    across(c(3:4), ~ format(round(.x, 2), nsmall = 2))\n  ) %&gt;% \n  setNames(c('Indicator', 'Score', 'Proportion Must Include', 'Proportion Must OR Probably Include'))\n\n\n\n\n\n\n\n\n\n\n2.2 Indices\n\n\nCode\nidx_out &lt;- map(groups[5:7], to_df)\n\n# Add scores by multipliers\nmultipliers &lt;- c(3:1)\nidx_tables &lt;- map2(idx_out, multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(index = indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(idx_tables, ~ {\n  col_name &lt;- str_remove(.y, 'idx_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n}) %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not,\n    index = fct_reorder(index, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:probably_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(index) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n\ncolors &lt;- RColorBrewer::brewer.pal(4, 'RdBu')[2:4]\n\nggplot(graph_table, aes(\n  y = reorder(index, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Index\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 16),\n    legend.position = 'top'\n    ) +\n  scale_fill_manual(\n    values = rev(colors),\n    limits = c(\n      \"must\",\n      \"probably\",\n      \"probably_not\"\n    ),\n    labels = c(\n      \"Must Include\",\n      \"Probably Include\",\n      \"Probably Not Include\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nThe indices are going through the same treatment as indicators above - scored from 3 to 0. Note that there were no indices rated as âMust Not Includeâ.",
    "crumbs": [
      "Framework",
      "Indicator Refinement",
      "Economics"
    ]
  },
  {
    "objectID": "pages/sm-explorer.html",
    "href": "pages/sm-explorer.html",
    "title": "SM-Explorer",
    "section": "",
    "text": "Caution\n\n\n\n\n\nThe SM-Explorer is a work in progress. There are a small heap of bugs Iâm already aware of, and about a hundred things Iâd still like to add. If/when you find things that arenât working properly, please feel free to let Chris know!\n\n\n\nThis is a Shiny app that allows for interactive exploration of metrics, mostly at the county level. It includes a map page, a bivariate plot explorer, and a metadata table much like what is included in this Quarto doc. It tends to work best if you open it in its own page using the button below:\n\n\n\n\nGo To SM-Explorer\n\n\n\n\nYou can also just use it here in the window. Note that some functions (like the full screen button) wonât work here.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Secondary Data",
      "SM-Explorer"
    ]
  }
]