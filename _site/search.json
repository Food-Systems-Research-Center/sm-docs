[
  {
    "objectID": "pages/metrics_table.html",
    "href": "pages/metrics_table.html",
    "title": "Metrics Table",
    "section": "",
    "text": "On this page you can download a bulk .csv file for all the secondary data metrics collected so far in the project (with the exception of ~1,000 NAICS metrics). The file is ~ 40MB. Use the Download Bulk CSV button below to download it. Note that the metadata table from the last page can be used to identify and define the the variable names. To download a key to match FIPS codes to state and county names, use the Download FIPS Key button.\nSoon to come on this page is an interactive table of metrics. The file size is large enough that manipulating it in the Quarto page is unwieldy, so it will have to link to a separate database. Coming soon.\n\n\nCode\npacman::p_load(\n  dplyr,\n  reactable,\n  stringr,\n  htmltools,\n  readr\n)\n\nmetrics_file_name = paste0(Sys.Date(), \"_bulk_metrics.csv\")\nfips_file_name = paste0(Sys.Date(), \"_fips_key.csv\")\n\ntagList(\n  tags$div(\n    style = \"display: flex; gap: 100px; margin-bottom: 20px; justify-content: center;\",\n    tags$a(\n      class = \"btn btn-primary\",\n      style = \"display: flex; width: 200px; justify-content: center; align-items: center;\",\n      href = '../data/bulk_metrics.csv',\n      download = metrics_file_name,\n      tagList(fontawesome::fa(\"download\"), \"Download Bulk .CSV\")\n    ),\n   tags$a(\n      class = \"btn btn-primary\",\n      style = \"display: flex; width: 200px; justify-content: center; align-items: center;\",\n      href = '../data/all_fips_key.csv',\n      download = fips_file_name,\n      tagList(fontawesome::fa(\"download\"), \"Download FIPS Key\")\n    )\n  )\n)\n\n\n\n\n\nDownload Bulk .CSV\n\n\n\nDownload FIPS Key\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Secondary Data",
      "Metrics Data"
    ]
  },
  {
    "objectID": "pages/sm-explorer.html",
    "href": "pages/sm-explorer.html",
    "title": "SM-Explorer",
    "section": "",
    "text": "Caution\n\n\n\n\n\nThe SM-Explorer is a work in progress. There are a small heap of bugs I’m already aware of, and about a hundred things I’d still like to add. If/when you find things that aren’t working properly, please feel free to let Chris know!\n\n\n\nThis is a Shiny app that allows for interactive exploration of metrics, mostly at the county level. It includes a map page, a bivariate plot explorer, and a metadata table much like what is included in this Quarto doc. It tends to work best if you open it in its own page using the button below:\n\n\n\n\nGo To SM-Explorer\n\n\n\n\nYou can also just use it here in the window. Note that some functions (like the full screen button) won’t work here.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Secondary Data",
      "SM-Explorer"
    ]
  },
  {
    "objectID": "pages/framework.html",
    "href": "pages/framework.html",
    "title": "Overview",
    "section": "",
    "text": "Dr. Josh Taylor (left) and Dr. David Conner (right) at the FSRC Sustainability Metrics workshop in 2024. Photo by Colleen Goodhue, FSRC.\n\n\nThe original framework of dimensions, indices, and indicators representing food system sustainability was developed through a transdisciplinary team science process described in detail by Wiltshire et al. (2024). The figure below shows the structure of this collaborative process.\nAs the project progressed, a collection of new indicators were proposed across all dimensions, leading up to a total of 135 indicators. This full set of indicators is shown in Section 2. Starting in July of 2024, the FSRC has been using a collaborative and transparent process to reduce the number of indicators to manageable amount that. More information about this refinement process can be found in the Indicator Refinement pages.\n\n\n\nTeam science diagram from Wiltshire et al., 2024."
  },
  {
    "objectID": "pages/framework.html#introduction",
    "href": "pages/framework.html#introduction",
    "title": "Overview",
    "section": "",
    "text": "Dr. Josh Taylor (left) and Dr. David Conner (right) at the FSRC Sustainability Metrics workshop in 2024. Photo by Colleen Goodhue, FSRC.\n\n\nThe original framework of dimensions, indices, and indicators representing food system sustainability was developed through a transdisciplinary team science process described in detail by Wiltshire et al. (2024). The figure below shows the structure of this collaborative process.\nAs the project progressed, a collection of new indicators were proposed across all dimensions, leading up to a total of 135 indicators. This full set of indicators is shown in Section 2. Starting in July of 2024, the FSRC has been using a collaborative and transparent process to reduce the number of indicators to manageable amount that. More information about this refinement process can be found in the Indicator Refinement pages.\n\n\n\nTeam science diagram from Wiltshire et al., 2024."
  },
  {
    "objectID": "pages/framework.html#sec-framework_overview",
    "href": "pages/framework.html#sec-framework_overview",
    "title": "Overview",
    "section": "2 Framework Overview",
    "text": "2 Framework Overview\nBelow is a diagram of all 136 indicators in the framework as of July, 2024. Colors represent dimensions, and splits occur at the dimension and index level. See the table in Section 3 for a more detailed look at indicators.\n\n\nCode\n## Load packages\npacman::p_load(\n  ggraph,\n  igraph,\n  dplyr,\n  RColorBrewer,\n  viridisLite\n)\n\n\n## Load data and add an origin level\ndat &lt;- readRDS('data/trees/tree_dat.rds') %&gt;% \n  mutate(Framework = 'Sustainability') %&gt;% \n  select(Framework, Dimension:Indicator)\n\n\n## Make edges\n# include groupings by dimension, then combine them\nedges &lt;- list()\nedges$sm_dim &lt;- dat %&gt;% \n  select(Framework, Dimension) %&gt;% \n  unique() %&gt;% \n  rename(from = Framework, to = Dimension) %&gt;% \n  mutate(group = to)\nedges$dim_ind &lt;- dat %&gt;% \n  select(Dimension, Index) %&gt;% \n  unique() %&gt;% \n  rename(from = Dimension, to = Index) %&gt;% \n  mutate(group = from)\nedges$ind_ind &lt;- dat %&gt;% \n  select(Index, Indicator) %&gt;% \n  unique() %&gt;% \n  rename(from = Index, to = Indicator) %&gt;% \n  mutate(group = edges$dim_ind$from[match(.$from, edges$dim_ind$to)])\nedges &lt;- bind_rows(edges)\n\n\n## Make vertices\n# Each line is a single vertex (dimension, index, or indicator)\n# We are just giving them random values to control point size for now\nvertices = data.frame(\n  name = unique(c(as.character(edges$from), as.character(edges$to))) , \n  value = runif(nrow(edges) + 1)\n) \n\n# Add the dimension groupings to the vertices as well\nvertices$group = edges$group[match(vertices$name, edges$to)]\n\n# Calculate the angles to arrange indicator labels\nvertices$id = NA\nmyleaves = which(is.na(match(vertices$name, edges$from)))\nnleaves = length(myleaves)\nvertices$id[myleaves] = seq(1:nleaves)\nvertices$angle = 90 - 360 * vertices$id / nleaves\n\n# Calculate alignment of indicator labels\nvertices$hjust &lt;- ifelse(vertices$angle &lt; -90, 1, 0)\n\n# Flip label angles around 180 degrees if they are facing the wrong way\nvertices$angle &lt;- ifelse(vertices$angle &lt; -90, vertices$angle + 180, vertices$angle)\n\n\n## Create graph\n# Make ggraph object from edges and vertices\ngraph &lt;- graph_from_data_frame(edges, vertices = vertices)\n\n# Plot the graph\nggraph(graph, layout = 'dendrogram', circular = TRUE) +\n  \n  # Color edges by dimension\n  geom_edge_diagonal(aes(color = group), width = 0.5) +\n  \n  # Create text for indicators using angles, hjust, and dimension groupings\n  geom_node_text(\n    aes(\n      x = x * 1.04,\n      y = y * 1.04,\n      filter = leaf,\n      label = name,\n      angle = angle,\n      hjust = hjust,\n      colour = group\n    ),\n    size = 2.7,\n    alpha = 1\n  ) +\n  \n  # Make the points for indicators based on dimension groupings\n  # geom_node_point(aes(\n  #   filter = leaf,\n  #   x = x * 1.07,\n  #   y = y * 1.07,\n  #   colour = group,\n  #   size = value,\n  #   alpha = 0.2\n  # )) +\n  \n  # Label the dimensions within the graph\n  geom_node_label(\n    aes(label = ifelse(name == group, name, NA)),\n    label.padding = unit(0.2, \"lines\"),\n    label.r = unit(0.3, \"lines\"),\n    label.size = 0.1,\n    size = 3\n  ) +\n  \n  # Various formatting options\n  scale_colour_manual(values = brewer.pal(5, 'Set1')) +\n  scale_edge_color_manual(values = brewer.pal(5, 'Set1')) +\n  scale_size_continuous(range = c(0.1, 7)) +\n  theme_void() +\n  theme(\n    legend.position = \"none\",\n    plot.margin = unit(c(0, 0, 0, 0), \"cm\")\n  ) +\n  expand_limits(x = c(-2, 2), y = c(-2, 2))\n\n\n\n\n\nRadial dendrogram of Sustainability Metrics framework"
  },
  {
    "objectID": "pages/framework.html#sec-framework_table",
    "href": "pages/framework.html#sec-framework_table",
    "title": "Overview",
    "section": "3 Full Indicator Table",
    "text": "3 Full Indicator Table\nBelow is an interactive table with the full set of 135 indicators from July of 2024. You can search, filter, and page through the table, and download the filtered set of data as a .csv file using the download button.\n\n\nCode\npacman::p_load(\n  dplyr,\n  reactable,\n  stringr,\n  htmltools\n)\n\n# Load framework data as a tree\ntree &lt;- readRDS('data/trees/tree_dat.rds')\n\n# Load custom reactable table function\nsource('dev/get_reactable.R')\n\n# Pick out variables to display\ndat &lt;- tree %&gt;% \n  select(-c(tooltip, count_))\n\n# Make reactable table\nhtmltools::browsable(\n  tagList(\n    tags$div(\n      style = \"display: flex; margin-bottom: 20px; justify-content: center;\",\n      tags$button(\n          class = \"btn btn-primary\",\n          style = \"display: flex; align-items: center; gap: 8px; padding: 8px 12px;\",\n          tagList(fontawesome::fa(\"download\"), \"Download as CSV\"),\n          onclick = \"Reactable.downloadDataCSV('indicator_table', 'indicator_framework.csv')\"\n        )\n      ),\n    get_reactable(\n      dat,\n      elementId = \"indicator_table\"\n    )\n  )\n)\n\n\n\n\n\nDownload as CSV"
  },
  {
    "objectID": "pages/validation.html",
    "href": "pages/validation.html",
    "title": "Validation",
    "section": "",
    "text": "The goal here is to use our five tentative dimension scores as predictors to compare against other established metrics:\n\nFood security index, overall and/or child (Feeding America, Map the Meal Gap)\nHealth outcomes (UW county health rankings)\nLife expectancy, or premature age-adjusted mortality (UW rankings)\nOther ideas: a food affordability index, happiness index, happy planet index?\n\nNote for now that this is a bit tautological because some of these indices are used within the framework already. Perhaps there are better external measures to compare against. We also may not want to include complete indices like food security as metrics or indicators in the final framework. Open to thoughts on others ways to approach this.\nTo Add:\n\ncite Schneider 2023 (Schneider et al. 2023)\n\nWLS regression to get deviations of region and income group weighted means from global weighted mean\n\n\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  stringr\n)\n\n# Load state fips key to join other datasets\nstate_key &lt;- readRDS('data/sm_data.rds')[['state_key']] %&gt;% \n  select(state, state_code)\n\n# Load cleaned aggregated data for all levels of regresion\nminmax_geo &lt;- readRDS('data/minmax_geo_all_levels.rds')\nget_str(minmax_geo)\n\n# Reduce to just dimension scores, and remove prefix\ndimension_scores &lt;- minmax_geo %&gt;% \n  select(state, starts_with('dimen')) %&gt;% \n  setNames(c(str_remove(names(.), 'dimen_')))\nget_str(dimension_scores)\n\n# Pull raw metrics data\nmetrics_df &lt;- readRDS('data/metrics_df.rds')\nget_str(metrics_df)\n\n# Pull just food insecurity from raw metrics data and add it to the dimension scores\nvalidation_vars &lt;- metrics_df %&gt;% \n  select(\n    fips, \n    foodInsecOverall,\n    foodInsecChild, \n    lifeExpectancy,\n    CO2FromAg\n  )\nget_str(validation_vars)\n\n# Pull health outcomes from UW county health rankings (healthOutcomeZ) \n# Need to finish this []\nmetrics &lt;- readRDS('data/sm_data.rds')[['metrics']]\nget_str(metrics)\n\n# Combine validation vars with dimension scores to get our dataset for regressions\ndat &lt;- dimension_scores %&gt;% \n  left_join(state_key) %&gt;% \n  left_join(validation_vars, by = join_by(state_code == fips)) %&gt;% \n  select(-state_code)\nget_str(dat)",
    "crumbs": [
      "Refined Framework Analysis",
      "Validation"
    ]
  },
  {
    "objectID": "pages/validation.html#introduction",
    "href": "pages/validation.html#introduction",
    "title": "Validation",
    "section": "",
    "text": "The goal here is to use our five tentative dimension scores as predictors to compare against other established metrics:\n\nFood security index, overall and/or child (Feeding America, Map the Meal Gap)\nHealth outcomes (UW county health rankings)\nLife expectancy, or premature age-adjusted mortality (UW rankings)\nOther ideas: a food affordability index, happiness index, happy planet index?\n\nNote for now that this is a bit tautological because some of these indices are used within the framework already. Perhaps there are better external measures to compare against. We also may not want to include complete indices like food security as metrics or indicators in the final framework. Open to thoughts on others ways to approach this.\nTo Add:\n\ncite Schneider 2023 (Schneider et al. 2023)\n\nWLS regression to get deviations of region and income group weighted means from global weighted mean\n\n\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  stringr\n)\n\n# Load state fips key to join other datasets\nstate_key &lt;- readRDS('data/sm_data.rds')[['state_key']] %&gt;% \n  select(state, state_code)\n\n# Load cleaned aggregated data for all levels of regresion\nminmax_geo &lt;- readRDS('data/minmax_geo_all_levels.rds')\nget_str(minmax_geo)\n\n# Reduce to just dimension scores, and remove prefix\ndimension_scores &lt;- minmax_geo %&gt;% \n  select(state, starts_with('dimen')) %&gt;% \n  setNames(c(str_remove(names(.), 'dimen_')))\nget_str(dimension_scores)\n\n# Pull raw metrics data\nmetrics_df &lt;- readRDS('data/metrics_df.rds')\nget_str(metrics_df)\n\n# Pull just food insecurity from raw metrics data and add it to the dimension scores\nvalidation_vars &lt;- metrics_df %&gt;% \n  select(\n    fips, \n    foodInsecOverall,\n    foodInsecChild, \n    lifeExpectancy,\n    CO2FromAg\n  )\nget_str(validation_vars)\n\n# Pull health outcomes from UW county health rankings (healthOutcomeZ) \n# Need to finish this []\nmetrics &lt;- readRDS('data/sm_data.rds')[['metrics']]\nget_str(metrics)\n\n# Combine validation vars with dimension scores to get our dataset for regressions\ndat &lt;- dimension_scores %&gt;% \n  left_join(state_key) %&gt;% \n  left_join(validation_vars, by = join_by(state_code == fips)) %&gt;% \n  select(-state_code)\nget_str(dat)",
    "crumbs": [
      "Refined Framework Analysis",
      "Validation"
    ]
  },
  {
    "objectID": "pages/validation.html#overall",
    "href": "pages/validation.html#overall",
    "title": "Validation",
    "section": "1.1 Overall",
    "text": "1.1 Overall\n\n\nCode\nlm1 &lt;- lm(\n  foodInsecOverall ~ economics + environment + health + production + social,\n  data = dat\n)\nsummary(lm1)\nget_res_plots(lm1)",
    "crumbs": [
      "Refined Framework Analysis",
      "Validation"
    ]
  },
  {
    "objectID": "pages/validation.html#child",
    "href": "pages/validation.html#child",
    "title": "Validation",
    "section": "1.2 Child",
    "text": "1.2 Child\n\n\nCode\nlm2 &lt;- lm(\n  foodInsecChild ~ economics + environment + health + production + social,\n  data = dat\n)\nsummary(lm2)\nget_res_plots(lm2)",
    "crumbs": [
      "Refined Framework Analysis",
      "Validation"
    ]
  },
  {
    "objectID": "pages/refine_production.html",
    "href": "pages/refine_production.html",
    "title": "Production Indicator Refinement",
    "section": "",
    "text": "This page describes the various iterations of indicator sets for the production dimension. First, we observe the indicators included in the dimension at three points in time. The second section then shows the results of the survey following the indicator refinement meeting.",
    "crumbs": [
      "Indicator Refinement",
      "Production"
    ]
  },
  {
    "objectID": "pages/refine_production.html#indicator-progression",
    "href": "pages/refine_production.html#indicator-progression",
    "title": "Production Indicator Refinement",
    "section": "1 Indicator Progression",
    "text": "1 Indicator Progression\n\n1.1 Wiltshire\nThis graph shows the original framework for the dimension as described in the Wiltshire et al. paper.\n\n\nCode\n# Use custom function in SMDO repo\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/wiltshire_tree.csv',\n  dimension_in = 'Production',\n  y_limits = c(-1.5, 2.1),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.2 Matrix\nHere is the current set of indicators in the matrix, following the Sustainability Metrics workshop in July, 2024\n\n\nCode\n# Use custom function in SMDO repo\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/matrix_tree.csv',\n  dimension_in = 'Production',\n  y_limits = c(-1.5, 2.1),\n  palette = \"ggthemes::stata_s2color\"\n)",
    "crumbs": [
      "Indicator Refinement",
      "Production"
    ]
  },
  {
    "objectID": "pages/refine_production.html#survey",
    "href": "pages/refine_production.html#survey",
    "title": "Production Indicator Refinement",
    "section": "2 Survey",
    "text": "2 Survey\nThese are the results from the follow-up survey to the production indicator refinement meeting on January 15th. This feedback will be used to refine the framework for the next RFP.\n\n2.1 Indicators\n\n\nCode\nraw &lt;- read_csv('data/surveys/prod_survey.csv')\n\ndat &lt;- raw %&gt;% \n  select(\n    ends_with('GROUP'),\n  ) %&gt;% \n  setNames(c(\n    'indi_must',\n    'indi_probably',\n    'indi_probably_not',\n    'indi_must_not',\n    'idx_must',\n    'idx_probably',\n    'idx_probably_not',\n    'idx_must_not'\n  )) %&gt;% \n  .[-c(1:2), ]\n\nto_df &lt;- function(x) {\n  if (all(is.na(x))) {\n    return(NULL)\n  } else {\n   x %&gt;%\n    str_remove(' \\\\(joint indicator with Marketability\\\\)') %&gt;%\n    str_remove('\\\\*.*') %&gt;%\n    str_remove(' \\\\(see notes with questions') %&gt;%\n    str_split(',(?!\\\\s)') %&gt;% # Split on comma not followed by a space\n    unlist() %&gt;% \n    table() %&gt;% \n    as.data.frame() %&gt;% \n    setNames(c('indicator', 'freq')) %&gt;% \n     arrange(desc(freq))\n  }\n}\n\nindi_out &lt;- map(dat[1:4], to_df)\nidx_out &lt;- map(dat[5:8], to_df)\n\n# Add scores by multipliers\nmultipliers &lt;- c(3:0)\nind_tables &lt;- map2(indi_out, multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(ind_tables, ~ {\n  col_name &lt;- str_remove(.y, 'indi_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n})\n\ngraph_table &lt;- graph_table %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not * 1e2 + must_not,\n    indicator = fct_reorder(indicator, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:must_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      \"must_not\",\n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(indicator) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n# Note some missing data throws off the graph table. Fix it here\ngraph_table_clean &lt;- graph_table %&gt;% \n  mutate(\n    sort_key = case_when(\n      str_detect(indicator, 'Production Species Diversity') ~ 3e6,\n      str_detect(indicator, 'Not livestock specific') ~ 1010002,\n      .default = sort_key\n    )\n  )\n\n\n\n\nCode\nggplot(graph_table_clean, aes(\n  y = reorder(indicator, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Indicator\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 20),\n    legend.position = 'top'\n    ) +\n  scale_fill_brewer(\n    palette = \"RdBu\", \n    direction = -1,\n    limits = c(\n      \"must\",\n      \"probably\", \n      \"probably_not\", \n      \"must_not\" \n    ),\n    labels = c(\n      \"Must Include\", \n      \"Probably Include\", \n      \"Probably Not Include\", \n      \"Must Not Include\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nWe are coding this so “Must Include” is worth 3 points, “Probably Include” is worth 2 points, “Probably Not Include” is worth 1 point, and “Must Not Include” is worth 0 points. Note that the last column is the sum of proportions of “Must Include” and “Probably Include”. You can sort, search, expand, or page through the table below.\n\n\n\n\n\n\n\n\n2.2 Indices\n\n\nCode\n# Add scores by multipliers\nmultipliers &lt;- c(3:1)\nidx_tables &lt;- map2(idx_out[1:3], multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(index = indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(idx_tables, ~ {\n  col_name &lt;- str_remove(.y, 'idx_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n}) %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not,\n    sort_key = ifelse(str_detect(index, 'Carbon'), 5e6, sort_key),\n    index = fct_reorder(index, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:probably_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      # \"must_not\",\n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(index) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n\ncolors &lt;- RColorBrewer::brewer.pal(4, 'RdBu')\n\nggplot(graph_table, aes(\n  y = reorder(index, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Index\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 20),\n    legend.position = 'top'\n    ) +\n  scale_fill_manual(\n    values = rev(colors),\n    limits = c(\n      \"must\",\n      \"probably\",\n      \"probably_not\"\n    ),\n    labels = c(\n      \"Must Include\",\n      \"Probably Include\",\n      \"Probably Not Include\"\n    )\n  )",
    "crumbs": [
      "Indicator Refinement",
      "Production"
    ]
  },
  {
    "objectID": "pages/refined_framework.html",
    "href": "pages/refined_framework.html",
    "title": "Refined Secondary Data Framework",
    "section": "",
    "text": "Code\npacman::p_load(\n  conflicted,\n  dplyr,\n  purrr,\n  stringr,\n  readr\n)\nsource('dev/get_dimension_ggraph.R')\n\n# Load refined framework\nraw &lt;- readRDS('data/sm_data.rds')[['refined_tree']]\n\n# Clean up the framework df \nframe &lt;- raw %&gt;% \n  select(dimension:variable_name, use) %&gt;% \n  filter(use == 'x') %&gt;% \n  select(-use) %&gt;% \n  mutate(\n    metric = ifelse(\n      str_length(metric) &gt; 45,\n      paste0(str_sub(metric, end = 45), '...'),\n      metric\n    )\n  )\n# get_str(frame)\n\n# Save frame to rds for use in subsequent scripts\nsaveRDS(frame, 'data/frame.rds')\nThis page shows the partially refined framework as it stands after three dimension meetings: economics, environment, and production. It also includes a selection of preliminary secondary data metrics to match those indicators. We have collected around 1500 metrics so far, although many of those are fluff. Effectively, we have around 400 meaningful metrics. Here, we are using a selection of ~91 of them to make a preliminary framework for preliminary analyses. This is more than we have been planning for the refined framework, which will give us a chance to see how aggregate scores change with different combinations of metrics and under different methods of aggregation.\nNote that where I have no metrics to represent an indicator, I have added placeholders of the format NONE_#. This does not mean that secondary data do not exist, just that I either haven’t found it or haven’t cleaned and wrangled it yet. At the time of writing, there are several of the latter, including crop failure, access to care, racial diversity, and others. If you know of any secondary data to fill in the gaps or improve on data we already have, please do reach out to let Chris know about it.\nAt the bottom of this page is a metadata table with sources and definitions for all the metrics.",
    "crumbs": [
      "Refined Framework Analysis",
      "Framework"
    ]
  },
  {
    "objectID": "pages/refined_framework.html#partially-refined-framework",
    "href": "pages/refined_framework.html#partially-refined-framework",
    "title": "Refined Secondary Data Framework",
    "section": "1 Partially Refined Framework",
    "text": "1 Partially Refined Framework\nHere is the framework with a selection of secondary metrics, split into each dimension for ease of reading.\n\n1.1 Environment\nWe have reasonable representation of the environment dimension, although some metrics are proxies that are stretched a bit too far. I do have biodiversity and sensitive habitat data, but still need to process it at the state level and add it to the collection. Some weak points are the carbon stocks indicator - so far, this is all from the TreeMap 2016 dataset. I would love to include other stocks of carbon if anyone has leads on datasets. The metrics for embodied carbon are also stretches.\nOne gap I’ve noticed since this dimension was reworked in the dimension meeting is that there is no direct treatment of soil health included anymore. We might add soil metrics for carbon stocks or forest health, but there is no clear home for it. And that being said, I have had no luck finding any reliable soil health datasets, so I’m all ears here too.\n\n\nCode\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'environment',\n  include_metrics = TRUE,\n  y_limits = c(-2, 3.25),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.2 Economics\nIt has definitely been easier to find economics data than other dimensions. Worth noting here is that the access to land indicator is not ideal. I’m using value and farm size as a proxy for access. Use of crop in surance is also a proxy, since I could not find direct insurance claim data from FSA. So for now, we are just using the presidential and ag secretary declarations of disasters that allow for insurance claims.\n\n\nCode\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'economics',\n  include_metrics = TRUE,\n  y_limits = c(-1.5, 3.1),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.3 Production\nThe production dimension looks slim at first glance, but is better than it looks. Agricultural exports are a pretty robust dataset at the state level from ERS, although the import data only includes the values of the top five imports for each state - not ideal. Crop diversity is based on the Cropland Data Layer, a USDA NASS estimate of crop types, which I used to calculate Shannon diversity at the county level. The rest of the metrics come from NASS. Production is an area in which I feel better about using NASS data than usual.\n\n\nCode\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'production',\n  include_metrics = TRUE,\n  y_limits = c(-1.75, 3),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.4 Health\nThe Food Environment Atlas has lots of data on access and nutrition, which accounts for much of the food security data, along with NASS. The ‘food security tbd’ index is just pulled out because this is already an index of food security that encompasses access and affordability. I will use this to explore how redundant they are. I also threw in a slew of metrics for physical health. The Factor and Outcome Z-Scores are already composite indices from the County Health Rankings, a great dataset. This is another area I want to explore with PCA to see how much unique variation these little metrics bring compared to a composite.\n\n\nCode\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'health',\n  include_metrics = TRUE,\n  y_limits = c(-1.7, 3),\n  palette = \"ggthemes::stata_s2color\"\n)\n\n\n\n\n\n\n\n\n\n\n\n1.5 Social\nThe social dimension is admittedly slim, but it could have been a lot worse. The County Health Rankings dataset brings a few useful metrics here, like social associations and disconnected youth. Census participation and voter turnout are proxies for participatory governance in food systems - I can’t imagine finding something much more specific than that at this point. I also plan on replacing mean producer age with a diversity index for age structure among producers.\n\n\nCode\nget_dimension_ggraph(\n  framework_df = frame,\n  dimension_in = 'social',\n  include_metrics = TRUE,\n  y_limits = c(-1.7, 3),\n  palette = \"ggthemes::stata_s2color\"\n)",
    "crumbs": [
      "Refined Framework Analysis",
      "Framework"
    ]
  },
  {
    "objectID": "pages/refined_framework.html#metadata",
    "href": "pages/refined_framework.html#metadata",
    "title": "Refined Secondary Data Framework",
    "section": "2 Metadata",
    "text": "2 Metadata\nHere is the metadata for this refined set of secondary metrics.\n\n\nCode\npacman::p_load(\n  dplyr,\n  reactable,\n  stringr,\n  htmltools\n)\n\n# Load full metadata table\nmetadata &lt;- readRDS('data/sm_data.rds')[['metadata']]\n\n# Pull var names out of frame df, extract from all metadata\nvars &lt;- frame$variable_name\nmetadata &lt;- filter(metadata, variable_name %in% vars)\n\n# Pick out variables to display\nmeta &lt;- metadata %&gt;% \n  select(\n    metric,\n    'Variable Name' = variable_name,\n    definition,\n    dimension,\n    index,\n    indicator,\n    units,\n    'Year' = latest_year, # Renaming latest year as year, not including og year\n    source,\n    scope,\n    resolution,\n    url\n) %&gt;% \n  setNames(c(str_to_title(names(.))))\n\n###\nhtmltools::browsable(\n  tagList(\n    \n    tags$div(\n      style = \"display: flex; gap: 16px; margin-bottom: 20px; justify-content: center;\",\n      \n      tags$button(\n        class = \"btn btn-primary\",\n        style = \"display: flex; align-items: center; gap: 8px; padding: 8px 12px;\",\n        tagList(fontawesome::fa(\"download\"), \"Show/hide more columns\"),\n        onclick = \"Reactable.setHiddenColumns('metadata_table', prevColumns =&gt; {\n          return prevColumns.length === 0 ? ['Definition', 'Scope', 'Resolution', 'Url'] : []\n        })\"\n      ),\n      \n      tags$button(\n        class = \"btn btn-primary\",\n        style = \"display: flex; align-items: center; gap: 8px; padding: 8px 12px;\",\n        tagList(fontawesome::fa(\"download\"), \"Download as CSV\"),\n        onclick = \"Reactable.downloadDataCSV('metadata_table', 'sustainability_metadata.csv')\"\n      )\n    ),\n    \n    reactable(\n      meta,\n      sortable = TRUE,\n      resizable = TRUE,\n      filterable = TRUE,\n      searchable = TRUE,\n      pagination = TRUE,\n      bordered = TRUE,\n      wrap = TRUE,\n      rownames = FALSE,\n      onClick = 'select',\n      striped = TRUE,\n      pageSizeOptions = c(5, 10, 25, 50, 100),\n      defaultPageSize = 5,\n      showPageSizeOptions = TRUE,\n      highlight = TRUE,\n      style = list(fontSize = \"14px\"),\n      compact = TRUE,\n      fullWidth = TRUE,\n      columns = list(\n        Metric = colDef(\n          minWidth = 200,\n          sticky = 'left'\n        ),\n        'Variable Name' = colDef(\n          minWidth = 150\n        ),\n        Definition = colDef(\n          minWidth = 250\n        ),\n        'Latest Year' = colDef(minWidth = 75),\n        Source = colDef(minWidth = 250),\n        Scope = colDef(show = FALSE),\n        Resolution = colDef(show = FALSE),\n        Url = colDef(\n          minWidth = 300,\n          show = FALSE\n        )\n      ),\n      defaultColDef = colDef(minWidth = 100),\n      elementId = \"metadata_table\",\n      details = function(index) {\n        div(\n          style = \"padding: 15px; border: 1px solid #ddd; margin: 10px 0;\n             background-color: #E0EEEE; border-radius: 10px; border-color: black;\n             box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\",\n          \n          tags$h4(\n            strong(\"Details\"), \n          ),\n          tags$p(\n            strong('Metric Name: '), \n            as.character(metadata[index, 'metric']),\n          ),\n          tags$p(\n            strong('Variable Name: '), \n            as.character(metadata[index, 'variable_name']),\n          ),\n          tags$p(\n            strong('Definition: '), \n            as.character(metadata[index, 'definition']),\n          ),\n          tags$p(\n            strong('Source: '), \n            as.character(metadata[index, 'source'])\n          ),\n          tags$p(\n            strong('Latest Year: '), \n            as.character(metadata[index, 'latest_year'])\n          ),\n          tags$p(\n            strong('All Years (cleaned, wrangled, and included): '), \n            as.character(metadata[index, 'year'])\n          ),\n          tags$p(\n            strong('Updates: '), \n            str_to_title(as.character(metadata[index, 'updates']))\n          ),\n          tags$p(\n            strong('URL: '), \n            tags$a(\n              href = as.character(metadata[index, 'url']),\n              target = '_blank',\n              as.character(metadata[index, 'url'])\n            )\n          )\n        )\n      }\n    )\n  )\n)\n\n\n\n\n\nShow/hide more columns\n\n\n\nDownload as CSV",
    "crumbs": [
      "Refined Framework Analysis",
      "Framework"
    ]
  },
  {
    "objectID": "pages/metadata_table.html",
    "href": "pages/metadata_table.html",
    "title": "Metadata Table",
    "section": "",
    "text": "This page contains a metadata table for exploring the sources of secondary data used throughout this project.\nUsing the table:\n\nClick column headers to sort\nGlobal search in the top right, or column search in each header\nChange page length and page through results at the bottom\nUse the download button to download a .csv file of the filtered table\nClick the arrow on the left of each row for details, including a URL to the data source.\n\n\n\nCode\npacman::p_load(\n  dplyr,\n  reactable,\n  stringr,\n  htmltools\n)\n\n# Load full metadata table\nmetadata_all &lt;- readRDS('data/sm_data.rds')[['metadata']]\n\n# Pick out variables to display\nmetadata &lt;- metadata_all %&gt;% \n  select(\n    metric,\n    'Variable Name' = variable_name,\n    definition,\n    dimension,\n    index,\n    indicator,\n    units,\n    'Year' = latest_year, # Renaming latest year as year, not including og year\n    source,\n    scope,\n    resolution,\n    url\n) %&gt;% \n  setNames(c(str_to_title(names(.))))\n\n###\nhtmltools::browsable(\n  tagList(\n    \n    tags$div(\n      style = \"display: flex; gap: 16px; margin-bottom: 20px; justify-content: center;\",\n      \n      tags$button(\n        class = \"btn btn-primary\",\n        style = \"display: flex; align-items: center; gap: 8px; padding: 8px 12px;\",\n        tagList(fontawesome::fa(\"download\"), \"Show/hide more columns\"),\n        onclick = \"Reactable.setHiddenColumns('metadata_table', prevColumns =&gt; {\n          return prevColumns.length === 0 ? ['Definition', 'Scope', 'Resolution', 'Url'] : []\n        })\"\n      ),\n      \n      tags$button(\n        class = \"btn btn-primary\",\n        style = \"display: flex; align-items: center; gap: 8px; padding: 8px 12px;\",\n        tagList(fontawesome::fa(\"download\"), \"Download as CSV\"),\n        onclick = \"Reactable.downloadDataCSV('metadata_table', 'sustainability_metadata.csv')\"\n      )\n    ),\n    \n    reactable(\n      metadata,\n      sortable = TRUE,\n      resizable = TRUE,\n      filterable = TRUE,\n      searchable = TRUE,\n      pagination = TRUE,\n      bordered = TRUE,\n      wrap = TRUE,\n      rownames = FALSE,\n      onClick = 'select',\n      striped = TRUE,\n      pageSizeOptions = c(5, 10, 25, 50, 100),\n      defaultPageSize = 5,\n      showPageSizeOptions = TRUE,\n      highlight = TRUE,\n      style = list(fontSize = \"14px\"),\n      compact = TRUE,\n      fullWidth = TRUE,\n      columns = list(\n        Metric = colDef(\n          minWidth = 200,\n          sticky = 'left'\n        ),\n        'Variable Name' = colDef(\n          minWidth = 150\n        ),\n        Definition = colDef(\n          minWidth = 250\n        ),\n        'Latest Year' = colDef(minWidth = 75),\n        Source = colDef(minWidth = 250),\n        Scope = colDef(show = FALSE),\n        Resolution = colDef(show = FALSE),\n        Url = colDef(\n          minWidth = 300,\n          show = FALSE\n        )\n      ),\n      defaultColDef = colDef(minWidth = 100),\n      elementId = \"metadata_table\",\n      details = function(index) {\n        div(\n          style = \"padding: 15px; border: 1px solid #ddd; margin: 10px 0;\n             background-color: #E0EEEE; border-radius: 10px; border-color: black;\n             box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\",\n          \n          tags$h4(\n            strong(\"Details\"), \n          ),\n          tags$p(\n            strong('Metric Name: '), \n            as.character(metadata_all[index, 'metric']),\n          ),\n          tags$p(\n            strong('Variable Name: '), \n            as.character(metadata_all[index, 'variable_name']),\n          ),\n          tags$p(\n            strong('Definition: '), \n            as.character(metadata_all[index, 'definition']),\n          ),\n          tags$p(\n            strong('Source: '), \n            as.character(metadata_all[index, 'source'])\n          ),\n          tags$p(\n            strong('Latest Year: '), \n            as.character(metadata_all[index, 'latest_year'])\n          ),\n          tags$p(\n            strong('All Years (cleaned, wrangled, and included): '), \n            as.character(metadata_all[index, 'year'])\n          ),\n          tags$p(\n            strong('Updates: '), \n            str_to_title(as.character(metadata_all[index, 'updates']))\n          ),\n          tags$p(\n            strong('URL: '), \n            tags$a(\n              href = as.character(metadata_all[index, 'url']),\n              target = '_blank',\n              as.character(metadata_all[index, 'url'])\n            )\n          )\n        )\n      }\n    )\n  )\n)\n\n\n\n\n\nShow/hide more columns\n\n\n\nDownload as CSV\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Secondary Data",
      "Metadata"
    ]
  },
  {
    "objectID": "pages/data_environment_overview.html",
    "href": "pages/data_environment_overview.html",
    "title": "Environment: Overview",
    "section": "",
    "text": "The first plot shows all the environment indicators from both the current studies and the original framework in the y-axis. Purple indicates that the indicator is only being used in the current studies, orange that it is only included in the Wiltshire framework, and green that the indicator is used in both the framework and current studies.\nThe x-axis shows the number of secondary data metrics that have been collected to represent those indicators. You can see that there are some indicators for which there exist many data, but many indicators for which I have found little to represent them.\nNASS figures are used to cover on-farm water use, energy efficiency, and acres in conservation practices. I used the National Aquatic Resource Surveys aggregated at the state level to measure water quality. Land use diversity is pretty well represented by Multi-Resolution Land Characteristics LULC layers, which I also aggregated at the county level. Greenhouse gas emissions come from EPA figures by state, broken down by economic sector. Finally, the USFS TreeMap dataset accounts for aboveground biomass and would do reasonably well in tree vigor. There is more to pull out here than I have so far.\nOtherwise, if anyone has ideas for secondary datasets to cover the rest of the indicators, please do let me know.\nCode\npacman::p_load(\n  dplyr,\n  ggplot2,\n  stringr,\n  plotly,\n  RColorBrewer\n)\n\n## Load data for tree and metrics\nenv_tree &lt;- readRDS('data/trees/env_tree.rds')\n\nmeta &lt;- readRDS('data/sm_data.rds')[['metadata']] %&gt;% \n  filter(dimension == 'environment')\n\n# Format to match Wiltshire framework\nmeta &lt;- meta %&gt;% \n  mutate(\n    indicator = str_to_sentence(indicator),\n    indicator = case_when(\n      str_detect(indicator, '^Above') ~ 'Aboveground biomass',\n      str_detect(indicator, '^Water') ~ 'Water use / irrigation efficiency',\n      TRUE ~ indicator\n    )\n  ) \n\n# Counts of secondary data metrics\ncounts &lt;- meta %&gt;% \n  group_by(indicator) %&gt;% \n  dplyr::summarize(count = n())\n\n# Join to Wiltshire framework\ncolors &lt;- RColorBrewer::brewer.pal(n = 3, name = 'Dark2')\ndat &lt;- full_join(env_tree, counts, by = join_by(Indicator == indicator)) %&gt;% \n  mutate(\n    count = ifelse(is.na(count), 0, count),\n    label_color = case_when(\n      Use == 'both' ~ colors[1],\n      Use == 'wiltshire_only' ~ colors[2],\n      Use == 'current_only' ~ colors[3]\n    )\n  )\n\n# Plot\ndat %&gt;%\n  ggplot(aes(x = Indicator, y = count)) +\n  geom_col(\n    color = 'black',\n    fill = 'grey'\n  ) +\n  geom_point(\n    data = dat,\n    aes(x = 1, y = 1, color = Use),\n    inherit.aes = FALSE,\n    alpha = 0,\n    size = -1\n  ) +\n  scale_color_manual(\n    name = \"Indicator Use:\",\n    values = c(\n      \"both\" = colors[1],\n      \"current_only\" = colors[3],\n      \"wiltshire_only\" = colors[2]\n    ),\n    labels = c(\n      'Both',\n      'Current Only',\n      'Framework Only'\n    )\n  ) +\n  theme_classic() +\n  theme(\n    axis.text = element_text(size = 12),\n    axis.text.y = element_text(color = dat$label_color),\n    axis.title = element_text(size = 14),\n    legend.text = element_text(size = 12),\n    legend.title = element_text(size = 12),\n    legend.position = \"bottom\",\n    plot.margin = margin(t = 10, r = 75, b = 10, l = 10)\n  ) +\n  guides(\n    color = guide_legend(override.aes = list(size = 4, alpha = 1))\n  ) +\n  coord_flip() +\n  labs(y = 'Secondary Data Count')"
  },
  {
    "objectID": "pages/data_environment_overview.html#distribution-plots",
    "href": "pages/data_environment_overview.html#distribution-plots",
    "title": "Environment: Overview",
    "section": "1 Distribution Plots",
    "text": "1 Distribution Plots\n\n1.1 By County\nNote that while most of the available secondary data is at the county level, the environment dimension includes a fair amount at the state level as well. This includes greenhouse gas emissions and water quality surveys. For now, I’ll just show these separately, but some creative aggregation will have to happen eventually.\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  ggplot2,\n  rlang,\n  ggpubr,\n  tidyr\n)\nsource('dev/data_pipeline_functions.R')\nsource('dev/filter_fips.R')\nmetrics &lt;- readRDS('data/sm_data.rds')[['metrics']]\nmetadata &lt;- readRDS('data/sm_data.rds')[['metadata']]\n\n# Use metadata to get help filter by dimension\nenv_meta &lt;- metadata %&gt;%\n  filter(dimension == 'environment')\n\n# Filter to economics dimension\nenv_metrics &lt;- metrics %&gt;%\n  filter(variable_name %in% env_meta$variable_name)\n\n# env_metrics$variable_name %&gt;% unique\n# get_str(env_metrics)\n\n# Filter to latest year and new (post-2024) counties\n# And pivot wider so it is easier to get correlations\nenv_county &lt;- env_metrics %&gt;%\n  filter_fips(scope = 'counties') %&gt;%\n  get_latest_year() %&gt;%\n  select(fips, variable_name, value) %&gt;%\n  mutate(variable_name = str_split_i(variable_name, '_', 1)) %&gt;%\n  pivot_wider(\n    names_from = 'variable_name',\n    values_from = 'value'\n  ) %&gt;%\n  unnest(!fips) %&gt;%\n  mutate(across(c(2:last_col()), as.numeric))\n\n# Save temp file for use in analysis script\nsaveRDS(env_county, 'data/temp/env_county.rds')\n\n## Plot\nplots &lt;- map(names(env_county)[-1], \\(var){\n  if (is.character(env_county[[var]])) {\n    env_county %&gt;%\n      ggplot(aes(x = !!sym(var))) +\n      geom_bar(\n        fill = 'lightblue',\n        color = 'royalblue',\n        alpha = 0.5\n      ) +\n      theme_classic() +\n      theme(plot.margin = unit(c(rep(0.5, 4)), 'cm'))\n  } else if (is.numeric(env_county[[var]])) {\n    env_county %&gt;%\n      ggplot(aes(x = !!sym(var))) +\n      geom_density(\n        fill = 'lightblue',\n        color = 'royalblue',\n        alpha = 0.5\n      ) +\n      theme_classic() +\n      theme(plot.margin = unit(c(rep(0.5, 4)), 'cm'))\n  } else {\n    return(NULL)\n  }\n})\n\n\n# Arrange them in 4 columns\nggarrange(\n  plotlist = plots,\n  ncol = 4,\n  nrow = 11\n)\n\n\n\n\n1.2 By State\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  ggplot2,\n  rlang,\n  ggpubr,\n  tidyr,\n  stringr\n)\n\nconflicted::conflicts_prefer(\n  dplyr::select(),\n  dplyr::mutate(),\n  dplyr::summarize(),\n  dplyr::rename(),\n  .quiet = TRUE\n)\n\nstate_codes &lt;- readRDS('data/sm_data.rds')[['fips_key']] %&gt;%\n  dplyr::select(fips, state_code)\n\nenv_state &lt;- env_metrics %&gt;%\n  filter_fips(scope = 'states') %&gt;%\n  get_latest_year() %&gt;%\n  dplyr::select(fips, variable_name, value) %&gt;%\n  dplyr::mutate(variable_name = stringr::str_split_i(variable_name, '_', 1)) %&gt;% \n  tidyr::complete(fips, variable_name) %&gt;% \n  tidyr::pivot_wider(\n    id_cols = fips,\n    names_from = 'variable_name',\n    values_from = 'value'\n  ) %&gt;% \n  dplyr::left_join(state_codes, by = 'fips') %&gt;% \n  dplyr::mutate(across(!c(fips, state_code), as.numeric))\n\n# Save temp data file for use in analysis script\nsaveRDS(env_state, 'data/temp/env_state.rds')\n\n# Variables to map. Take out some that didn't come through well.\nvars &lt;- names(env_state)[-1] %&gt;%\n  stringr::str_subset(\n    'lakesAcidCond|lakesCylsperEpaCond|lakesMicxEpaCond|state_code|waterIrrSrcOffFarmExp|waterIrrReclaimedAcreFt|waterIrrReclaimedOpenAcres',\n    negate = TRUE\n  ) %&gt;% \n  stringr::str_subset('^CH4(?!FromAg)|^N2O(?!FromAg)|^CO2(?!FromAg)|^SubSector', negate = TRUE)\n\n## Plot\nstate_plots &lt;- purrr::map(vars, \\(var){\n  env_state %&gt;%\n    ggplot(aes(y = !!sym(var), x = state_code, color = state_code)) +\n    geom_point(\n      alpha = 0.5,\n      size = 3\n    ) +\n    theme_classic() +\n    theme(\n      plot.margin = unit(c(rep(0.5, 4)), 'cm'),\n      legend.position = 'none'\n    ) +\n    labs(\n      x = 'State'\n    )\n})\n\n# Arrange them in 4 columns\nggpubr::ggarrange(\n  plotlist = state_plots,\n  ncol = 4,\n  nrow = 22\n)"
  },
  {
    "objectID": "pages/data_environment_overview.html#bivariate-plots",
    "href": "pages/data_environment_overview.html#bivariate-plots",
    "title": "Environment: Overview",
    "section": "2 Bivariate Plots",
    "text": "2 Bivariate Plots\nUsing a selection of variables at the county level. The variable names are a bit hard to fit in here, but from left to right across the top they are LULC diversity, mean live above-ground forest biomass, conservation income per farm, conservatino easement acres per farm, conservation tillage: no-till acres per farm, conservation tillage: excluding no-till acres per farm, and cover cropping: excluding CRP acres per farm.\n\n\nCode\npacman::p_load(\n  GGally\n)\n\n# Neat function for mapping colors to ggpairs plots\n# https://stackoverflow.com/questions/45873483/ggpairs-plot-with-heatmap-of-correlation-values\nmap_colors &lt;- function(data,\n                       mapping,\n                       method = \"p\",\n                       use = \"pairwise\",\n                       ...) {\n  # grab data\n  x &lt;- eval_data_col(data, mapping$x)\n  y &lt;- eval_data_col(data, mapping$y)\n\n  # calculate correlation\n  corr &lt;- cor(x, y, method = method, use = use)\n  colFn &lt;- colorRampPalette(c(\"blue\", \"white\", \"red\"), interpolate = 'spline')\n  fill &lt;- colFn(100)[findInterval(corr, seq(-1, 1, length = 100))]\n\n  # correlation plot\n  ggally_cor(data = data, mapping = mapping, color = 'black', ...) +\n    theme_void() +\n    theme(panel.background = element_rect(fill = fill))\n}\n\nlower_function &lt;- function(data, mapping, ...) {\n  ggplot(data = data, mapping = mapping) +\n    geom_point(alpha = 0.5) +\n    geom_smooth(color = \"blue\", fill = \"grey\", ...) +\n    theme_bw()\n}\n\n# Rename variables to be shorter\nenv_county %&gt;%\n  select(\n    LULC = lulcDiversity,\n    # Biomass = meanAboveGrndForBiomass,\n    consIncomePF,\n    consEasementAcresPF,\n    consTillNoTillAcresPF,\n    consTillExclNoTillAcresPF,\n    coverCropExclCrpAcresPF\n  ) %&gt;%\n  ggpairs(\n    upper = list(continuous = map_colors),\n    lower = list(continuous = lower_function),\n    axisLabels = 'show'\n  ) +\n  theme(\n    strip.text = element_text(size = 5),\n    axis.text = element_text(size = 5),\n    legend.text = element_text(size = 5)\n  )\n\n\nIt looks like there are a few non-linear relationships, conservation income per farm in particular, but for the most part, linear relationships do a decent job here."
  },
  {
    "objectID": "pages/data_environment_overview.html#sec-correlations",
    "href": "pages/data_environment_overview.html#sec-correlations",
    "title": "Environment: Overview",
    "section": "3 Correlations",
    "text": "3 Correlations\nOnly showing correlations by county because we don’t have enough observations to run it by state.\n\n\nCode\npacman::p_load(\n  dplyr,\n  tidyr,\n  tibble,\n  stringr,\n  purrr,\n  tidyr,\n  ggplot2,\n  plotly,\n  reshape,\n  Hmisc,\n  viridisLite\n)\n\n# get_str(env_county)\n\ncor &lt;- env_county %&gt;%\n  select(-fips) %&gt;%\n  as.matrix() %&gt;%\n  rcorr()\n\n# Melt correlation values and rename columns\ncor_r &lt;- melt(cor$r) %&gt;%\n  setNames(c('var_1', 'var_2', 'value'))\n\n# Save p values\ncor_p &lt;- melt(cor$P)\np.value &lt;- cor_p$value\n\n# Make heatmap with custom text aesthetic for tooltip\nplot &lt;- cor_r %&gt;%\n  ggplot(aes(var_1, var_2, fill = value, text = paste0(\n    'Var 1: ', var_1, '\\n',\n    'Var 2: ', var_2, '\\n',\n    'Correlation: ', format(round(value, 3), nsmall = 3), '\\n',\n    'P-Value: ', format(round(p.value, 3), nsmall = 3)\n  ))) +\n  geom_tile() +\n  scale_fill_viridis_c() +\n  theme(axis.text.x = element_text(hjust = 1, angle = 45)) +\n  labs(\n    x = NULL,\n    y = NULL,\n    fill = 'Correlation'\n  )\n\n# Convert to interactive plotly figure with text tooltip\nggplotly(\n  plot,\n  tooltip = 'text',\n  width = 1000,\n  height = 800\n)"
  },
  {
    "objectID": "pages/data_environment_analysis.html",
    "href": "pages/data_environment_analysis.html",
    "title": "Environment: Analysis",
    "section": "",
    "text": "This section will serve as a first pass at using some methods in the literature to aggregate metrics. I should say at the start that we have a pretty narrow selection of metrics to work with so far, which do not do a great job at capturing the breadth of the dimension. I’m also working with just the county-level data here. This provides some opportunities to use data-driven analyses like PCA, but it is worth noting that these will not get us to the holistic, system-wide measurements of sustainability we are after without including some normative judgments as to how to combine geographic areas as well as our five dimensions. So, let’s just go through the motions here, see how the process unfolds, and note anything worth digging into more down the road."
  },
  {
    "objectID": "pages/data_environment_analysis.html#imputation",
    "href": "pages/data_environment_analysis.html#imputation",
    "title": "Environment: Analysis",
    "section": "1 Imputation",
    "text": "1 Imputation\nPCA requires complete data, so we either have to impute, delete, or use PPCA. I’m choosing to impute with missing forest here as it is pretty good at handling MAR and non-linear data, but PPCA is certainly worth exploring.\n\n\nCode\npacman::p_load(\n  missForest,\n  tibble\n)\nsource('dev/filter_fips.R')\nenv_county &lt;- readRDS('data/temp/env_county.rds')\n\n# Wrangle dataset. Need all numeric vars or factor vars. And can't be tibble\n# Also removing character vars - can't use these in PCA\n# Using old Connecticut counties - some lulc data is missing for them though\ndat &lt;- env_county %&gt;%\n  filter_fips('old') %&gt;%\n  select(fips, where(is.numeric)) %&gt;%\n  column_to_rownames('fips') %&gt;%\n  as.data.frame()\n# get_str(dat)\n# skimr::skim(dat)\n\n# Remove variables with most missing data - too much to impute.\n# Also remove the proportional LULC values - keeping diversity though\ndat &lt;- dat %&gt;%\n  select(-matches('consIncome'), -matches('^lulcProp'))\n\n# Impute missing variables\nset.seed(42)\nmf_out &lt;- dat %&gt;%\n  missForest(\n    ntree = 200,\n    mtry = 10,\n    verbose = FALSE,\n    variablewise = FALSE\n  )\n\n# Save imputed dataset\nimp &lt;- mf_out$ximp\n\n# Print OOB\nmf_out$OOBerror"
  },
  {
    "objectID": "pages/data_environment_analysis.html#standardization",
    "href": "pages/data_environment_analysis.html#standardization",
    "title": "Environment: Analysis",
    "section": "2 Standardization",
    "text": "2 Standardization\nCentering and scaling to give every variable a mean of 0 and SD of 1.\n\n\nCode\ndat &lt;- map_dfc(imp, ~ scale(.x, center = TRUE, scale = TRUE))\n\n\nNow that we have standardized variables, we have to make normative decisions about what constitutes a good or bad value. This will certainly be a collaborative process where we seek input from teams to come to some kind of consensus once we have primary data. But until then, I’m going to make some heroic assumptions that LULC diversity is good, above ground forest biomass is good, conservation practices and easements are good, and fertilizer expenses are bad. Open to thoughts here as always.\nWith that, we can recode our normalized variables accordingly.\n\n\nCode\nnormed &lt;- dat %&gt;%\n  mutate(across(c(matches('^fert')), ~ -.x))"
  },
  {
    "objectID": "pages/data_environment_analysis.html#component-extraction",
    "href": "pages/data_environment_analysis.html#component-extraction",
    "title": "Environment: Analysis",
    "section": "3 Component Extraction",
    "text": "3 Component Extraction\nDetermine the number of components to extract using a few tools: very simple structure (VSS), Velicer’s minimum average partial (MAP) test, parallel analysis, and a scree plot.\n\n\nCode\npacman::p_load(\n  psych\n)\nVSS(normed)\nfa.parallel(normed)\npca_out &lt;- pca(normed, nfactors = 3, rotate = 'varimax')\nplot(pca_out$values)\nabline(h = 1)\n\n\nThis scree plot shows the eigenvalues (unit variance explained) of each principal component (y-axis) against each component (x-axis). The first few components explain lots of variance, but there is a decent elbow around the fourth component.\nVSS suggests 1 or 2, MAP suggests 8, parallel analysis shows 3. I’m going with 3 here, which will be explained further below."
  },
  {
    "objectID": "pages/data_environment_analysis.html#principal-components-analysis",
    "href": "pages/data_environment_analysis.html#principal-components-analysis",
    "title": "Environment: Analysis",
    "section": "4 Principal Components Analysis",
    "text": "4 Principal Components Analysis\nNow we let’s look run the PCA.\n\n\nCode\n(pca_out &lt;- pca(normed, nfactors = 3, rotate = 'varimax'))\n\n\nRecommendations for creating composite indices are to extract components that each have eigenvalues &gt; 1, explained variance &gt; 0.10, and such that the proportion of explained variance for the total set is &gt; 0.60 (Nicoletti 2000; OECD 2008).\nOur total cumulative variance is explained is 0.74, and our component that explains the least variance is RC4 with 0.11. Note that extracting four or more components here gives us a component with less than 0.10, so this is why we are sticking to three. The first component (RC1) explains 38% of the variance in the data. The second component is respectable at 0.26, while the third is barely above the threshold at 0.11.\nLooking at the metrics, we can see that the first component loads mostly onto the conservation practices, no-till acres, cover cropping, drainage, and total fertilizer expenses. The second component leads onto mean above-ground biomass (although there is cross-loading with the first component), operations with silvapasture, operations with easements, rotational grazing operations, and operations with fertilizer expenses. This seems to be catching more of the population-related metrics. The last component only loads onto a few metrics: easement acres, easement acres per farm, and silvapasture operations (which has some heavy cross-loading)."
  },
  {
    "objectID": "pages/data_environment_analysis.html#aggregation",
    "href": "pages/data_environment_analysis.html#aggregation",
    "title": "Environment: Analysis",
    "section": "5 Aggregation",
    "text": "5 Aggregation\nHere, we follow Nicoletti and calculate the normalized sum of square factor loadings, which represent the proportion of total unit variance of the metrics that is explained by the component.\n\n\nCode\n## Get metric weights following Nicoletti 2000\n# Pull out metric loadings\nloadings &lt;- pca_out$weights %&gt;%\n  as.data.frame()\n\n# For each set of loadings, get squares, and then normalized proportions\nsq_loadings &lt;- map(loadings, ~ .x^2)\nmetric_weights &lt;- map(sq_loadings, ~ .x / sum(.x))\nhead(as.data.frame(metric_weights))\n\n\nNow we can use these to weight metrics and aggregate them into a component score for each county.\n\n\nCode\n# Component scores for each component across each county\ncomponent_scores &lt;- map(metric_weights, \\(x) {\n  as.matrix(normed) %*% x\n}) %&gt;%\n  as.data.frame()\nhead(component_scores)\n\n\nAn alternative method here is regression scores, which are native to PCA. I’ll calculate these as well to compare to the component scores above.\n\n\nCode\n# Get regression scores from pca output\nregression_scores &lt;- as.data.frame(pca_out$scores)\nhead(regression_scores)\n\n\nRunning a correlation to see how similar they are:\n\n\nCode\ncoefs &lt;- map2_dbl(component_scores, regression_scores, \\(x, y) cor(x, y)) %&gt;%\n  round(3)\ncat(paste0(\n  'Pearson Correlation Coefficients:\\n',\n  'RC1: ', coefs[1], '\\n',\n  'RC2: ', coefs[2], '\\n',\n  'RC3: ', coefs[3]\n))\n\n\nIt looks like they are reasonably similar, although RC2 and RC3 have substantially lower correlation coefficients. It will be worth noting this and coming back to explore the differences at some point.\nFor now, let’s keep following Nicoletti and aggregate the component scores into a single variable.\n\n\nCode\nsum_sq_loadings &lt;- map_dbl(sq_loadings, ~ sum(.x))\n(factor_weights &lt;- map_dbl(sum_sq_loadings, ~ .x / (sum(sum_sq_loadings))))\n\n\nCurious that the component that accounted for the most variance is weighted the lowest. Worth doing a dive here at some point and figuring out why that is.\nWe will use these to weight each component to combine them.\n\n\nCode\ndimension_scores &lt;- component_scores %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    dimension_score = sum(RC1, RC2, RC3),\n    across(everything(), ~ round(.x, 3))\n  ) %&gt;%\n  bind_cols(rownames(imp)) %&gt;%\n  select(fips = 5, everything())\nhead(dimension_scores)\n\n\nNow that we have all three component scores and the dimension score, let’s take a look at a map. Select the data to display with the layer button on the left.\n\n\nCode\npacman::p_load(\n  mapview,\n  leaflet,\n  leafpop\n)\nmap_dat &lt;- readRDS('data/sm_spatial.rds')[['ne_counties_2021']] %&gt;%\n  right_join(dimension_scores) %&gt;%\n  left_join(fips_key) %&gt;%\n  select(\n    fips,\n    RC1:RC3,\n    'Dimension Score' = dimension_score,\n    County = county_name,\n    State = state_name,\n    geometry\n  )\n\nmap_dat %&gt;%\n  mapview(\n    zcol = c(\n      'Dimension Score',\n      'RC1',\n      'RC2',\n      'RC3'\n    ),\n    burst = FALSE,\n    hide = c(FALSE, rep(TRUE, 3)),\n    popup = popupTable(\n      map_dat,\n      zcol = names(map_dat)[-length(map_dat)],\n      row.numbers = FALSE,\n      feature.id = FALSE\n  )\n)\n\n\nKeep in mind there are lots of caveats with this very preliminary analysis, the most egregious being a set of metrics that does not well represent the dimension it purports to measure. Missing data and various branching paths of decisions in the index scoring also deserve further scrutiny.\nStill, there is plenty to look at here as a first pass at aggregating dimension scores. The first component, RC1, was heavily influenced by the geography - it loads the strongest onto metrics measuring acres or acres per farm. I presume this is why Aroostook county shows up so high on this scale. RC2 loaded strongly onto the number of operations using various conservation practices (easements, no-till, rotational grazing). It seems to track a little bit with county size, but is highest near relatively urban areas. RC3 was most associated with conservation easement acres and easement acres per farm, and consequently seems to track with rural areas.\nI don’t think that the dimension score inspires much confidence as it is now. The weighting method for combining components is hard to interpret intuitively, and I think more expert driven normative decisions might make more sense at that point. On the bright side, it is a good expedition into the kinds of ambiguous decisions that will need to be made to aggregate this data across the whole system."
  },
  {
    "objectID": "pages/data_economics.html",
    "href": "pages/data_economics.html",
    "title": "Economics",
    "section": "",
    "text": "Shown in the diagram below are a total of 45 indicators within the economics dimension. Indices are labeled within the diagram. 17 indicators are both included in the Wiltshire et al. framework as well as being studied by one or more teams (red), 9 are included in the Wiltshire et al. but not currently belong studied (green), while 19 were not in the original framework, but have been added by one or more teams (blue).\nThe points beside each indicator name represent the number of secondary data metrics that have been aggregated for each indicator. Sources include USDA NASS, BLS, ERS, Census Bureau, and others. The quality and appropriateness of these metrics vary widely - I do not mean to suggest that having more of them means an indicator is more accurately better represented. For more information on the data sources, head to the Tables page to see metadata.\nOne other point to note here is that I removed several dozen metrics from BLS wage labor data broken down by NAICS industry code so as not to inflate that indicator relative to the others.\n\n\nCode\n## Load packages\npacman::p_load(\n  ggraph,\n  igraph,\n  dplyr,\n  RColorBrewer,\n  viridisLite,\n  ggrepel,\n  stringr\n)\n\nconflicted::conflicts_prefer(\n  dplyr::as_data_frame(),\n  .quiet = TRUE\n)\n\n## Load data for tree and metrics\ndat &lt;- readRDS('data/trees/econ_tree.rds') %&gt;% \n  select(Dimension:Source)\nmetadata_all &lt;- readRDS('data/sm_data.rds')[['metadata']]\nmeta &lt;- metadata_all %&gt;% \n  filter(\n    dimension == 'economics'\n  )\n\n# Rename metadata so it fits into formatting of tree data\n# This is quite not ideal - Note to harmonize this properly later\nmeta &lt;- meta %&gt;% \n  mutate(\n    indicator = str_to_sentence(indicator),\n    indicator = case_when(\n      str_detect(indicator, '^Assets') ~ 'Balance sheet (assets and liabilities)',\n      str_detect(indicator, '^Business failure') ~ 'Business failure rate of food business',\n      str_detect(indicator, '^Direct') ~ '% direct-to-consumer sales',\n      str_detect(indicator, '^Job avail') ~ 'Availability of good-paying jobs in food systems',\n      str_detect(indicator, '^Local sales') ~ '% local sales',\n      str_detect(indicator, '^Operator salary') ~ 'Operator salary / wage',\n      str_detect(indicator, '^Total sales') ~ 'Total sales / revenue',\n      str_detect(indicator, '^Wealth/income') ~ 'Wealth / income distribution',\n      TRUE ~ indicator\n    )\n  ) \n\n# Join counts of secondary data metrics to original dataset\n# Remove the NAICS variables - there are so many of them, don't add much\ncounts &lt;- meta %&gt;% \n  filter(str_detect(variable_name, '^lq|lvl|Lvl|Naics', negate = TRUE)) %&gt;% \n  group_by(indicator) %&gt;% \n  dplyr::summarize(count = n())\n\n\n## Make edges\n# include groupings by dimension, then combine them\nedges &lt;- list()\nedges$dim_ind &lt;- dat %&gt;% \n  select(Dimension, Index) %&gt;% \n  unique() %&gt;% \n  dplyr::rename(from = Dimension, to = Index) %&gt;% \n  mutate(group = to)\nedges$ind_ind &lt;- dat %&gt;% \n  select(Index, Indicator) %&gt;% \n  unique() %&gt;% \n  dplyr::rename(from = Index, to = Indicator) %&gt;% \n  mutate(group = from)\nedges &lt;- bind_rows(edges)\n\n# Add column for use (will use in colors of text?)\nedges$group &lt;- c(rep(NA, 10), dat$Source)\n\n\n## Make vertices\n# Each line is a single vertex (dimension, index, or indicator)\n# We are just giving them random values to control point size for now\nvertices = data.frame(\n  name = unique(c(as.character(edges$from), as.character(edges$to)))\n) %&gt;% \n  left_join(counts, by = join_by(name == indicator)) %&gt;% \n  dplyr::rename('value' = count)\n\n# Add the dimension groupings to the vertices as well\nvertices$group = edges$group[match(vertices$name, edges$to)]\n\n# Calculate the angles to arrange indicator labels\nvertices$id = NA\nmyleaves = which(is.na(match(vertices$name, edges$from)))\nnleaves = length(myleaves)\nvertices$id[myleaves] = seq(1:nleaves)\nvertices$angle = 90 - 360 * vertices$id / nleaves\n\n# Calculate alignment of indicator labels\nvertices$hjust &lt;- ifelse(vertices$angle &lt; -90, 1, 0)\n\n# Flip label angles around 180 degrees if they are facing the wrong way\nvertices$angle &lt;- ifelse(vertices$angle &lt; -90, vertices$angle + 180, vertices$angle)\n\n\n## Create graph\n# Make ggraph object from edges and vertices\ngraph &lt;- graph_from_data_frame(edges, vertices = vertices)\n\n# Plot the graph\nggraph(graph, layout = 'dendrogram', circular = TRUE) +\n  \n  # Color edges by dimension\n  geom_edge_diagonal(color = 'black', width = 0.5) +\n  \n  # Create text for indicators using angles, hjust, and dimension groupings\n  geom_node_text(\n    aes(\n      x = x * 1.15,\n      y = y * 1.15,\n      filter = leaf,\n      label = name,\n      angle = angle,\n      hjust = hjust,\n      colour = group\n    ),\n    size = 3,\n    alpha = 1\n  ) +\n  \n  # Label indices within graph\n  geom_label_repel(\n    aes(\n      x = x,\n      y = y,\n      label = ifelse(name %in% unique(dat$Index), name, NA)\n    ),\n    label.padding = unit(0.15, \"lines\"),\n    label.r = unit(0.3, \"lines\"),\n    label.size = 0.05,\n    size = 2.25,\n    force = 0.1,    \n    force_pull = 1, \n    max.overlaps = 10 \n  ) +\n  \n  # Make the points for indicators based on secondary metric count\n  geom_node_point(\n    aes(\n      filter = leaf,\n      x = x * 1.07,\n      y = y * 1.07,\n      colour = group,\n      size = value\n    ),\n    alpha = 0.4\n  ) +\n  \n  # Various formatting options\n  scale_colour_manual(values = brewer.pal(3, 'Set1')) +\n  # scale_size_continuous(range = c(0.1, 7)) +\n  theme_void() +\n  theme(\n    plot.margin = unit(c(0, 0, 0, 0), \"cm\")\n  ) +\n  scale_colour_manual(\n    name = \"Indicator Use\",\n    values = brewer.pal(3, 'Set1'),\n    labels = c(\"Both\", \"Current Only\", \"Wiltshire Only\")\n  ) +\n  expand_limits(x = c(-2.5, 2.5), y = c(-2.5, 2.5))"
  },
  {
    "objectID": "pages/data_economics.html#dimension-overview",
    "href": "pages/data_economics.html#dimension-overview",
    "title": "Economics",
    "section": "",
    "text": "Shown in the diagram below are a total of 45 indicators within the economics dimension. Indices are labeled within the diagram. 17 indicators are both included in the Wiltshire et al. framework as well as being studied by one or more teams (red), 9 are included in the Wiltshire et al. but not currently belong studied (green), while 19 were not in the original framework, but have been added by one or more teams (blue).\nThe points beside each indicator name represent the number of secondary data metrics that have been aggregated for each indicator. Sources include USDA NASS, BLS, ERS, Census Bureau, and others. The quality and appropriateness of these metrics vary widely - I do not mean to suggest that having more of them means an indicator is more accurately better represented. For more information on the data sources, head to the Tables page to see metadata.\nOne other point to note here is that I removed several dozen metrics from BLS wage labor data broken down by NAICS industry code so as not to inflate that indicator relative to the others.\n\n\nCode\n## Load packages\npacman::p_load(\n  ggraph,\n  igraph,\n  dplyr,\n  RColorBrewer,\n  viridisLite,\n  ggrepel,\n  stringr\n)\n\nconflicted::conflicts_prefer(\n  dplyr::as_data_frame(),\n  .quiet = TRUE\n)\n\n## Load data for tree and metrics\ndat &lt;- readRDS('data/trees/econ_tree.rds') %&gt;% \n  select(Dimension:Source)\nmetadata_all &lt;- readRDS('data/sm_data.rds')[['metadata']]\nmeta &lt;- metadata_all %&gt;% \n  filter(\n    dimension == 'economics'\n  )\n\n# Rename metadata so it fits into formatting of tree data\n# This is quite not ideal - Note to harmonize this properly later\nmeta &lt;- meta %&gt;% \n  mutate(\n    indicator = str_to_sentence(indicator),\n    indicator = case_when(\n      str_detect(indicator, '^Assets') ~ 'Balance sheet (assets and liabilities)',\n      str_detect(indicator, '^Business failure') ~ 'Business failure rate of food business',\n      str_detect(indicator, '^Direct') ~ '% direct-to-consumer sales',\n      str_detect(indicator, '^Job avail') ~ 'Availability of good-paying jobs in food systems',\n      str_detect(indicator, '^Local sales') ~ '% local sales',\n      str_detect(indicator, '^Operator salary') ~ 'Operator salary / wage',\n      str_detect(indicator, '^Total sales') ~ 'Total sales / revenue',\n      str_detect(indicator, '^Wealth/income') ~ 'Wealth / income distribution',\n      TRUE ~ indicator\n    )\n  ) \n\n# Join counts of secondary data metrics to original dataset\n# Remove the NAICS variables - there are so many of them, don't add much\ncounts &lt;- meta %&gt;% \n  filter(str_detect(variable_name, '^lq|lvl|Lvl|Naics', negate = TRUE)) %&gt;% \n  group_by(indicator) %&gt;% \n  dplyr::summarize(count = n())\n\n\n## Make edges\n# include groupings by dimension, then combine them\nedges &lt;- list()\nedges$dim_ind &lt;- dat %&gt;% \n  select(Dimension, Index) %&gt;% \n  unique() %&gt;% \n  dplyr::rename(from = Dimension, to = Index) %&gt;% \n  mutate(group = to)\nedges$ind_ind &lt;- dat %&gt;% \n  select(Index, Indicator) %&gt;% \n  unique() %&gt;% \n  dplyr::rename(from = Index, to = Indicator) %&gt;% \n  mutate(group = from)\nedges &lt;- bind_rows(edges)\n\n# Add column for use (will use in colors of text?)\nedges$group &lt;- c(rep(NA, 10), dat$Source)\n\n\n## Make vertices\n# Each line is a single vertex (dimension, index, or indicator)\n# We are just giving them random values to control point size for now\nvertices = data.frame(\n  name = unique(c(as.character(edges$from), as.character(edges$to)))\n) %&gt;% \n  left_join(counts, by = join_by(name == indicator)) %&gt;% \n  dplyr::rename('value' = count)\n\n# Add the dimension groupings to the vertices as well\nvertices$group = edges$group[match(vertices$name, edges$to)]\n\n# Calculate the angles to arrange indicator labels\nvertices$id = NA\nmyleaves = which(is.na(match(vertices$name, edges$from)))\nnleaves = length(myleaves)\nvertices$id[myleaves] = seq(1:nleaves)\nvertices$angle = 90 - 360 * vertices$id / nleaves\n\n# Calculate alignment of indicator labels\nvertices$hjust &lt;- ifelse(vertices$angle &lt; -90, 1, 0)\n\n# Flip label angles around 180 degrees if they are facing the wrong way\nvertices$angle &lt;- ifelse(vertices$angle &lt; -90, vertices$angle + 180, vertices$angle)\n\n\n## Create graph\n# Make ggraph object from edges and vertices\ngraph &lt;- graph_from_data_frame(edges, vertices = vertices)\n\n# Plot the graph\nggraph(graph, layout = 'dendrogram', circular = TRUE) +\n  \n  # Color edges by dimension\n  geom_edge_diagonal(color = 'black', width = 0.5) +\n  \n  # Create text for indicators using angles, hjust, and dimension groupings\n  geom_node_text(\n    aes(\n      x = x * 1.15,\n      y = y * 1.15,\n      filter = leaf,\n      label = name,\n      angle = angle,\n      hjust = hjust,\n      colour = group\n    ),\n    size = 3,\n    alpha = 1\n  ) +\n  \n  # Label indices within graph\n  geom_label_repel(\n    aes(\n      x = x,\n      y = y,\n      label = ifelse(name %in% unique(dat$Index), name, NA)\n    ),\n    label.padding = unit(0.15, \"lines\"),\n    label.r = unit(0.3, \"lines\"),\n    label.size = 0.05,\n    size = 2.25,\n    force = 0.1,    \n    force_pull = 1, \n    max.overlaps = 10 \n  ) +\n  \n  # Make the points for indicators based on secondary metric count\n  geom_node_point(\n    aes(\n      filter = leaf,\n      x = x * 1.07,\n      y = y * 1.07,\n      colour = group,\n      size = value\n    ),\n    alpha = 0.4\n  ) +\n  \n  # Various formatting options\n  scale_colour_manual(values = brewer.pal(3, 'Set1')) +\n  # scale_size_continuous(range = c(0.1, 7)) +\n  theme_void() +\n  theme(\n    plot.margin = unit(c(0, 0, 0, 0), \"cm\")\n  ) +\n  scale_colour_manual(\n    name = \"Indicator Use\",\n    values = brewer.pal(3, 'Set1'),\n    labels = c(\"Both\", \"Current Only\", \"Wiltshire Only\")\n  ) +\n  expand_limits(x = c(-2.5, 2.5), y = c(-2.5, 2.5))"
  },
  {
    "objectID": "pages/data_economics.html#distributions",
    "href": "pages/data_economics.html#distributions",
    "title": "Economics",
    "section": "2 Distributions",
    "text": "2 Distributions\nWe are taking out the abundant but largely redundant BLS NAICS wage data variables to leave us with a more approachable set of 46 variables to explore here. First just show univariate distributions by county.\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  ggplot2,\n  rlang,\n  ggpubr,\n  tidyr\n)\n\nsource('dev/data_pipeline_functions.R')\nsource('dev/filter_fips.R')\nmetrics &lt;- readRDS('data/sm_data.rds')[['metrics']]\nmetadata &lt;- readRDS('data/sm_data.rds')[['metadata']]\n\n# Use metadata to get help filter by dimension\necon_meta &lt;- metadata %&gt;% \n  filter(dimension == 'economics')\n\n# Filter to economics dimension\necon_metrics &lt;- metrics %&gt;% \n  filter(variable_name %in% econ_meta$variable_name)\n\n# Filter to latest year and new (post-2024) counties\n# Also remove NAICS variables to leave us with an approachable number\n# And pivot wider so it is easier to get correlations\necon_metrics_latest &lt;- econ_metrics %&gt;%\n  filter_fips(scope = 'new') %&gt;% \n  get_latest_year() %&gt;% \n  filter(\n    str_detect(\n      variable_name, \n      'Naics|NAICS|^lq|^avgEmpLvl|expHiredLaborPercOpExp', \n      negate = TRUE\n    )\n  )\n\n# Pivot wider for easier correlations below\necon_metrics_latest &lt;- econ_metrics_latest %&gt;% \n  select(fips, variable_name, value) %&gt;% \n  unique() %&gt;% \n  mutate(variable_name = str_split_i(variable_name, '_', 1)) %&gt;% \n  pivot_wider(\n    names_from = 'variable_name',\n    values_from = 'value'\n  ) %&gt;% \n  unnest(!fips) %&gt;% \n  mutate(across(c(civLaborForce:last_col()), as.numeric))\n\n\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  ggplot2,\n  rlang,\n  ggpubr,\n  tidyr\n)\n\nplots &lt;- map(names(econ_metrics_latest)[-1], \\(var){\n  if (is.character(econ_metrics_latest[[var]])) {\n    econ_metrics_latest %&gt;% \n      ggplot(aes(x = !!sym(var))) + \n      geom_bar(\n        fill = 'lightblue',\n        color = 'royalblue',\n        alpha = 0.5\n      ) +\n      theme_classic() +\n      theme(plot.margin = unit(c(rep(0.5, 4)), 'cm'))\n  } else if (is.numeric(econ_metrics_latest[[var]])) {\n    econ_metrics_latest %&gt;% \n      ggplot(aes(x = !!sym(var))) + \n      geom_density(\n        fill = 'lightblue',\n        color = 'royalblue',\n        alpha = 0.5\n      ) +\n      theme_classic() +\n      theme(plot.margin = unit(c(rep(0.5, 4)), 'cm'))\n  } else {\n    return(NULL)\n  }\n}) \n\n# Arrange them in 4 columns\nggarrange(\n  plotlist = plots,\n  ncol = 4,\n  nrow = 12\n)"
  },
  {
    "objectID": "pages/data_economics.html#correlation-heatmap",
    "href": "pages/data_economics.html#correlation-heatmap",
    "title": "Economics",
    "section": "3 Correlation Heatmap",
    "text": "3 Correlation Heatmap\nThrowing those same variables into a correlation matrix. Hover to see variable names, Pearson correlation, and p-values.\n\n\nCode\npacman::p_load(\n  dplyr,\n  tidyr,\n  tibble,\n  stringr,\n  purrr,\n  tidyr,\n  ggplot2,\n  plotly,\n  reshape,\n  Hmisc,\n  viridisLite\n)\n\n# Arrange variables in some halfway reasonable order\ncor_dat &lt;- econ_metrics_latest %&gt;% \n  select(\n    matches('Code_|metro'),\n    matches('employ|abor|Worker'),\n    matches('Sales'),\n    matches('Earn|Income'),\n    everything(),\n    -fips,\n    -matches('expHiredLaborPercOpExp') # This one didn't come through\n  )\n\n# Make a correlation matrix using all the selected variables\ncor &lt;- cor_dat %&gt;% \n  as.matrix() %&gt;% \n  rcorr()\n\n# Melt correlation values and rename columns\ncor_r &lt;- melt(cor$r) %&gt;% \n  setNames(c('var_1', 'var_2', 'value'))\n\n# Save p values\ncor_p &lt;- melt(cor$P)\np.value &lt;- cor_p$value\n\n# Make heatmap with custom text aesthetic for tooltip\nplot &lt;- cor_r %&gt;% \n  ggplot(aes(var_1, var_2, fill = value, text = paste0(\n    'Var 1: ', var_1, '\\n',\n    'Var 2: ', var_2, '\\n',\n    'Correlation: ', format(round(value, 3), nsmall = 3), '\\n',\n    'P-Value: ', format(round(p.value, 3), nsmall = 3)\n  ))) + \n  geom_tile() + \n  scale_fill_viridis_c() + \n  theme(axis.text.x = element_text(hjust = 1, angle = 45)) +\n  labs(\n    x = NULL,\n    y = NULL,\n    fill = 'Correlation'\n  )\n\n# Convert to interactive plotly figure with text tooltip\nggplotly(\n  plot, \n  tooltip = 'text',\n  width = 1000,\n  height = 800\n)"
  },
  {
    "objectID": "pages/data_economics.html#pca",
    "href": "pages/data_economics.html#pca",
    "title": "Economics",
    "section": "4 PCA",
    "text": "4 PCA\nPCA is a popular tool in this area for exploring unique variation with many collinear variables. It is a way to reduce the dimensionality of the data into fewer, more interpretable principal components.\nIt also requires complete data, which we do not have. So we either have to run a probabililistic PCA or run imputations. I’m using a random forest algorithm to impute data here as a first pass (Stekhoven and Bühlmann 2012). This really warrants a deeper dive into the type and severity of missingness though, and PPCA is likely the better option in the end.\n\n\nCode\npacman::p_load(\n  missForest\n)\n\n# Wrangle dataset. Need all numeric vars or factor vars. And can't be tibble\n# Also removing character vars - can't use these in PCA\ndat &lt;- econ_metrics_latest %&gt;%\n  select(where(is.numeric)) %&gt;%\n  as.data.frame()\n# get_str(dat)\n\n# Check missing variables\n# skimr::skim(dat)\n\n# Impute missing variables\nset.seed(42)\nmf_out &lt;- dat %&gt;%\n  missForest(\n    ntree = 200,\n    mtry = 10,\n    verbose = FALSE,\n    variablewise = FALSE\n  )\n\n# Save imputed dataset\nimp &lt;- mf_out$ximp\n\n# Print OOB\nmf_out$OOBerror\n\n\nOut of bag error is shown as normalized root mean square error. Now we can explore how many composite factors is appropriate for the data.\n\n\nCode\npacman::p_load(\n  psych\n)\nVSS(imp)\nfa.parallel(imp)\n\n\nVSS gives a wide range from 2 to 8, MAP shows 7, parallel analysis shows 4. I tend to trust PA the most, so let’s go with 4.\n\n\nCode\n(pca_out &lt;- pca(imp, nfactors = 4))\n\nplot(pca_out$values)\nabline(h = 1)\n\n\nFrom the scree plot and eigenvalues it looks like the first three components bear lots of unique variance, but after that there is no clear elbow where a qualitative decision can be made to choose a certain number of components. The Kaiser-Guttman rule suggests keeping any compents with an eigenvalue &gt; 1 (at the horizontal line), but we can see here that this is a rather dubious distinction.\nIf we look at the output from the PCA call, we can see how closely each variable (row) correlates with each component (columns 1-4). The variables most associated with Component #1 are the farm labor variables - numbers of workers, labor expenses, etc. They also tend to be raw figures, and probably have more to do with population than anything else. Component #2 is made up mostly of generic employment figures - total civilian labor force, total employed, total unemployed. These are not specific to food systems. Component #3 has a curious collection of median earnings variables and ‘per farm’ variables like acres per farm, income per farm, and local and direct-to-consumer sales. Component #4 does not represent much unique variance, and loooks like a grab bag of variables.\nA couple of early takeaways here are that the raw figures that are tied to population probably shouldn’t be mixed with other variables like proportions. We could try normalizing all the variables so that raw variables are not disproportionately weighted. But it might make more sense to avoid raw counts and dollar amounts entirely."
  },
  {
    "objectID": "pages/data_environment_maps.html",
    "href": "pages/data_environment_maps.html",
    "title": "Environment: Maps",
    "section": "",
    "text": "Taking a quick tour through some of the spatial data here. Most of these metrics will also be available to peruse on the Shiny app, with the exception of those that are hard to aggregate, like biodiversity hotspots."
  },
  {
    "objectID": "pages/data_environment_maps.html#land-use",
    "href": "pages/data_environment_maps.html#land-use",
    "title": "Environment: Maps",
    "section": "1 Land Use",
    "text": "1 Land Use\nThis is the MRLC 30m LULC layer from 2023. Below the map, you can find a table with codes and descriptions. Sort or expand to see all the values.\n\n\nCode\nlulc &lt;- readRDS('data/sm_data.rds')[['mrlc_lulc_ne']]\n# sm_data &lt;- readRDS('data/sm_data.rds')\ncounties &lt;- readRDS('data/sm_data.rds')[['ne_counties_2024']]\n\nlulc_map &lt;- lulc %&gt;% \n  mapview(\n    layer.name = 'LULC'\n  ) + \n  mapview(\n    counties,\n    alpha.regions = 0,\n    color = 'black',\n    col.regions = 'black',\n    lwd = 1.25,\n    layer.name = 'Counties'\n  )\n\nlulc_map@map %&gt;% \n  addFullscreenControl()\n\n\n\n\nCode\npacman::p_load(\n  reactable,\n  dplyr,\n  stringr\n)\n\nmeta &lt;- readRDS('data/sm_data.rds')[['metadata']]\n\nlulc_codes &lt;- meta %&gt;% \n  filter(\n    str_detect(variable_name, '^lulc'),\n    str_detect(variable_name, 'NoData|Diversity', negate = TRUE)\n  ) %&gt;% \n  select(definition) %&gt;% \n  mutate(\n    Value = c(11, 12, 21, 22, 23, 24, 31, 41, 42, 43, 52, 71, 81, 82, 90, 95),\n    Class = c(\n      rep('Water', 2),\n      rep('Developed', 4),\n      'Barren',\n      rep('Forest', 3),\n      'Shrubland',\n      'Herbaceous',\n      rep('Planted/Cultivated', 2),\n      rep('Wetlands', 2)\n    ),\n    Type = c(\n      'Open Water',\n      'Ice or Snow',\n      'Developed, Open Space',\n      'Developed, Low Intensity',\n      'Developed, Medium Intensity',\n      'Developed, High Intensity',\n      'Barren Land (Rock / Sand / Clay)',\n      'Deciduous Forest',\n      'Evergreen Forest',\n      'Mixed Forest',\n      'Shrub / Scrub',\n      'Grassland / Herbaceous',\n      'Pasture / Hay',\n      'Cultivated Crops',\n      'Woody Wetlands',\n      'Emergent Herbaceous Wetlands'\n    )\n  ) %&gt;% \n  select(\n    Value,\n    Class,\n    Type,\n    Description = definition\n  )\n\nreactable(\n  lulc_codes,\n  sortable = TRUE,\n  resizable = TRUE,\n  filterable = TRUE,\n  searchable = FALSE,\n  pagination = TRUE,\n  bordered = TRUE,\n  wrap = TRUE,\n  rownames = FALSE,\n  striped = TRUE,\n  defaultPageSize = 5,\n  showPageSizeOptions = FALSE,\n  highlight = TRUE,\n  style = list(fontSize = \"14px\"),\n  compact = TRUE,\n  columns = list(\n    Value = colDef(minWidth = 40),\n    Class = colDef(minWidth = 100),\n    Type = colDef(minWidth = 100),\n    Description = colDef(minWidth = 500)\n  )\n)"
  },
  {
    "objectID": "pages/data_environment_maps.html#land-use-diversity",
    "href": "pages/data_environment_maps.html#land-use-diversity",
    "title": "Environment: Maps",
    "section": "2 Land Use Diversity",
    "text": "2 Land Use Diversity\nLULC Diversity is derived from the MRLC LULC layer above. LULC types are aggregated by category (water, developed, barren, forest, shrubland, herbaceous, cultivated, wetlands) and Shannon diversity is calculated for each county. It makes for an interesting metric, but I’m not sure it makes for a strong normative metric. If anyone has thoughts on what the “right” amount of LULC diversity is, I’d love to hear from you.\n\n\nCode\ndiv &lt;- readRDS('data/sm_data.rds')[['lulc_div']]\n\ndiv_map &lt;- mapview(\n  div,\n  zcol = 'lulc_div',\n  label = 'county_name',\n  layer.name = 'LULC Diversity',\n  popup = popupTable(\n    div,\n    zcol = c(\n      'county_name',\n      'lulc_div'\n    ),\n    row.numbers = FALSE,\n    feature.id = FALSE\n  )\n)\n\ndiv_map@map %&gt;% \n  addFullscreenControl()"
  },
  {
    "objectID": "pages/data_environment_maps.html#rare-threatened-and-endangered-species",
    "href": "pages/data_environment_maps.html#rare-threatened-and-endangered-species",
    "title": "Environment: Maps",
    "section": "3 Rare, Threatened and Endangered Species",
    "text": "3 Rare, Threatened and Endangered Species\nThe Vermont ANR Biofinder has lots of great layers. Technical abstracts for these layers can be found here. Below is a map of rare, threatened, and endangered species polygons statewide. Note that these are lumped together into a multi-polygon to save some space, but the individual polygons didn’t provide a whole lot useful information anyway.\n\n\nCode\npacman::p_load(\n  mapview,\n  leaflet.extras,\n  sf\n)\nrte &lt;- readRDS('data/sm_data.rds')[['biofinder_rte_spp']] %&gt;% \n  summarize()\nrte_map &lt;- mapview(\n  rte,\n  layer.name = 'RTE Species',\n  col.regions = '#154734'\n)\nrte_map@map %&gt;%\n  addFullscreenControl()"
  },
  {
    "objectID": "pages/data_environment_maps.html#uncommon-species",
    "href": "pages/data_environment_maps.html#uncommon-species",
    "title": "Environment: Maps",
    "section": "4 Uncommon Species",
    "text": "4 Uncommon Species\nBiofinder also lists uncommon species as those facing a “moderate risk of extinction or extirpation due to restricted range, relatively few populations (often 80 or fewer), recent widespread declines, and other factors.” Same as above, these are lumped together into a single polygon for convenience.\n\n\nCode\nuncommon &lt;- readRDS('data/sm_data.rds')[['biofinder_uncommon_spp']] %&gt;% \n  summarize()\nuncommon_map &lt;- mapview(\n  uncommon,\n  layer.name = 'Uncommon Species',\n  col.regions = '#154734'\n)\nuncommon_map@map %&gt;%\n  addFullscreenControl()"
  },
  {
    "objectID": "pages/data_environment_maps.html#forest-biomass",
    "href": "pages/data_environment_maps.html#forest-biomass",
    "title": "Environment: Maps",
    "section": "5 Forest Biomass",
    "text": "5 Forest Biomass\nThe TreeMap 2016 dataset is quite comprehensive national survey of forest health and diversity. Updates are infrequent, but this is the best layer I’ve found to address biomass. The raster is at 30m.\n\n\nCode\ntreemap &lt;- readRDS('data/sm_data.rds')[['treemap_biomass']]\ncounties &lt;- readRDS('data/sm_data.rds')[['ne_counties_2024']]\n\ntreemap_map &lt;- treemap %&gt;%\n  mapview(\n    layer.name = 'Biomass (tons per acre)',\n    col.regions = viridis(n = 256)\n  ) +\n  mapview(\n    counties,\n    alpha.regions = 0,\n    color = 'black',\n    col.regions = 'black',\n    lwd = 1.25,\n    layer.name = 'Counties'\n  )\ntreemap_map@map %&gt;%\n  addFullscreenControl()\n\n\nShown below is the mean live above-ground biomass aggregated by county so that it plays well with other metrics. Note that it is measured in tons per acre of forest, non-forest cells were removed from analysis. So, it is not showing density of forest, just biomass in existing forest. This is why the more urban counties still show a reasonable density of live biomass. There is lots more that can be pulled out of this dataset, like dead/down carbon, tree stocking, live canopy cover, height, volume, tree per acre, etc. More info can be found here.\n\n\nCode\npacman::p_load(\n  mapview,\n  dplyr,\n  sf,\n  viridisLite,\n  leaflet,\n  leafpop,\n  stars\n)\n\nbiomass &lt;- readRDS('data/sm_data.rds')[['mean_biomass']]\nbiomass_map &lt;- mapview(\n  biomass,\n  zcol = 'mean_biomass',\n  layer.name = 'Mean Live Above&lt;br&gt;Ground Biomass&lt;br&gt;(tons per acre)',\n  label = 'county_name',\n  popup = popupTable(\n    biomass,\n    zcol = c(\n      'county_name',\n      'mean_biomass'\n    ),\n    feature.id = FALSE,\n    row.numbers = FALSE\n  )\n)"
  },
  {
    "objectID": "pages/data_production.html",
    "href": "pages/data_production.html",
    "title": "Production",
    "section": "",
    "text": "The first plot shows all the production indicators from both the current studies and the original framework in the y-axis. Orange indicates that the indicator is only being used in the current studies, purple that it is only included in the Wiltshire framework, and green that the indicator is used in both the framework and current studies.\nThe x-axis shows the number of secondary data metrics that have been collected to represent those indicators. You can see that there are some indicators for which there exist many data, but many indicators for which I have found little to represent them.\nValue-added market indicators are pulled from various NASS, as are the total quantity of food and forest products and production inputs. There is plenty more that might be pulled from NASS here. Imports and exports are from the Economic Research Service. The exports data are far more detailed than the imports. The former are disaggregated by category at the state level (fresh fruit, processed fruit, dairy…) which is why there are a heap of metrics for it. The import data is weak - I could only find the value of the top five agricultural imports for each state, not a total. Recalls are from FDA records, but I have not any helpful information the impact of recalls in terms of food safety. Crop diversity is represented in the richness indicator by the Cropland CROS data set, which provides estimates of the area of farmland devoted to specific crops across the US. I have disaggregated these at the county and state levels here.\nYou can see there is plenty more in the frameworks that are not represented by secondary data here, particularly related to the consumer side - marketability, nutrition, food waste, and safety. I suspect some of these indicators will migrate toward other dimensions in the refinement process as well. But this does help identify some gaps in the data.\nCode\npacman::p_load(\n  dplyr,\n  ggplot2,\n  stringr,\n  plotly,\n  RColorBrewer\n)\n\n# Load production tree with use notes\nprod_tree &lt;- read.csv('data/trees/prod_tree_with_use.csv')\n\n# Counts of secondary data metrics\ncounts &lt;- meta %&gt;% \n  group_by(Indicator) %&gt;% \n  dplyr::summarize(count = n())\n\n# Join to Wiltshire framework\ncolors &lt;- RColorBrewer::brewer.pal(n = 3, name = 'Dark2')\ndat &lt;- full_join(prod_tree, counts, by = join_by(Indicator == Indicator)) %&gt;% \n  arrange(Indicator) %&gt;% \n  mutate(\n    count = ifelse(is.na(count), 0, count),\n    label_color = case_when(\n      Use == 'both' ~ colors[1],\n      Use == 'wiltshire' ~ colors[3],\n      Use == 'current' ~ colors[2]\n    )\n  )\n# [1] \"#1B9E77\" \"#D95F02\" \"#7570B3\"\n\n# Plot\ndat %&gt;%\n  ggplot(aes(x = Indicator, y = count)) +\n  geom_col(\n    color = 'black',\n    fill = 'grey'\n  ) +\n  geom_point(\n    data = dat,\n    aes(x = 1, y = 1, color = Use),\n    inherit.aes = FALSE,\n    alpha = 0,\n    size = -1\n  ) +\n  scale_color_manual(\n    name = \"Indicator Use:\",\n    values = c(\n      \"both\" = colors[1],\n      \"wiltshire\" = colors[2],\n      \"current\" = colors[3]\n    ),\n    labels = c(\n      'Both',\n      'Wiltshire Only',\n      'Current Only'\n    )\n  ) +\n  theme_classic() +\n  theme(\n    axis.text = element_text(size = 12),\n    axis.text.y = element_text(color = rev(dat$label_color)),\n    axis.title = element_text(size = 14),\n    legend.text = element_text(size = 12),\n    legend.title = element_text(size = 12),\n    legend.position = \"bottom\",\n    plot.margin = margin(t = 10, r = 75, b = 10, l = 10)\n  ) +\n  guides(\n    color = guide_legend(override.aes = list(size = 4, alpha = 1))\n  ) +\n  coord_flip() +\n  labs(y = 'Secondary Data Count')\nOtherwise, I won’t be diving into the usual PCA exploration for the production dataset because we have collected enough metrics to put together a mostly full, mostly coherent example framework with which we can try aggregating data. This should be coming in January."
  },
  {
    "objectID": "pages/data_production.html#crop-diversity",
    "href": "pages/data_production.html#crop-diversity",
    "title": "Production",
    "section": "1 Crop Diversity",
    "text": "1 Crop Diversity\nI wanted to highlight this cropland data layer from USDA NASS in collaboration with USGS, NRCS, and FSA, among other agencies. It’s a crop-specific LULC layer derived from satellite imagery and ground-truthing. It seems to be about the best thrust at crop diversity across regions that I’ve found, but it also is certainly tailored toward primary crops, and may not represent New England very well. I’d love to hear thoughts on how useful this would be in New England.\n\n\nCode\npacman::p_load(\n  mapview,\n  sf,\n  stars,\n  leaflet,\n  leaflet.extras,\n  leafpop\n)\ncounties_sf &lt;- readRDS('data/sm_data.rds')[['ne_counties_2024']]\nfips_key &lt;- readRDS('data/sm_data.rds')[['fips_key']]\ncrop &lt;- readRDS('data/sm_data.rds')[['cropland_cros']]\n\ncounties &lt;- left_join(counties_sf, fips_key)\n\ndiv_map &lt;- mapview(\n  crop,\n  zcol = '2023_30m_cdls',\n  layer.name = 'Cropland Data Layer'\n) + \n  mapview(\n    counties,\n    label = 'county_name',\n    alpha.regions = 0\n  )\n\ndiv_map@map %&gt;% \n  addFullscreenControl()\n\n\nI went on to use this layer to calculate Shannon diversity for crop types at the county and state levels. Here is what it looks like:\n\n\nCode\npacman::p_load(\n  mapview,\n  leaflet,\n  stringr,\n  sf\n)\nsource('dev/data_pipeline_functions.R')\n\ndat &lt;- readRDS('data/sm_data.rds')\n\ndiv &lt;- dat$metrics %&gt;% \n  filter(\n    variable_name == 'cropDiversity',\n    str_length(fips) == 5\n  ) %&gt;% \n  get_latest_year() %&gt;% \n  mutate(value = round(as.numeric(value), 3))\n\ndiv &lt;- left_join(dat$ne_counties_2021, div)\nmapview(\n  div,\n  zcol = 'value',\n  label = 'value',\n  layer.name = 'Crop Diversity'\n)\n\n\nSimilarly, we could pull crop richness out of this dataset, but I have a feeling that the bias toward commodity crops would make that a bit more problematic."
  },
  {
    "objectID": "pages/data_production.html#distribution-plots",
    "href": "pages/data_production.html#distribution-plots",
    "title": "Production",
    "section": "2 Distribution Plots",
    "text": "2 Distribution Plots\n\n2.1 By County\nNote that while most of the available secondary data is at the county level, the environment dimension includes a fair amount at the state level as well. This includes greenhouse gas emissions and water quality surveys. For now, I’ll just show these separately, but some creative aggregation will have to happen eventually.\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  ggplot2,\n  rlang,\n  ggpubr,\n  tidyr\n)\nsource('dev/data_pipeline_functions.R')\nsource('dev/filter_fips.R')\nmetrics &lt;- readRDS('data/sm_data.rds')[['metrics']]\nmetadata &lt;- readRDS('data/sm_data.rds')[['metadata']]\n\n# Use metadata to get help filter by dimension\nprod_meta &lt;- metadata %&gt;%\n  filter(dimension == 'production')\n\n# Filter to economics dimension\nprod_metrics &lt;- metrics %&gt;%\n  filter(variable_name %in% prod_meta$variable_name)\n\n# env_metrics$variable_name %&gt;% unique\n# get_str(env_metrics)\n\n# Filter to latest year and new (post-2024) counties\n# And pivot wider so it is easier to get correlations\nprod_county &lt;- prod_metrics %&gt;%\n  filter_fips(scope = 'counties') %&gt;%\n  get_latest_year() %&gt;%\n  select(fips, variable_name, value) %&gt;%\n  mutate(variable_name = str_split_i(variable_name, '_', 1)) %&gt;%\n  pivot_wider(\n    names_from = 'variable_name',\n    values_from = 'value'\n  ) %&gt;%\n  unnest(!fips) %&gt;%\n  mutate(across(c(2:last_col()), as.numeric))\n\n# Save temp file for use in analysis script\nsaveRDS(prod_county, 'data/temp/prod_county.rds')\n\n## Plot\nplots &lt;- map(names(prod_county)[-1], \\(var){\n  if (is.character(prod_county[[var]])) {\n    env_county %&gt;%\n      ggplot(aes(x = !!sym(var))) +\n      geom_bar(\n        fill = 'lightblue',\n        color = 'royalblue',\n        alpha = 0.5\n      ) +\n      theme_classic() +\n      theme(plot.margin = unit(c(rep(0.5, 4)), 'cm'))\n  } else if (is.numeric(prod_county[[var]])) {\n    prod_county %&gt;%\n      ggplot(aes(x = !!sym(var))) +\n      geom_density(\n        fill = 'lightblue',\n        color = 'royalblue',\n        alpha = 0.5\n      ) +\n      theme_classic() +\n      theme(plot.margin = unit(c(rep(0.5, 4)), 'cm'))\n  } else {\n    return(NULL)\n  }\n})\n\n\n# Arrange them in 4 columns\nggarrange(\n  plotlist = plots,\n  ncol = 3,\n  nrow = 4\n)\n\n\n\n\n2.2 By State\n\n\nCode\npacman::p_load(\n  dplyr,\n  purrr,\n  ggplot2,\n  rlang,\n  ggpubr,\n  tidyr\n)\n\nstate_codes &lt;- readRDS('data/sm_data.rds')[['fips_key']] %&gt;%\n  select(fips, state_code)\n\nprod_state &lt;- prod_metrics %&gt;%\n  filter_fips(scope = 'state') %&gt;%\n  get_latest_year() %&gt;%\n  select(fips, variable_name, value) %&gt;%\n  mutate(variable_name = str_split_i(variable_name, '_', 1)) %&gt;%\n  pivot_wider(\n    names_from = 'variable_name',\n    values_from = 'value'\n  ) %&gt;%\n  unnest(!fips) %&gt;%\n  mutate(across(c(2:last_col()), as.numeric)) %&gt;%\n  left_join(state_codes, by = 'fips')\n\n# Save temp data file for use in analysis script\nsaveRDS(prod_state, 'data/temp/prod_state.rds')\n\n# Variables to map. \nvars &lt;- names(prod_state)[-c(1, 43)]\n\n## Plot\nplots &lt;- map(vars, \\(var){\n  prod_state %&gt;%\n    ggplot(aes(y = !!sym(var), x = state_code, color = state_code)) +\n    geom_point(\n      alpha = 0.5,\n      size = 3\n    ) +\n    theme_classic() +\n    theme(\n      plot.margin = unit(c(rep(0.5, 4)), 'cm'),\n      legend.position = 'none'\n    ) +\n    labs(\n      x = 'State'\n    )\n})\n\n# Arrange them in 4 columns\nggarrange(\n  plotlist = plots,\n  ncol = 4,\n  nrow = 11\n)"
  },
  {
    "objectID": "pages/data_production.html#bivariate-plots",
    "href": "pages/data_production.html#bivariate-plots",
    "title": "Production",
    "section": "3 Bivariate Plots",
    "text": "3 Bivariate Plots\nUsing a selection of variables at the county level.\n\n\nCode\npacman::p_load(\n  GGally\n)\n\n# Neat function for mapping colors to ggpairs plots\n# https://stackoverflow.com/questions/45873483/ggpairs-plot-with-heatmap-of-correlation-values\nmap_colors &lt;- function(data,\n                       mapping,\n                       method = \"p\",\n                       use = \"pairwise\",\n                       ...) {\n  # grab data\n  x &lt;- eval_data_col(data, mapping$x)\n  y &lt;- eval_data_col(data, mapping$y)\n\n  # calculate correlation\n  corr &lt;- cor(x, y, method = method, use = use)\n  colFn &lt;- colorRampPalette(c(\"blue\", \"white\", \"red\"), interpolate = 'spline')\n  fill &lt;- colFn(100)[findInterval(corr, seq(-1, 1, length = 100))]\n\n  # correlation plot\n  ggally_cor(data = data, mapping = mapping, color = 'black', ...) +\n    theme_void() +\n    theme(panel.background = element_rect(fill = fill))\n}\n\nlower_function &lt;- function(data, mapping, ...) {\n  ggplot(data = data, mapping = mapping) +\n    geom_point(alpha = 0.5) +\n    geom_smooth(color = \"blue\", fill = \"grey\", ...) +\n    theme_bw()\n}\n\n# Rename variables to be shorter\nprod_county %&gt;%\n  select(-fips) %&gt;% \n  ggpairs(\n    upper = list(continuous = map_colors),\n    lower = list(continuous = lower_function),\n    axisLabels = 'show'\n  ) +\n  theme(\n    strip.text = element_text(size =  5),\n    axis.text = element_text(size =   5),\n    legend.text = element_text(size = 5)\n  )"
  },
  {
    "objectID": "pages/data_production.html#sec-correlations",
    "href": "pages/data_production.html#sec-correlations",
    "title": "Production",
    "section": "4 Correlations",
    "text": "4 Correlations\nOnly showing correlations by county because we don’t have enough observations to run it by state.\n\n\nCode\npacman::p_load(\n  dplyr,\n  tidyr,\n  tibble,\n  stringr,\n  purrr,\n  tidyr,\n  ggplot2,\n  plotly,\n  reshape,\n  Hmisc,\n  viridisLite\n)\n\n# get_str(env_county)\n\ncor &lt;- prod_county %&gt;%\n  select(-fips) %&gt;%\n  as.matrix() %&gt;%\n  rcorr()\n\n# Melt correlation values and rename columns\ncor_r &lt;- melt(cor$r) %&gt;%\n  setNames(c('var_1', 'var_2', 'value'))\n\n# Save p values\ncor_p &lt;- melt(cor$P)\np.value &lt;- cor_p$value\n\n# Make heatmap with custom text aesthetic for tooltip\nplot &lt;- cor_r %&gt;%\n  ggplot(aes(var_1, var_2, fill = value, text = paste0(\n    'Var 1: ', var_1, '\\n',\n    'Var 2: ', var_2, '\\n',\n    'Correlation: ', format(round(value, 3), nsmall = 3), '\\n',\n    'P-Value: ', format(round(p.value, 3), nsmall = 3)\n  ))) +\n  geom_tile() +\n  scale_fill_viridis_c() +\n  theme(axis.text.x = element_text(hjust = 1, angle = 45)) +\n  labs(\n    x = NULL,\n    y = NULL,\n    fill = 'Correlation'\n  )\n\n# Convert to interactive plotly figure with text tooltip\nggplotly(\n  plot,\n  tooltip = 'text',\n  width = 800,\n  height = 500\n)"
  },
  {
    "objectID": "pages/metric_distributions.html",
    "href": "pages/metric_distributions.html",
    "title": "Metric Distributions",
    "section": "",
    "text": "Explore metric distributions before normalization. Use this to inform how we might want to deal with outliers or normalize data at the metric level. For now, we are leaving the metrics as is, taking arithmetic means, and saving all normalization and weighting for the indicator level.\nTransforming our data from long format to wide and making sure everything came through alright.\n\n\nCode\npacman::p_load(\n  dplyr,\n  tidyr,\n  tibble\n)\n\n# Get latest year function\nsource('dev/data_pipeline_functions.R')\n\n# Load metrics data\nsm_data &lt;- readRDS('data/sm_data.rds')\n\n# Load refined framework\nraw_tree &lt;- sm_data[['refined_tree']]\n\n# Load refined framework\nframe &lt;- readRDS('data/frame.rds')\n\n\n## Join with metadata to double check the resolution of our metrics\nmeta &lt;- sm_data$metadata\n# get_str(meta)\n\ndat &lt;- frame %&gt;% \n  filter(variable_name != 'NONE') %&gt;% \n  select(variable_name) %&gt;% \n  left_join(meta, by = 'variable_name') %&gt;% \n  unique()\n# get_str(dat)\n\n# Pull it from the actual metrics data\nmetrics &lt;- sm_data$metrics %&gt;% \n  filter(\n    variable_name %in% frame$variable_name,\n    fips %in% sm_data$state_key$state_code\n  )\n# get_str(metrics)\n\n# Filter to latest year for each metric, and pivot wider\n# Also removing census participation - don't really have data at state level\n# Note to aggregate counties for this at some point\nmetrics_df &lt;- metrics %&gt;%\n  mutate(\n    value = ifelse(value == 'NaN', NA, value),\n    value = str_remove_all(value, ','),\n    value = as.numeric(value)\n  ) %&gt;%\n  get_latest_year() %&gt;% \n  pivot_wider(\n    names_from = 'variable_name',\n    values_from = 'value'\n  ) %&gt;% \n  unnest(cols = !fips) %&gt;%\n  unique()\nget_str(metrics_df)\n\n\ntibble [51 × 130] (S3: tbl_df/tbl/data.frame)\n $ fips                                       : chr [1:51] \"01\" \"02\" \"04\" \"05\"..\n $ unemploymentRate_2022                      : num [1:51] 2.6 4 3.8 3.3 4.2 3..\n $ netReturnOperators_2023                    : num [1:51] 1561636000 -1598400..\n $ edPercBS_2022                              : num [1:51] 16.7 19.3 19.6 15.6..\n $ vacancyRate_2022                           : num [1:51] 15.84 18.95 11.58 1..\n $ gini_2022                                  : num [1:51] 0.48 0.43 0.461 0.4..\n $ poorMentalHealthDays_2024                  : num [1:51] 5.87 4.59 4.93 5.78..\n $ lowBirthweight_2024                        : num [1:51] 0.1048 0.0637 0.075..\n $ accessToExerciseOpportunities_2024         : num [1:51] 0.613 0.782 0.855 0..\n $ alcoholImpairedDrivingDeaths_2024          : num [1:51] 0.251 0.35 0.212 0...\n $ teenBirths_2024                            : num [1:51] 24.93 19.68 18.66 2..\n $ uninsured_2024                             : num [1:51] 0.1169 0.1318 0.131..\n $ primaryCarePhysicians_2024                 : num [1:51] 0.000637 0.000968 0..\n $ dentists_2024                              : num [1:51] 0.000496 0.001048 0..\n $ mentalHealthProviders_2024                 : num [1:51] 0.00135 0.00723 0.0..\n $ mammographyScreening_2024                  : num [1:51] 0.41 0.35 0.41 0.4 ..\n $ incomeInequality_2024                      : num [1:51] 5.21 4.16 4.4 4.8 5..\n $ childrenInSingleParentHouseholds_2024      : num [1:51] 0.306 0.207 0.252 0..\n $ socialAssociations_2024                    : num [1:51] 11.69 11.29 5.59 11..\n $ injuryDeaths_2024                          : num [1:51] 90.4 104.6 95.9 88...\n $ airPollutionParticulateMatter_2024         : num [1:51] 9.3 7.55 4.8 8.9 7...\n $ drinkingWaterViolations_2024               : num [1:51] 0.2239 0.64 0.8 0.2..\n $ severeHousingProblems_2024                 : num [1:51] 0.131 0.195 0.172 0..\n $ lifeExpectancy_2024                        : num [1:51] 73.7 77.1 77.5 74.3..\n $ prematureAgeAdjustedMortality_2024         : num [1:51] 549 412 411 527 319..\n $ infantMortality_2024                       : num [1:51] 7.73 5.92 5.48 7.77..\n $ frequentPhysicalDistress_2024              : num [1:51] 0.1237 0.1121 0.110..\n $ frequentMentalDistress_2024                : num [1:51] 0.196 0.142 0.159 0..\n $ diabetesPrevalence_2024                    : num [1:51] 0.133 0.08 0.097 0...\n $ hivPrevalence_2024                         : num [1:51] 339.7 124.3 296.4 2..\n $ limitedAccessToHealthyFoods_2024           : num [1:51] 0.0876 0.0787 0.086..\n $ drugOverdoseDeaths_2024                    : num [1:51] 21.6 25.1 32.7 17.3..\n $ disconnectedYouth_2024                     : num [1:51] 0.0802 0.1118 0.083..\n $ residentialSegregationBlackWhite_2024      : num [1:51] 57.4 57.2 49.8 65.2..\n $ suicides_2024                              : num [1:51] 16.23 27.7 18.61 19..\n $ motorVehicleCrashDeaths_2024               : num [1:51] 20.59 10.46 14.16 1..\n $ homeownership_2024                         : num [1:51] 0.697 0.663 0.663 0..\n $ severeHousingCostBurden_2024               : num [1:51] 0.1227 0.121 0.1342..\n $ broadbandAccess_2024                       : num [1:51] 0.838 0.894 0.892 0..\n $ schoolSegregation_2024                     : num [1:51] 0.275 0.245 0.234 0..\n $ genderPayGap_2024                          : num [1:51] 0.745 0.834 0.844 0..\n $ childCareCostBurden_2024                   : num [1:51] 0.266 0.249 0.307 0..\n $ childCareCenters_2024                      : num [1:51] 5.51 3.75 5.04 9.58..\n $ voterTurnout_2024                          : num [1:51] 0.626 0.675 0.671 0..\n $ nCSA_2023                                  : num [1:51] 0 0 1 0 7 0 1 1 0 2..\n $ nFarmersMarket_2023                        : num [1:51] 111 48 102 74 531 1..\n $ valueAddedFarmsPerc_2022                   : num [1:51] 0.01188 0.07673 0.0..\n $ agTourSalesPerc_2022                       : num [1:51] 0.00109 0.028531 0...\n $ d2cSalesPerc_2022                          : num [1:51] 0.001559 0.036544 0..\n $ valueAddedSalesPerc_2022                   : num [1:51] 0.00084 0.029697 0...\n $ localSalesPerc_2022                        : num [1:51] 0.004475 0.110765 0..\n $ nSnapGrocPTH_2017                          : num [1:51] 0.948 0.609 0.527 0..\n $ nGrocPTH_2016                              : num [1:51] 0.156 0.29 0.113 0...\n $ nWicsGrocPTH_2016                          : num [1:51] 0.14636 0.22252 0.1..\n $ snapPercPart_2020                          : num [1:51] 0.78 0.86 0.77 0.66..\n $ wicPercEligible_2021                       : num [1:51] 0.54 0.459 0.51 0.5..\n $ wicPercPart_2021                           : num [1:51] 0.498 0.513 0.517 0..\n $ medianEarnMaleFood_2021                    : num [1:51] 15361 21997 19966 1..\n $ medianEarnFemaleFood_2021                  : num [1:51] 13687 18592 16419 1..\n $ womenEarnPercMaleFood_2021                 : num [1:51] 0.891 0.845 0.822 0..\n $ medianEarnMaleFarm_2021                    : num [1:51] 30328 52472 29211 2..\n $ medianEarnFemaleFarm_2021                  : num [1:51] 25325 26250 14478 2..\n $ womenEarnPercMaleFarm_2021                 : num [1:51] 0.835 0.5 0.496 0.6..\n $ droughtMeanPercArea_2024                   : num [1:51] 56.64 2.25 81.28 45..\n $ lulcDiversity_2023                         : num [1:51] 2.005 NA 0.616 1.93..\n $ forestCarbonLive_2016                      : num [1:51] 67.6 NA 28.3 69 49...\n $ forestCarbonDeadStanding_2016              : num [1:51] 0.49 NA 0.974 0.857..\n $ forestCarbonDeadDown_2016                  : num [1:51] 2.425 NA 0.89 2.445..\n $ forestCanopyCover_2016                     : num [1:51] 21.11 NA 7.87 22.01..\n $ forestLiveTreeVolume_2016                  : num [1:51] 60 NA 24.8 60.2 67...\n $ forestLiveTrees_2016                       : num [1:51] 11.8 NA 20.9 15.3 2..\n $ forestDeadTrees_2016                       : num [1:51] 840 NA 247 766 321 ..\n $ forestStandHeight_2016                     : num [1:51] 1597 NA 847 1639 34..\n $ cropDiversity_2023                         : num [1:51] 1.914 NA 2.164 1.48..\n $ sppAnimals_2022                            : num [1:51] 2562 963 1978 1809 ..\n $ sppPlants_2022                             : num [1:51] 2967 1376 3540 2220..\n $ sppBees_2022                               : num [1:51] 47 43 241 48 310 22..\n $ sppOrchids_2022                            : num [1:51] 55 28 29 36 31 25 4..\n $ pctAtRiskAnimalSpp_2022                    : num [1:51] 23.61 7.59 18.18 13..\n $ pctAtRiskPlantSpp_2022                     : num [1:51] 9.847 5.939 16.177 ..\n $ pctAtRiskBeeSpp_2022                       : num [1:51] 10.64 15 22.47 12.5..\n $ pctAtRiskOrchidSpp_2022                    : num [1:51] 20 7.14 17.24 8.33 ..\n $ nEcosystems_2022                           : num [1:51] 64 66 70 42 105 82 ..\n $ pctAtRiskEcosystems_2022                   : num [1:51] 8.825 0 8.13 13.346..\n $ expHiredLaborPercOpExp_2022                : num [1:51] 4.9 35.4 14.8 5.3 1..\n $ farmIncomePF_2022                          : num [1:51] 17013 23601 49069 2..\n $ acresPF_2022                               : num [1:51] 231 742 1528 363 38..\n $ medianAcresPF_2022                         : num [1:51] 75 12 6 100 24 75 2..\n $ landValPF_2022                             : num [1:51] 845032 773460 13485..\n $ landValPerAcre_2022                        : num [1:51] 3659 1043 883 3921 ..\n $ expChemicalPct_2022                        : num [1:51] 2.9 0.8 4.8 8.1 5.7..\n $ salesAnimalPctSales_2022                   : num [1:51] 80.7 56.3 41.6 61.6..\n $ incForestProducts_2022                     : num [1:51] 72982000 33000 7900..\n $ ageProducers_2022                          : num [1:51] 58.7 56.7 60.1 57.6..\n $ producerRacialDiversity_2022               : num [1:51] 1.19 1.22 1.48 1.17..\n $ ftmProdRatio_2022                          : num [1:51] 0.541 0.879 0.919 0..\n $ geoexchangeNOps_2022                       : num [1:51] 121 6 1 256 123 383..\n $ methaneNOps_2022                           : num [1:51] 23 NA 8 7 48 17 4 1..\n $ solarNOps_2022                             : num [1:51] 699 184 1414 1200 1..\n $ windTurbinesNOps_2022                      : num [1:51] 58 19 91 24 312 573..\n $ waterIrrSrcOffFarmExp_2023                 : num [1:51] 104000 23000 586970..\n $ waterIrrSrcOffFarmExpPerAcreFt_2023        : num [1:51] 55.52 550 37.57 27...\n $ CH4FromAg_2022                             : num [1:51] 2.7067 0.0452 3.004..\n $ CO2FromAg_2022                             : num [1:51] 0.008008 0.003708 0..\n $ N2OFromAg_2022                             : num [1:51] 2.31024 0.01124 4.2..\n $ lakesLitripcvrCond_2022                    : num [1:51] 0.6 NA 0.673 0.806 ..\n $ lakesRvegCond_2022                         : num [1:51] 0.578 NA 0.582 0.86..\n $ riversNtlCond_2019                         : num [1:51] 0.6667 NA 0.5926 0...\n $ riversPtlCond_2019                         : num [1:51] 0.667 NA 0.481 0.48..\n $ riversRipvegCond_2019                      : num [1:51] 0.926 NA 0.667 0.48..\n $ riversSalCond_2019                         : num [1:51] 1 NA 0.852 1 0.927 ..\n $ propAreaFsaSecDisasters_2023               : num [1:51] 0.776 NA 1 0.711 1 ..\n $ importsTopFive_2024                        : num [1:51] 277.31 9.76 4295.76..\n $ exportsTotalAgricultural_2022              : num [1:51] 1702.5 20.6 1704.3 ..\n $ totalReceiptsAllForestProducts_2023        : num [1:51] 35637 300 952 9410 ..\n $ totalCapConsNoDwellings_2023               : num [1:51] 445663 8861 192329 ..\n $ totalIntExpRealEstateNoDwellings_2023      : num [1:51] 158524 1498 64839 2..\n $ totalValueServicesAndForestry_2023         : num [1:51] 1017904 18099 45391..\n $ totalIncomeInsuranceIndemnities_2023       : num [1:51] 115760 138 180265 3..\n $ totalIncomeInsuranceIndemnitiesFederal_2023: num [1:51] 108069 119 172816 2..\n $ totalValueEmergPayments_2023               : num [1:51] 54486 1115 28821 40..\n $ totalValueOtherAdHocEmergPayments_2023     : num [1:51] 49269 1032 26303 38..\n $ totalValueDairyMarginProtPayments_2023     : num [1:51] 394 0 6904 1028 127..\n $ totalValueAllLossCoveragePayments_2023     : num [1:51] 282 0 66 1763 106 1..\n $ totalValueAgRiskCoveragePayments_2023      : num [1:51] 15 0 0 624 189 1475..\n $ totalCapExpBldgsLandNoDwellings_2014       : num [1:51] 98943 2519 59687 13..\n $ sfaFarmToSchool_2023                       : num [1:51] 76.2 75 63.5 83.6 7..\n $ sfaCulturallyRelevant_2023                 : num [1:51] 16.85 32.14 11.81 1..\n $ sfaServeLocal_2023                         : num [1:51] 63.2 75 53.2 73.8 6..\n $ sfaLocalFoodCosts_2023                     : num [1:51] 6.55 2.6 20.82 21.9..\n\n\nCode\n# Let's get rid of the years so they are easier to work with\nnames(metrics_df) &lt;- str_split_i(names(metrics_df), '_', 1)\nget_str(metrics_df)\n\n\ntibble [51 × 130] (S3: tbl_df/tbl/data.frame)\n $ fips                                  : chr [1:51] \"01\" \"02\" \"04\" \"05\" \"06\"..\n $ unemploymentRate                      : num [1:51] 2.6 4 3.8 3.3 4.2 3 4.2 ..\n $ netReturnOperators                    : num [1:51] 1561636000 -15984000 128..\n $ edPercBS                              : num [1:51] 16.7 19.3 19.6 15.6 22.1..\n $ vacancyRate                           : num [1:51] 15.84 18.95 11.58 14.58 ..\n $ gini                                  : num [1:51] 0.48 0.43 0.461 0.482 0...\n $ poorMentalHealthDays                  : num [1:51] 5.87 4.59 4.93 5.78 4.65..\n $ lowBirthweight                        : num [1:51] 0.1048 0.0637 0.0754 0.0..\n $ accessToExerciseOpportunities         : num [1:51] 0.613 0.782 0.855 0.636 ..\n $ alcoholImpairedDrivingDeaths          : num [1:51] 0.251 0.35 0.212 0.271 0..\n $ teenBirths                            : num [1:51] 24.93 19.68 18.66 29.53 ..\n $ uninsured                             : num [1:51] 0.1169 0.1318 0.1313 0.1..\n $ primaryCarePhysicians                 : num [1:51] 0.000637 0.000968 0.0006..\n $ dentists                              : num [1:51] 0.000496 0.001048 0.0006..\n $ mentalHealthProviders                 : num [1:51] 0.00135 0.00723 0.00182 ..\n $ mammographyScreening                  : num [1:51] 0.41 0.35 0.41 0.4 0.36 ..\n $ incomeInequality                      : num [1:51] 5.21 4.16 4.4 4.8 5.16 4..\n $ childrenInSingleParentHouseholds      : num [1:51] 0.306 0.207 0.252 0.285 ..\n $ socialAssociations                    : num [1:51] 11.69 11.29 5.59 11.8 6...\n $ injuryDeaths                          : num [1:51] 90.4 104.6 95.9 88.9 58...\n $ airPollutionParticulateMatter         : num [1:51] 9.3 7.55 4.8 8.9 7.1 4.4..\n $ drinkingWaterViolations               : num [1:51] 0.2239 0.64 0.8 0.2667 0..\n $ severeHousingProblems                 : num [1:51] 0.131 0.195 0.172 0.131 ..\n $ lifeExpectancy                        : num [1:51] 73.7 77.1 77.5 74.3 79.9..\n $ prematureAgeAdjustedMortality         : num [1:51] 549 412 411 527 319 327 ..\n $ infantMortality                       : num [1:51] 7.73 5.92 5.48 7.77 4.18..\n $ frequentPhysicalDistress              : num [1:51] 0.1237 0.1121 0.1101 0.1..\n $ frequentMentalDistress                : num [1:51] 0.196 0.142 0.159 0.191 ..\n $ diabetesPrevalence                    : num [1:51] 0.133 0.08 0.097 0.109 0..\n $ hivPrevalence                         : num [1:51] 339.7 124.3 296.4 245.9 ..\n $ limitedAccessToHealthyFoods           : num [1:51] 0.0876 0.0787 0.0868 0.1..\n $ drugOverdoseDeaths                    : num [1:51] 21.6 25.1 32.7 17.3 22 2..\n $ disconnectedYouth                     : num [1:51] 0.0802 0.1118 0.0839 0.0..\n $ residentialSegregationBlackWhite      : num [1:51] 57.4 57.2 49.8 65.2 58 6..\n $ suicides                              : num [1:51] 16.23 27.7 18.61 19.35 1..\n $ motorVehicleCrashDeaths               : num [1:51] 20.59 10.46 14.16 19.69 ..\n $ homeownership                         : num [1:51] 0.697 0.663 0.663 0.662 ..\n $ severeHousingCostBurden               : num [1:51] 0.1227 0.121 0.1342 0.11..\n $ broadbandAccess                       : num [1:51] 0.838 0.894 0.892 0.824 ..\n $ schoolSegregation                     : num [1:51] 0.275 0.245 0.234 0.286 ..\n $ genderPayGap                          : num [1:51] 0.745 0.834 0.844 0.809 ..\n $ childCareCostBurden                   : num [1:51] 0.266 0.249 0.307 0.251 ..\n $ childCareCenters                      : num [1:51] 5.51 3.75 5.04 9.58 8.1 ..\n $ voterTurnout                          : num [1:51] 0.626 0.675 0.671 0.549 ..\n $ nCSA                                  : num [1:51] 0 0 1 0 7 0 1 1 0 2 0 2 ..\n $ nFarmersMarket                        : num [1:51] 111 48 102 74 531 140 13..\n $ valueAddedFarmsPerc                   : num [1:51] 0.01188 0.07673 0.01281 ..\n $ agTourSalesPerc                       : num [1:51] 0.00109 0.028531 0.00204..\n $ d2cSalesPerc                          : num [1:51] 0.001559 0.036544 0.0038..\n $ valueAddedSalesPerc                   : num [1:51] 0.00084 0.029697 0.00566..\n $ localSalesPerc                        : num [1:51] 0.004475 0.110765 0.0508..\n $ nSnapGrocPTH                          : num [1:51] 0.948 0.609 0.527 0.831 ..\n $ nGrocPTH                              : num [1:51] 0.156 0.29 0.113 0.161 0..\n $ nWicsGrocPTH                          : num [1:51] 0.14636 0.22252 0.10467 ..\n $ snapPercPart                          : num [1:51] 0.78 0.86 0.77 0.66 0.7 ..\n $ wicPercEligible                       : num [1:51] 0.54 0.459 0.51 0.587 0...\n $ wicPercPart                           : num [1:51] 0.498 0.513 0.517 0.35 0..\n $ medianEarnMaleFood                    : num [1:51] 15361 21997 19966 14375 ..\n $ medianEarnFemaleFood                  : num [1:51] 13687 18592 16419 13729 ..\n $ womenEarnPercMaleFood                 : num [1:51] 0.891 0.845 0.822 0.955 ..\n $ medianEarnMaleFarm                    : num [1:51] 30328 52472 29211 29462 ..\n $ medianEarnFemaleFarm                  : num [1:51] 25325 26250 14478 20289 ..\n $ womenEarnPercMaleFarm                 : num [1:51] 0.835 0.5 0.496 0.689 0...\n $ droughtMeanPercArea                   : num [1:51] 56.64 2.25 81.28 45.41 2..\n $ lulcDiversity                         : num [1:51] 2.005 NA 0.616 1.936 0 0..\n $ forestCarbonLive                      : num [1:51] 67.6 NA 28.3 69 49.5 39...\n $ forestCarbonDeadStanding              : num [1:51] 0.49 NA 0.974 0.857 3.04..\n $ forestCarbonDeadDown                  : num [1:51] 2.425 NA 0.89 2.445 4.73..\n $ forestCanopyCover                     : num [1:51] 21.11 NA 7.87 22.01 34.4..\n $ forestLiveTreeVolume                  : num [1:51] 60 NA 24.8 60.2 67.8 40 ..\n $ forestLiveTrees                       : num [1:51] 11.8 NA 20.9 15.3 22.3 3..\n $ forestDeadTrees                       : num [1:51] 840 NA 247 766 321 453 5..\n $ forestStandHeight                     : num [1:51] 1597 NA 847 1639 3419 15..\n $ cropDiversity                         : num [1:51] 1.914 NA 2.164 1.488 2.9..\n $ sppAnimals                            : num [1:51] 2562 963 1978 1809 2599 ..\n $ sppPlants                             : num [1:51] 2967 1376 3540 2220 5525..\n $ sppBees                               : num [1:51] 47 43 241 48 310 226 60 ..\n $ sppOrchids                            : num [1:51] 55 28 29 36 31 25 44 38 ..\n $ pctAtRiskAnimalSpp                    : num [1:51] 23.61 7.59 18.18 13.87 3..\n $ pctAtRiskPlantSpp                     : num [1:51] 9.847 5.939 16.177 3.869..\n $ pctAtRiskBeeSpp                       : num [1:51] 10.64 15 22.47 12.5 31.7..\n $ pctAtRiskOrchidSpp                    : num [1:51] 20 7.14 17.24 8.33 16.13..\n $ nEcosystems                           : num [1:51] 64 66 70 42 105 82 45 40..\n $ pctAtRiskEcosystems                   : num [1:51] 8.825 0 8.13 13.346 15.0..\n $ expHiredLaborPercOpExp                : num [1:51] 4.9 35.4 14.8 5.3 19.4 8..\n $ farmIncomePF                          : num [1:51] 17013 23601 49069 20843 ..\n $ acresPF                               : num [1:51] 231 742 1528 363 383 838..\n $ medianAcresPF                         : num [1:51] 75 12 6 100 24 75 20 36 ..\n $ landValPF                             : num [1:51] 845032 773460 1348526 14..\n $ landValPerAcre                        : num [1:51] 3659 1043 883 3921 13131..\n $ expChemicalPct                        : num [1:51] 2.9 0.8 4.8 8.1 5.7 2.8 ..\n $ salesAnimalPctSales                   : num [1:51] 80.7 56.3 41.6 61.6 27.2..\n $ incForestProducts                     : num [1:51] 72982000 33000 79000 293..\n $ ageProducers                          : num [1:51] 58.7 56.7 60.1 57.6 59.9..\n $ producerRacialDiversity               : num [1:51] 1.19 1.22 1.48 1.17 1.34..\n $ ftmProdRatio                          : num [1:51] 0.541 0.879 0.919 0.649 ..\n $ geoexchangeNOps                       : num [1:51] 121 6 1 256 123 383 71 4..\n $ methaneNOps                           : num [1:51] 23 NA 8 7 48 17 4 1 NA 3..\n $ solarNOps                             : num [1:51] 699 184 1414 1200 16403 ..\n $ windTurbinesNOps                      : num [1:51] 58 19 91 24 312 573 5 NA..\n $ waterIrrSrcOffFarmExp                 : num [1:51] 104000 23000 58697000 54..\n $ waterIrrSrcOffFarmExpPerAcreFt        : num [1:51] 55.52 550 37.57 27.24 71..\n $ CH4FromAg                             : num [1:51] 2.7067 0.0452 3.0047 10...\n $ CO2FromAg                             : num [1:51] 0.008008 0.003708 0.0121..\n $ N2OFromAg                             : num [1:51] 2.31024 0.01124 4.22545 ..\n $ lakesLitripcvrCond                    : num [1:51] 0.6 NA 0.673 0.806 0.769..\n $ lakesRvegCond                         : num [1:51] 0.578 NA 0.582 0.861 0.6..\n $ riversNtlCond                         : num [1:51] 0.6667 NA 0.5926 0.6667 ..\n $ riversPtlCond                         : num [1:51] 0.667 NA 0.481 0.481 0.7..\n $ riversRipvegCond                      : num [1:51] 0.926 NA 0.667 0.481 0.9..\n $ riversSalCond                         : num [1:51] 1 NA 0.852 1 0.927 0.906..\n $ propAreaFsaSecDisasters               : num [1:51] 0.776 NA 1 0.711 1 0.863..\n $ importsTopFive                        : num [1:51] 277.31 9.76 4295.76 161...\n $ exportsTotalAgricultural              : num [1:51] 1702.5 20.6 1704.3 4336 ..\n $ totalReceiptsAllForestProducts        : num [1:51] 35637 300 952 9410 4841 ..\n $ totalCapConsNoDwellings               : num [1:51] 445663 8861 192329 65901..\n $ totalIntExpRealEstateNoDwellings      : num [1:51] 158524 1498 64839 290920..\n $ totalValueServicesAndForestry         : num [1:51] 1017904 18099 453914 147..\n $ totalIncomeInsuranceIndemnities       : num [1:51] 115760 138 180265 305271..\n $ totalIncomeInsuranceIndemnitiesFederal: num [1:51] 108069 119 172816 280206..\n $ totalValueEmergPayments               : num [1:51] 54486 1115 28821 404521 ..\n $ totalValueOtherAdHocEmergPayments     : num [1:51] 49269 1032 26303 383390 ..\n $ totalValueDairyMarginProtPayments     : num [1:51] 394 0 6904 1028 127181 1..\n $ totalValueAllLossCoveragePayments     : num [1:51] 282 0 66 1763 106 19 0 0..\n $ totalValueAgRiskCoveragePayments      : num [1:51] 15 0 0 624 189 14755 0 2..\n $ totalCapExpBldgsLandNoDwellings       : num [1:51] 98943 2519 59687 131565 ..\n $ sfaFarmToSchool                       : num [1:51] 76.2 75 63.5 83.6 77.4 7..\n $ sfaCulturallyRelevant                 : num [1:51] 16.85 32.14 11.81 11.35 ..\n $ sfaServeLocal                         : num [1:51] 63.2 75 53.2 73.8 67 67...\n $ sfaLocalFoodCosts                     : num [1:51] 6.55 2.6 20.82 21.91 22...\n\n\nCode\n# Save this for use in subsequent pages\nsaveRDS(metrics_df, 'data/metrics_df.rds')\n\n\n\n1 Distributions\nHere we explore univariate distributions of each of our metrics. Highly skewed distributions might be good candidates for Box-Cox transformations or Winsorization. The figure below shows metrics with a skew &gt; 2 in red, while those with a skew &lt; 2 are in blue.\n\n\nCode\npacman::p_load(\n  ggplot2,\n  purrr,\n  ggpubr,\n  psych\n)\n\n# Get skews of variables\nskewed &lt;- psych::describe(metrics_df[, -1]) %&gt;% \n  as.data.frame() %&gt;% \n  rownames_to_column('variable_name') %&gt;% \n  select(variable_name, skew) %&gt;% \n  filter(abs(skew) &gt; 2) %&gt;% \n  pull(variable_name)\n\nplots &lt;- map(names(metrics_df)[-1], \\(var){\n  # color based on skewness\n  if (var %in% skewed) {\n    fill &lt;- 'red'\n    color &lt;- 'darkred'\n  } else {\n    fill &lt;- 'lightblue'\n    color &lt;- 'royalblue'\n  }\n  \n  # Make plot for variable\n  metrics_df %&gt;% \n    ggplot(aes(x = !!sym(var))) + \n    geom_density(\n      fill = fill,\n      color = color,\n      alpha = 0.5\n    ) +\n    theme_classic() +\n    theme(plot.margin = unit(c(rep(0.5, 4)), 'cm'))\n}) \n\n# Arrange them in 4 columns\nggarrange(\n  plotlist = plots,\n  ncol = 4,\n  nrow = 33\n)\n\n\n\n\n\nDistributions of metrics at the state level.\n\n\n\n\nIt seems most of our metrics fall along respectable mostly-normal distributions. 18 of the 86 variables are skewed. They include several variables related to local farm economies (agrotourism sales as a percentage of total sales, direct to consumer sales as a percentage of total sales, and value added sales as a percentage of total sales), as well as a couple of the TreeMap 2016 variables (dead standing carbon and live trees) and GHG emissions from agriculture (CH4 and CO2, with an honorable mention for N2O). State agricultural imports and exports are also highly skewed.\nBéné et al. (2019) used Box Cox transformations for highly skewed indicators before normalizing all indicators with Min Max transformations. We will explore some of our options on the next page.\n\n\n\n\n\n Back to topReferences\n\nBéné, Christophe, Steven D. Prager, Harold A. E. Achicanoy, Patricia Alvarez Toro, Lea Lamotte, Camila Bonilla, and Brendan R. Mapes. 2019. “Global Map and Indicators of Food System Sustainability.” Scientific Data 6 (1): 279. https://doi.org/10.1038/s41597-019-0301-5.",
    "crumbs": [
      "Refined Framework Analysis",
      "Metric Distributions"
    ]
  },
  {
    "objectID": "pages/refine_economics.html",
    "href": "pages/refine_economics.html",
    "title": "Economic Indicator Refinement",
    "section": "",
    "text": "This page describes the various iterations of indicator sets for the economics dimensions. First, we observe the indicators included in the dimension at three points in time. The second section then shows the results of the survey following the indicator refinement meeting. A final set of indicators to incorporate into the next RFP is still in the works!",
    "crumbs": [
      "Indicator Refinement",
      "Economics"
    ]
  },
  {
    "objectID": "pages/refine_economics.html#indicator-progression",
    "href": "pages/refine_economics.html#indicator-progression",
    "title": "Economic Indicator Refinement",
    "section": "1 Indicator Progression",
    "text": "1 Indicator Progression\n\n1.1 Wiltshire\nThis graph shows the original framework as described in the Wiltshire et al. paper.\n\n\nCode\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/econ_wiltshire_tree.csv',\n  dimension_in = 'economics',\n  include_metrics = FALSE,\n  y_limits = c(-1.5, 2.1)\n)\n\n\n\n\n\n\n\n\n\n\n\n1.2 Matrix\nHere is the current set of indicators in the matrix, following the Sustainability Metrics workshop in July, 2024\n\n\nCode\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/econ_tree.csv',\n  dimension_in = 'economics',\n  y_limits = c(-1.5, 2.1)\n)\n\n\n\n\n\n\n\n\n\n\n\n1.3 Refinement Meeting\nFinally, the tentative set of indicators following the indicator refinement meeting on November 15th, 2024\n\n\nCode\nsource('dev/get_dimension_ggraph.R')\nget_dimension_ggraph(\n  csv_path = 'data/trees/econ_meeting_tree.csv',\n  dimension_in = 'economics',\n  y_limits = c(-1.5, 2.1)\n)",
    "crumbs": [
      "Indicator Refinement",
      "Economics"
    ]
  },
  {
    "objectID": "pages/refine_economics.html#survey",
    "href": "pages/refine_economics.html#survey",
    "title": "Economic Indicator Refinement",
    "section": "2 Survey",
    "text": "2 Survey\nThese are the results from the follow-up survey to the economic indicator refinement meeting on November 15th. This feedback will be used to refine the framework for the next RFP.\n\n2.1 Indicators\n\n\nCode\nraw &lt;- read_csv('data/surveys/econ_survey.csv')\n\ndat &lt;- raw %&gt;% \n  select(\n    starts_with('Q'),\n    -ends_with('RANK')\n  ) %&gt;% \n  setNames(c(\n    'indi_must',\n    'indi_probably',\n    'indi_probably_not',\n    'indi_must_not',\n    paste0('add_indi_', 1:3),\n    'notes',\n    'idx_must',\n    'idx_probably',\n    'idx_probably_not',\n    'idx_must_not',\n    paste0('add_idx_', 1:3),\n    'idx_notes',\n    'final_notes'\n  )) %&gt;% \n  .[-c(1:2), ]\n\ngroups &lt;- select(dat, indi_must:indi_must_not, idx_must:idx_probably_not)\n\nto_df &lt;- function(x) {\n  x %&gt;% \n    str_split(',') %&gt;% \n    unlist() %&gt;% \n    table() %&gt;% \n    as.data.frame() %&gt;% \n    setNames(c('indicator', 'freq')) %&gt;% \n    arrange(desc(freq))\n}\n\nindi_out &lt;- map(groups[1:4], to_df)\nidx_out &lt;- map(groups[5:7], to_df)\n\n# Add scores by multipliers\nmultipliers &lt;- c(3:0)\nind_tables &lt;- map2(indi_out, multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(ind_tables, ~ {\n  col_name &lt;- str_remove(.y, 'indi_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n}) %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not * 1e2 + must_not,\n    indicator = fct_reorder(indicator, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:must_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      \"must_not\",\n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(indicator) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n\n\n\nCode\nggplot(graph_table, aes(\n  y = reorder(indicator, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Indicator\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 20),\n    legend.position = 'top'\n    ) +\n  scale_fill_brewer(\n    palette = \"RdBu\", \n    direction = -1,\n    limits = c(\n      \"must\",\n      \"probably\", \n      \"probably_not\", \n      \"must_not\" \n    ),\n    labels = c(\n      \"Must Include\", \n      \"Probably Include\", \n      \"Probably Not Include\", \n      \"Must Not Include\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nWe are coding this so “Must Include” is worth 3 points, “Probably Include” is worth 2 points, “Probably Not Include” is worth 1 point, and “Must Not Include” is worth 0 points. Note that the last column is the sum of proportions of “Must Include” and “Probably Include”. You can sort, search, expand, or page through the table below.\n\n\nCode\n# Add category to tables\nprops &lt;- ind_tables %&gt;% \n  imap(~ .x %&gt;% mutate(cat = .y)) %&gt;% \n  bind_rows() %&gt;% \n  select(-score)\n \n# Get proportion of probably include OR must include\nprop_prob_or_must_include &lt;- props %&gt;% \n  filter(cat %in% c('indi_must', 'indi_probably')) %&gt;% \n  group_by(indicator) %&gt;% \n  summarize(prop_include = sum(freq) / 6) %&gt;% \n  arrange(desc(prop_include))\n\n# Get proportion of must include\nprop_must_include &lt;- props %&gt;% \n  filter(cat == 'indi_must') %&gt;% \n  group_by(indicator) %&gt;% \n  summarize(prop_must = sum(freq) / 6) %&gt;% \n  arrange(desc(prop_must))\n\n# Add up weighted scores\nind_scores &lt;- ind_tables %&gt;% \n  bind_rows() %&gt;% \n  group_by(indicator) %&gt;% \n  summarize(score = sum(score, na.rm = TRUE)) %&gt;% \n  arrange(desc(score))\n\n# Join everything together\nscores_table &lt;- ind_scores %&gt;% \n  full_join(prop_must_include) %&gt;% \n  full_join(prop_prob_or_must_include) %&gt;% \n  arrange(desc(score)) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    across(c(3:4), ~ format(round(.x, 2), nsmall = 2))\n  ) %&gt;% \n  setNames(c('Indicator', 'Score', 'Proportion Must Include', 'Proportion Must OR Probably Include'))\n\n\n\n\n\n\n\n\n\n\n2.2 Indices\n\n\nCode\nidx_out &lt;- map(groups[5:7], to_df)\n\n# Add scores by multipliers\nmultipliers &lt;- c(3:1)\nidx_tables &lt;- map2(idx_out, multipliers, ~ {\n  .x %&gt;% \n    mutate(\n      freq = as.numeric(freq),\n      multiplier = .y,\n      score = freq * multiplier,\n    ) %&gt;% \n    select(index = indicator, freq, score)\n})\n\n# Set up DF for color graph \ngraph_table &lt;- imap(idx_tables, ~ {\n  col_name &lt;- str_remove(.y, 'idx_')\n  .x %&gt;% \n    rename(!!sym(col_name) := freq) %&gt;% \n    select(-score)\n}) %&gt;% \n  reduce(full_join) %&gt;% \n  mutate(\n    across(where(is.numeric), ~ ifelse(is.na(.x), 0, .x)),\n    sort_key = must * 1e6 + probably * 1e4 + probably_not,\n    index = fct_reorder(index, sort_key, .desc = TRUE)\n  ) %&gt;% \n  pivot_longer(\n    cols = must:probably_not,\n    names_to = \"category\",\n    values_to = \"count\"\n  ) %&gt;% \n  mutate(\n    category = fct_relevel(\n      category, \n      \"probably_not\", \n      \"probably\", \n      \"must\"\n    )\n  ) %&gt;%\n  group_by(index) %&gt;%\n  mutate(proportion = count / sum(count)) %&gt;%\n  ungroup()\n\n\ncolors &lt;- RColorBrewer::brewer.pal(4, 'RdBu')[2:4]\n\nggplot(graph_table, aes(\n  y = reorder(index, sort_key),\n  x = proportion, \n  fill = category\n)) +\n  geom_col(position = \"stack\") +  \n  labs(\n    y = \"Index\",\n    x = \"Proportion\",\n    fill = \"Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 16),\n    legend.position = 'top'\n    ) +\n  scale_fill_manual(\n    values = rev(colors),\n    limits = c(\n      \"must\",\n      \"probably\",\n      \"probably_not\"\n    ),\n    labels = c(\n      \"Must Include\",\n      \"Probably Include\",\n      \"Probably Not Include\"\n    )\n  )\n\n\n\n\n\n\n\n\n\nThe indices are going through the same treatment as indicators above - scored from 3 to 0. Note that there were no indices rated as “Must Not Include”.",
    "crumbs": [
      "Indicator Refinement",
      "Economics"
    ]
  },
  {
    "objectID": "pages/sensitivity.html",
    "href": "pages/sensitivity.html",
    "title": "Metric Aggregation",
    "section": "",
    "text": "Examples:\n\ncite bene et al 2019 (Béné et al. 2019)\n\nwhat happens when we change the number of indicators"
  },
  {
    "objectID": "pages/sensitivity.html#introduction",
    "href": "pages/sensitivity.html#introduction",
    "title": "Metric Aggregation",
    "section": "",
    "text": "Examples:\n\ncite bene et al 2019 (Béné et al. 2019)\n\nwhat happens when we change the number of indicators"
  },
  {
    "objectID": "pages/overview.html",
    "href": "pages/overview.html",
    "title": "Overview",
    "section": "",
    "text": "Dr. Josh Taylor (left) and Dr. David Conner (right) at the FSRC Sustainability Metrics workshop in 2024. Photo by Colleen Goodhue, FSRC.\n\n\nThe original framework of dimensions, indices, and indicators representing food system sustainability was developed through a transdisciplinary team science process described in detail by Wiltshire et al. (2024). The figure below shows the structure of this collaborative process.\nAs the project progressed, a collection of new indicators were proposed across all dimensions, leading up to a total of 135 indicators. This full set of indicators is shown in Section 2. Starting in July of 2024, the FSRC has been using a collaborative and transparent process to reduce the number of indicators to manageable amount that. More information about this refinement process can be found in the Indicator Refinement pages.\n\n\n\nTeam science diagram from Wiltshire et al., 2024.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "pages/overview.html#introduction",
    "href": "pages/overview.html#introduction",
    "title": "Overview",
    "section": "",
    "text": "Dr. Josh Taylor (left) and Dr. David Conner (right) at the FSRC Sustainability Metrics workshop in 2024. Photo by Colleen Goodhue, FSRC.\n\n\nThe original framework of dimensions, indices, and indicators representing food system sustainability was developed through a transdisciplinary team science process described in detail by Wiltshire et al. (2024). The figure below shows the structure of this collaborative process.\nAs the project progressed, a collection of new indicators were proposed across all dimensions, leading up to a total of 135 indicators. This full set of indicators is shown in Section 2. Starting in July of 2024, the FSRC has been using a collaborative and transparent process to reduce the number of indicators to manageable amount that. More information about this refinement process can be found in the Indicator Refinement pages.\n\n\n\nTeam science diagram from Wiltshire et al., 2024.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "pages/overview.html#sec-framework_overview",
    "href": "pages/overview.html#sec-framework_overview",
    "title": "Overview",
    "section": "2 Framework Overview",
    "text": "2 Framework Overview\nBelow is a diagram of all 136 indicators in the framework as of July, 2024. Colors represent dimensions, and splits occur at the dimension and index level. See the table in Section 3 for a more detailed look at indicators.\n\n\nCode\n## Load packages\npacman::p_load(\n  ggraph,\n  igraph,\n  dplyr,\n  RColorBrewer,\n  viridisLite\n)\n\n\n## Load data and add an origin level\ndat &lt;- readRDS('data/trees/tree_dat.rds') %&gt;% \n  mutate(Framework = 'Sustainability') %&gt;% \n  select(Framework, Dimension:Indicator)\n\n\n## Make edges\n# include groupings by dimension, then combine them\nedges &lt;- list()\nedges$sm_dim &lt;- dat %&gt;% \n  select(Framework, Dimension) %&gt;% \n  unique() %&gt;% \n  rename(from = Framework, to = Dimension) %&gt;% \n  mutate(group = to)\nedges$dim_ind &lt;- dat %&gt;% \n  select(Dimension, Index) %&gt;% \n  unique() %&gt;% \n  rename(from = Dimension, to = Index) %&gt;% \n  mutate(group = from)\nedges$ind_ind &lt;- dat %&gt;% \n  select(Index, Indicator) %&gt;% \n  unique() %&gt;% \n  rename(from = Index, to = Indicator) %&gt;% \n  mutate(group = edges$dim_ind$from[match(.$from, edges$dim_ind$to)])\nedges &lt;- bind_rows(edges)\n\n\n## Make vertices\n# Each line is a single vertex (dimension, index, or indicator)\n# We are just giving them random values to control point size for now\nvertices = data.frame(\n  name = unique(c(as.character(edges$from), as.character(edges$to))) , \n  value = runif(nrow(edges) + 1)\n) \n\n# Add the dimension groupings to the vertices as well\nvertices$group = edges$group[match(vertices$name, edges$to)]\n\n# Calculate the angles to arrange indicator labels\nvertices$id = NA\nmyleaves = which(is.na(match(vertices$name, edges$from)))\nnleaves = length(myleaves)\nvertices$id[myleaves] = seq(1:nleaves)\nvertices$angle = 90 - 360 * vertices$id / nleaves\n\n# Calculate alignment of indicator labels\nvertices$hjust &lt;- ifelse(vertices$angle &lt; -90, 1, 0)\n\n# Flip label angles around 180 degrees if they are facing the wrong way\nvertices$angle &lt;- ifelse(vertices$angle &lt; -90, vertices$angle + 180, vertices$angle)\n\n\n## Create graph\n# Make ggraph object from edges and vertices\ngraph &lt;- graph_from_data_frame(edges, vertices = vertices)\n\n# Plot the graph\nggraph(graph, layout = 'dendrogram', circular = TRUE) +\n  \n  # Color edges by dimension\n  geom_edge_diagonal(aes(color = group), width = 0.5) +\n  \n  # Create text for indicators using angles, hjust, and dimension groupings\n  geom_node_text(\n    aes(\n      x = x * 1.04,\n      y = y * 1.04,\n      filter = leaf,\n      label = name,\n      angle = angle,\n      hjust = hjust,\n      colour = group\n    ),\n    size = 2.7,\n    alpha = 1\n  ) +\n  \n  # Make the points for indicators based on dimension groupings\n  # geom_node_point(aes(\n  #   filter = leaf,\n  #   x = x * 1.07,\n  #   y = y * 1.07,\n  #   colour = group,\n  #   size = value,\n  #   alpha = 0.2\n  # )) +\n  \n  # Label the dimensions within the graph\n  geom_node_label(\n    aes(label = ifelse(name == group, name, NA)),\n    label.padding = unit(0.2, \"lines\"),\n    label.r = unit(0.3, \"lines\"),\n    label.size = 0.1,\n    size = 3\n  ) +\n  \n  # Various formatting options\n  scale_colour_manual(values = brewer.pal(5, 'Set1')) +\n  scale_edge_color_manual(values = brewer.pal(5, 'Set1')) +\n  scale_size_continuous(range = c(0.1, 7)) +\n  theme_void() +\n  theme(\n    legend.position = \"none\",\n    plot.margin = unit(c(0, 0, 0, 0), \"cm\")\n  ) +\n  expand_limits(x = c(-2, 2), y = c(-2, 2))\n\n\n\n\n\nRadial dendrogram of Sustainability Metrics framework",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "pages/overview.html#sec-framework_table",
    "href": "pages/overview.html#sec-framework_table",
    "title": "Overview",
    "section": "3 Full Indicator Table",
    "text": "3 Full Indicator Table\nBelow is an interactive table with the full set of 135 indicators from July of 2024. You can search, filter, and page through the table, and download the filtered set of data as a .csv file using the download button.\n\n\nCode\npacman::p_load(\n  dplyr,\n  reactable,\n  stringr,\n  htmltools\n)\n\n# Load framework data as a tree\ntree &lt;- readRDS('data/trees/tree_dat.rds')\n\n# Load custom reactable table function\nsource('dev/get_reactable.R')\n\n# Pick out variables to display\ndat &lt;- tree %&gt;% \n  select(-c(tooltip, count_))\n\n# Make reactable table\nhtmltools::browsable(\n  tagList(\n    tags$div(\n      style = \"display: flex; margin-bottom: 20px; justify-content: center;\",\n      tags$button(\n          class = \"btn btn-primary\",\n          style = \"display: flex; align-items: center; gap: 8px; padding: 8px 12px;\",\n          tagList(fontawesome::fa(\"download\"), \"Download as CSV\"),\n          onclick = \"Reactable.downloadDataCSV('indicator_table', 'indicator_framework.csv')\"\n        )\n      ),\n    get_reactable(\n      dat,\n      elementId = \"indicator_table\"\n    )\n  )\n)\n\n\n\n\n\nDownload as CSV",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "pages/refinement_process.html",
    "href": "pages/refinement_process.html",
    "title": "Indicator Refinement Process",
    "section": "",
    "text": "To Add:\n\nDescribe dimension meetings\nlink Wiltshire (Wiltshire et al. 2024)\nLink Bene et al 2024 (Béné et al. 2024), describe their process\nWhat is more settled, what is not (social and human)\n\n\n\n\nWhiteboard from economics dimension refinement meeting, November 15th, 2024",
    "crumbs": [
      "Indicator Refinement",
      "Process"
    ]
  },
  {
    "objectID": "pages/refinement_process.html#introduction",
    "href": "pages/refinement_process.html#introduction",
    "title": "Indicator Refinement Process",
    "section": "",
    "text": "To Add:\n\nDescribe dimension meetings\nlink Wiltshire (Wiltshire et al. 2024)\nLink Bene et al 2024 (Béné et al. 2024), describe their process\nWhat is more settled, what is not (social and human)\n\n\n\n\nWhiteboard from economics dimension refinement meeting, November 15th, 2024",
    "crumbs": [
      "Indicator Refinement",
      "Process"
    ]
  }
]