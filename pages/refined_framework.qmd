---
title: "Refined Secondary Data Framework"
format:
  html:
    fig-dpi: 200
warnings: false
---

```{r}
#| label: setup
#| echo: false
# source('dev/get_setup.R')
# get_setup()
pacman::p_load(
  dplyr,
  conflicted,
  purrr,
  stringr,
  ggraph,
  igraph,
  dplyr,
  readr,
  RColorBrewer,
  paletteer,
  snakecase,
  tibble, 
  tidyr,
  htmltools,
  reactable
)
pacman::p_load_gh('ChrisDonovan307/projecter')
conflicts_prefer(
  dplyr::select(),
  dplyr::filter(),
  dplyr::arrange(),
  dplyr::summarize(),
  dplyr::as_data_frame(),
  .quiet = TRUE
)
```

This page shows the partially refined framework as it stands after three dimension meetings: economics, environment, and production. It also includes a selection of preliminary secondary data metrics to match those indicators. We have collected around 1500 metrics so far, although many of those are fluff. Effectively, we have around 600 meaningful metrics. Here, we are using a selection of ~129 of them to make a preliminary framework for preliminary analyses. This is more than we have been planning for the refined framework, which will give us a chance to see how aggregate scores change with different combinations of metrics and under different methods of aggregation. 

Note that where I have no metrics to represent an indicator, I have added placeholders of the format `NONE_#`. This does not mean that secondary data do not exist, just that I either haven't found it or haven't cleaned and wrangled it yet. At the time of writing, there are several of the latter, including crop failure, access to care, racial diversity, and others. If you know of any secondary data to fill in the gaps or improve on data we already have, please do reach out to let Chris know about it.

At the bottom of this page is a metadata table with sources and definitions for all the metrics.

## Partially Refined Framework

Here is the framework with a selection of secondary metrics, split into each dimension for ease of reading.

```{r}
#| label: wrangle_framework
#| output: false
pacman::p_load(
  conflicted,
  dplyr,
  purrr,
  stringr,
  readr
)
source('dev/get_dimension_ggraph.R')

# Load refined framework
sm_data <- readRDS('data/sm_data.rds')
raw_frame <- sm_data[['refined_tree']]

# Clean up the framework df 
frame <- raw_frame %>% 
  select(dimension:variable_name, use) %>% 
  filter(use == 'x') %>% 
  select(-use) %>% 
  mutate(
    metric = ifelse(
      str_length(metric) > 45,
      paste0(str_sub(metric, end = 45), '...'),
      metric
    )
  )
get_str(frame)

# Save frame to rds for use in subsequent scripts
saveRDS(frame, 'data/frame.rds')

# Start a list to save outputs for preso
plots <- list()
```

### Environment

We have reasonable representation of the environment dimension, although some metrics are proxies that are stretched a bit too far. I do have biodiversity and sensitive habitat data, but still need to process it at the state level and add it to the collection. Some weak points are the carbon stocks indicator - so far, this is all from the TreeMap 2016 dataset. I would love to include other stocks of carbon if anyone has leads on datasets. The metrics for embodied carbon are also stretches.

One gap I've noticed since this dimension was reworked in the dimension meeting is that there is no direct treatment of soil health included anymore. We might add soil metrics for carbon stocks or forest health, but there is no clear home for it. And that being said, I have had no luck finding any reliable soil health datasets, so I'm all ears here too.

```{r}
#| label: environment
#| code-fold: true
#| warning: false
#| fig-height: 8
#| fig-width: 10
#| fig-align: center
source('dev/get_dimension_ggraph.R')
plots$environment <- get_dimension_ggraph(
  framework_df = frame,
  dimension_in = 'environment',
  include_metrics = TRUE,
  y_limits = c(-2, 3.25),
  palette = "ggthemes::stata_s2color"
)
plots$environment
```

### Economics

It has definitely been easier to find economics data than other dimensions. Worth noting here is that the access to land indicator is not ideal. I'm using value and farm size as a proxy for access. Use of crop insurance is also a proxy, since I could not find direct insurance claim data from FSA. So for now, we are just using the ag secretary declarations of disasters that allow for insurance claims as a proxy.

```{r}
#| label: economics
#| code-fold: true
#| warning: false
#| fig-height: 8
#| fig-width: 10
#| fig-align: center
plots$economics <- get_dimension_ggraph(
  framework_df = frame,
  dimension_in = 'economics',
  include_metrics = TRUE,
  y_limits = c(-1.5, 3.1),
  palette = "ggthemes::stata_s2color"
)
plots$economics
```

### Production

Agricultural exports are a pretty robust dataset at the state level from ERS, although the import data only includes the values of the top five imports for each state - not ideal. Crop diversity is based on the Cropland Data Layer, a USDA NASS spatial model estimating of crop types, which I used to calculate Shannon diversity at the county and state level. The rest of the metrics come from NASS. Production is an area in which I feel better about using NASS data than some other dimensions, but there is still some risk of these data not representing VT farms appropriately.

```{r}
#| label: production
#| code-fold: true
#| warning: false
#| fig-height: 7
#| fig-width: 10
#| fig-align: center
plots$production <- get_dimension_ggraph(
  framework_df = frame,
  dimension_in = 'production',
  include_metrics = TRUE,
  y_limits = c(-1.75, 3),
  palette = "ggthemes::stata_s2color"
)
plots$production
```

### Health

The Food Environment Atlas has lots of data on access and nutrition, which accounts for much of the food security data, along with NASS. I threw in a slew of metrics for physical health under the temporary indicator name 'physical health tbd' just to differentiate it from the index. I also have a handful of established composite indices for health, including the [UW County Health Rankings](https://www.countyhealthrankings.org/what-impacts-health/county-health-rankings-model) metrics for health factors (behavior, clinical care, social and economic factors, physical environment) and health outcomes (length of life, quality of life), as well as some established food security indices that are not included in this framework. I will instead use them to compare to dimensions scores as external validation in the [Validation](../pages/validation.qmd) section.

```{r}
#| label: health
#| code-fold: true
#| fig-height: 11
#| fig-width: 10
#| fig-align: center
plots$health <- get_dimension_ggraph(
  framework_df = frame,
  dimension_in = 'health',
  include_metrics = TRUE,
  y_limits = c(-1.7, 3),
  palette = "ggthemes::stata_s2color"
)
plots$health
```

### Social

The social dimension is admittedly slim, but it could have been a lot worse. The County Health Rankings dataset brings a few useful metrics here, like social associations and disconnected youth. Census participation and voter turnout are proxies for participatory governance in food systems - I can't imagine finding something much more specific than that at this point. I also plan on replacing mean producer age with a diversity index for age structure among producers.

```{r}
#| label: social
#| code-fold: true
#| warning: false
#| fig-height: 8
#| fig-width: 10
#| fig-align: center
plots$social <- get_dimension_ggraph(
  framework_df = frame,
  dimension_in = 'social',
  include_metrics = TRUE,
  y_limits = c(-1.7, 3),
  palette = "ggthemes::stata_s2color"
)

# Save list of plots for preso
saveRDS(plots, 'preso/plots/frameworks.rds')

plots$social
```

## Metadata

Here we pull out the set of 129 metrics from the larger collection and arrange them into a more functional, tidy dataframe:

```{r}
#| label: wrangle_metrics
#| output: false
# pacman::p_load(
#   dplyr,
#   tidyr,
#   tibble
# )

# Get latest year function
source('dev/data_pipeline_functions.R')

# Load metrics data
sm_data <- readRDS('data/sm_data.rds')
metrics <- sm_data$metrics

# Load refined framework
raw_tree <- sm_data[['refined_tree']]

# Load refined framework
frame <- readRDS('data/frame.rds')


## Join with metadata to double check the resolution of our metrics
# meta <- sm_data$metadata
# get_str(meta)
# 
# dat <- frame %>% 
#   dplyr::filter(variable_name != 'NONE') %>% 
#   dplyr::select(variable_name) %>% 
#   left_join(meta, by = 'variable_name') %>% 
#   unique()
# get_str(dat)

# Pull it from the actual metrics data
metrics <- sm_data$metrics %>% 
  dplyr::filter(
    variable_name %in% frame$variable_name,
    fips %in% sm_data$state_key$state_code
  )
get_str(metrics)

# Filter to latest year for each metric, and pivot wider
# Also removing census participation - don't really have data at state level
# Note to aggregate counties for this at some point
metrics_df <- metrics %>%
  mutate(
    value = ifelse(value == 'NaN', NA, value),
    value = str_remove_all(value, ','),
    value = as.numeric(value)
  ) %>%
  get_latest_year() %>% 
  pivot_wider(
    names_from = 'variable_name',
    values_from = 'value'
  ) %>% 
  unnest(cols = !fips) %>% 
  unique()
get_str(metrics_df)

# Let's get rid of the years so they are easier to work with
names(metrics_df) <- str_split_i(names(metrics_df), '_', 1)
get_str(metrics_df)

# Also get rid of DC - too many missing values
metrics_df <- metrics_df %>% 
  dplyr::filter(fips != '11')

# Save this for use in subsequent pages
saveRDS(metrics_df, 'data/metrics_df.rds')
```

Below, the metrics are displayed in a table that lets you browse and explore them. 

```{r}
#| label: metadata_table
#| warning: false
pacman::p_load(
  dplyr,
  reactable,
  stringr,
  htmltools
)

# Pull var names from metrics_df out of full metadata
vars <- unique(frame$variable_name) %>% 
  str_subset('NONE', negate = TRUE)


## Load metadata table, but keep framework from frame []
metadata <- sm_data$metadata %>% 
  select(-c(dimension, index, indicator)) %>% 
  dplyr::filter(variable_name %in% vars)

# Grab the framework variables from the frame to combine with metadata
updated_framework <- frame %>% 
  dplyr::select(variable_name, dimension, index, indicator)

# Combine them
metadata <- inner_join(metadata, updated_framework, by = 'variable_name')
# get_str(metadata)


## Pick out variables to display
metadata <- metadata %>% 
  select(
    metric,
    'Variable Name' = variable_name,
    definition,
    dimension,
    index,
    indicator,
    units,
    years = year,
    'Year' = latest_year, # Renaming latest year as year, not including og year
    source,
    scope,
    updates,
    resolution,
    url
) %>% 
  setNames(c(str_to_title(names(.))))

# Save this for preso
saveRDS(metadata, 'preso/data/meta_for_table.rds')

###
htmltools::browsable(
  tagList(
    
    tags$div(
      style = "display: flex; gap: 16px; margin-bottom: 20px; justify-content: center;",
      
      tags$button(
        class = "btn btn-primary",
        style = "display: flex; align-items: center; gap: 8px; padding: 8px 12px;",
        tagList(fontawesome::fa("download"), "Show/hide more columns"),
        onclick = "Reactable.setHiddenColumns('metadata_table', prevColumns => {
          return prevColumns.length === 0 ? ['Definition', 'Scope', 'Resolution', 'Url'] : []
        })"
      ),
      
      tags$button(
        class = "btn btn-primary",
        style = "display: flex; align-items: center; gap: 8px; padding: 8px 12px;",
        tagList(fontawesome::fa("download"), "Download as CSV"),
        onclick = "Reactable.downloadDataCSV('metadata_table', 'sustainability_metadata.csv')"
      )
    ),
    
    reactable(
      metadata[, which(names(metadata) != 'Years')],
      sortable = TRUE,
      resizable = TRUE,
      filterable = TRUE,
      searchable = TRUE,
      pagination = TRUE,
      bordered = TRUE,
      wrap = TRUE,
      rownames = FALSE,
      onClick = 'select',
      striped = TRUE,
      pageSizeOptions = c(5, 10, 25, 50, 100),
      defaultPageSize = 5,
      showPageSizeOptions = TRUE,
      highlight = TRUE,
      style = list(fontSize = "14px"),
      compact = TRUE,
      fullWidth = TRUE,
      columns = list(
        Metric = colDef(
          minWidth = 200,
          sticky = 'left'
        ),
        'Variable Name' = colDef(
          minWidth = 150
        ),
        Definition = colDef(
          minWidth = 250
        ),
        'Latest Year' = colDef(minWidth = 75),
        Source = colDef(minWidth = 250),
        Scope = colDef(show = FALSE),
        Resolution = colDef(show = FALSE),
        Url = colDef(
          minWidth = 300,
          show = FALSE
        )
      ),
      defaultColDef = colDef(minWidth = 100),
      elementId = "metadata_table",
      details = function(index) {
        div(
          style = "padding: 15px; border: 1px solid #ddd; margin: 10px 0;
             background-color: #ecf4ed; border-radius: 10px; border-color: black;
             box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);",
          
          tags$h4(
            strong("Details"), 
          ),
          tags$p(
            strong('Metric Name: '), 
            as.character(metadata[index, 'Metric']),
          ),
          tags$p(
            strong('Variable Name: '), 
            as.character(metadata[index, 'Variable Name']),
          ),
          tags$p(
            strong('Definition: '), 
            as.character(metadata[index, 'Definition']),
          ),
          tags$p(
            strong('Source: '), 
            as.character(metadata[index, 'Source'])
          ),
          tags$p(
            strong('Latest Year: '), 
            as.character(metadata[index, 'Year'])
          ),
          tags$p(
            strong('All Years (cleaned, wrangled, and included): '), 
            as.character(metadata[index, 'Years'])
          ),
          tags$p(
            strong('Updates: '), 
            str_to_title(as.character(metadata[index, 'Updates']))
          ),
          tags$p(
            strong('URL: '), 
            tags$a(
              href = as.character(metadata[index, 'Url']),
              target = '_blank',
              as.character(metadata[index, 'Url'])
            )
          )
        )
      }
    )
  )
)

```