---
title: "Sensitivity and Uncertainty"
format:
  html:
    fig-dpi: 200
editor_options: 
  chunk_output_type: console
warnings: false
---

```{r}
#| label: setup
#| include: false
source('dev/get_aggregations.R')
pacman::p_load(
  dplyr,
  purrr,
  tictoc,
  stringr,
  ggplot2,
  ggpubr,
  snakecase
)
conflicts_prefer(
  dplyr::select(),
  dplyr::filter(),
  dplyr::arrange(),
  dplyr::summarize(),
  dplyr::as_data_frame(),
  dplyr::pull(),
  .quiet = TRUE
)
```

Steps

- Set up grid of uncertain inputs (normalization, aggregation, indicators)
- Sample from input factors
- Explore distributions of each dimension rank

# Dimension

```{r}
#| label: input_grid
## Load data for aggregations
state_key <- readRDS('data/sm_data.rds')[['state_key']]
metrics_df <- readRDS('data/metrics_df.rds')
normed_data <- readRDS('data/normalized_metrics_df.rds')
framework <- readRDS('data/filtered_frame.rds')


## Set up options for uncertain input factors
normalizations <- c(
  'minmax',
  'zscore',
  'winsor',
  'rank',
  'boxcox'
)
aggregations <- c('geometric', 'arithmetic')
# metrics <- c('none', framework$variable_name) # 129 metrics
indicators <- c('none', unique(framework$indicator)) # 39 indicators


## Try a grid of all possible combinations
grid <- expand.grid(
  normalizations,
  aggregations,
  indicators
) %>% 
  setNames(c('norms', 'aggs', 'indics'))
# Could loop through it just once, or sample from it?
```


```{r}
#| label: 400_iterations
#| eval: false
# For each set of input factors, get dimension scores for VT
tic()
out <- map(1:nrow(grid), \(i) {
  
  # Print outputs for debugging
  print(grid[i, ])
  
  get_time(c('~~~~~ Starting row ', i, ' at:'))
  # Run model
  model_out <- get_all_aggregations(
    normed_data = normed_data[as.character(grid$norms[i])],
    framework = framework,
    state_key = state_key,
    metrics_df = metrics_df,
    aggregation = grid$aggs[i],
    remove_indicators = grid$indics[i]
  )
}, .progress = TRUE)
toc()
# ~ 8 minutes 20 seconds

get_str(out)
get_str(out, 4)

# Save this so we don't have to run it again
# saveRDS(out, 'data/objects/sensitivity_out.RDS')
```


```{r}
#| label: wrangle_output
#| output: false
# Load up saved sensitivity out
sens_out <- readRDS('data/objects/sensitivity_out.RDS')

## Get names of sampled inputs to identify later
sampled_inputs <- map_chr(1:nrow(grid), ~ {
  paste0(
    c(
      as.character(grid[.x, 1]), 
      str_sub(grid[.x, 2], end = 3),
      snakecase::to_snake_case(as.character(grid[.x, 3]))
    ), 
    collapse = '_'
  )
})

# Pull out just VT dimension scores
dimension_df <- map_dfr(sens_out, ~ {
  df <- .x[[1]]$dimension_scores %>% 
    as.data.frame() %>% 
    filter(str_length(state) == 2) %>% 
    mutate(
      across(
        !state, ~ as.numeric(dense_rank(.x)), 
        .names = "{.col}_rank"
      )) %>% 
    filter(state == 'VT') %>% 
    select(matches(regex('_')))
}) %>% 
  mutate(inputs = sampled_inputs)
get_str(dimension_df, 3)
# Each line is result from one sample.

# Get vector of dimension rank names
dimension_ranks <- str_subset(names(dimension_df),  '_') %>% 
  str_remove('_rank') %>% 
  snakecase::to_title_case()
```


```{r}
#| label: distribution_plots
#| fig-width: 10
#| fig-height: 8
#| fig-align: center
#| out-width: 80%
#| fig-caption: Distribution plots for Vermont dimension scores over 400 iterations of uncertain input factors.
plots <- map2(str_subset(names(dimension_df), '_'), dimension_ranks, ~ {
  dimension_df %>% 
    ggplot(aes(x = !!sym(.x))) + 
    geom_density(
      fill = 'lightblue',
      color = 'royalblue'
    ) +
    theme_classic() +
    labs(
      x = paste(.y),
      y = 'Density',
      title = .y
      # title = paste0('Distribution of ', .y, 's for Vermont')
    )
})
plot <- ggarrange(
  plotlist = plots,
  nrow = 3,
  ncol = 2
)
annotate_figure(
  plot,
  top = text_grob(
    'Distributions of VT Dimension Ranks (Higher is Better)',
    size = 14,
    hjust = 0.5
  )
)
```

# Indicators

Steps

- Use same iteration from 400 outputs
- For each indicator, get mean of values where it is included and mean of values where it is not. Record the difference
- Plot with flipped axes, indicators on y axis, difference in x-axis
- Do one of these plots for each dimension

Note that we want to end up with 5 DFs - One for each dimension

```{r}
#| label: wrangle_indicators
get_str(dimension_df)

# Get a cleaner df to work with our indicators
ind_df <- dimension_df %>% 
  mutate(indicator = str_split_fixed(inputs, '_', 3)[, 3]) %>% 
  select(-inputs)
  # filter(indicator != 'none')
get_str(ind_df)

# Do it for one indicator. For first indicator (access_to_land), get mean with
# and without for each dim
# var <- 'access_to_land'

# Dimension scores with indicator (full set)
# with <- ind_df %>% 
  # summarize(across(where(is.numeric), ~ mean(.x)))
# get_str(with)

# Dimension scores without indicator
# without <- ind_df %>% 
#   filter(indicator != var) %>% 
#   summarize(across(where(is.numeric), ~ mean(.x)))
# get_str(without)
# 
# # Get difference. Shows effect of including - positive means gets better
# (out <- with - without)
# 

## Map it
# We can do the 'with' group once for all indicators
# get_str(ind_df)
# with <- ind_df %>% 
#   summarize(across(where(is.numeric), ~ mean(.x)))
# get_str(with)

get_str(framework)

# Get a version of framework with indicators in snake case to match
snake_framework <- framework %>% 
  mutate(indicator = snakecase::to_snake_case(indicator))

unique_indicators <- ind_df$indicator %>% 
  unique() %>% 
  str_subset('none', negate = TRUE)

# Map over indicators to get the 'without' scores, then get difference
influence_df <- map(unique_indicators, \(ind) {
 
  # Get scores with all indicators in that dimension. This is the 'none' option
  with <- ind_df %>% 
    dplyr::filter(indicator == 'none') %>% 
    summarize(across(where(is.numeric), ~ mean(.x)))
    
  # Get scores with that dimension's indicators but WITHOUT that indicator
  # Note that we set it equal to that indicator to get get data without it...
  without <- ind_df %>% 
    dplyr::filter(indicator == ind) %>% 
    summarize(across(where(is.numeric), ~ mean(.x)))
  
  # Get difference in dimension scores, with and without
  # Will show impact of including it
  out <- with - without
  return(out)
}) %>% 
  bind_rows() %>% 
  mutate(indicator = unique_indicators)
get_str(influence_df)

# Now we need to pull this apart into 5 data frames, one for each dimension
dim_dfs <- list()
for (i in 1:5) {
  name <- names(influence_df)[i]
  dim_dfs[[name]] <- influence_df %>% 
    filter(.data[[name]] != 0) %>% 
    mutate(rank_diff = .data[[name]]) %>% 
    select(indicator, rank_diff) %>% 
    mutate(
      Influence = ifelse(rank_diff > 0, 'Positive', 'Negative'),
      indicator = snakecase::to_title_case(indicator)
    )
}
get_str(dim_dfs)
# Noice

ind_plots <- imap(dim_dfs, ~ {
  title_name <- .y %>% 
    str_remove('_rank') %>% 
    snakecase::to_title_case()
  .x %>% 
    ggplot(aes(
      x = fct_reorder(indicator, rank_diff), 
      y = rank_diff, color = Influence
    )) +
    geom_segment(aes(
        x = fct_reorder(indicator, rank_diff),
        xend = indicator, 
        y = 0, 
        yend = rank_diff
      ),
      color = 'grey'
    ) +
    geom_point(size = 3) +
    geom_text(
      aes(
        label = indicator, 
        color = Influence
      ),
      nudge_x = 0.25,
      show.legend = FALSE
    ) + 
    geom_hline(
      yintercept = 0, 
      lty = 2,
      alpha = 0.5
    ) +
    coord_flip() +
    theme_classic() +
    labs(
      x = NULL,
      y = 'Average Difference in Rank',
      title = paste0('Influence of Indicators on ', title_name)
    ) +
    theme(
      axis.text.y = element_blank(),
      axis.title.y = element_blank(),
      axis.ticks.y = element_blank(),
      axis.line.y = element_blank()
    ) +
    expand_limits(y = c(max(.x$rank_diff + 4), min(.x$rank_diff - 4)))
})
ind_plots[[1]]
ind_plots

```

