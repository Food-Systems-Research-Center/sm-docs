---
title: "Metric Aggregation"
format:
  html:
    fig-dpi: 200
editor_options: 
  chunk_output_type: console
warnings: false
---

# Introduction

Exploring methods of aggregating data into index and dimension scores. To Add:

- Primer on methods, cite [@oecdHandbookConstructingComposite2008]
- Examples
  - cite Schneider [@schneider2023StateFoodSystems]
    - rank order comparisons only
    - compare to global weighted means by groups based on GDP
    - min max scaling to show distance from global groups
  - cite Bene et al 2019 [@bene2019GlobalMapIndicators]
    - Box cox for most skewed indicators (skew > 2)
    - then min max 
    - geometric means for enviro and economic dimensions
    - arithmetic means for social and food dimensions
    - geometric mean for combining all four dimensions into one
  - cite Nicoletti [@nicolettiSummaryIndicatorsProduct2000]
    - Use normaliaed square loadings (indicator weights) to weight each indicator
  - cite Gomez Limon and Sanchez [@gomez-limon2010EmpiricalEvaluationAgricultural]
    - min max normalization
    - Aggregation - compared several different methods - mostly correlate, no big differences
      - weighted sum of indicators
      - product of weighted indicators
      - muilticriteria function based on distance to ideal point
    - Weighting - did both PCA and analytic hierarchy process
    - Validation (identifying important factors) - double censored tobit - index as dependent, indicators as independent
  - cite demelash and aremu [@adamudemelash2024MeasuringFoodSystem]
    - Normalization - distance to reference
      - refernce determined by quartile analysis
      - not affected by outliers, extreme values
    - Weighting - equal
    - Aggregation - linear
    - Additive method for indicators within dimensions
    - Geometric means for aggregate scores across four dimensions


```{r}
#| label: prep
#| echo: false
pacman::p_load(
  dplyr,
  purrr,
  conflicted
)

conflicted::conflicts_prefer(
  dplyr::select(),
  dplyr::summarize(),
  dplyr::filter(),
  .quiet = TRUE
)

sm_data <- readRDS('data/sm_data.rds')
```

# Imputation

First, check how much missing data there are. If it is within reason, use missForest algorithm to impute missing data [@stekhovenMissForestNonparametricMissing2012a]. This is particularly good at handling MAR data, and does a decent job at handling MNAR data and non-linear relationships as well. If less than 5% of data are missing, just about any method for handling it is reasonable, even listwise deletion [@beaujean2013].

```{r}
#| label: imputation
#| output: false
pacman::p_load(
  missForest,
  tibble
)

metrics_df <- readRDS('data/metrics_df.rds')
get_str(metrics_df)

# Check for missing data
skimr::skim(metrics_df)
mis_dat <- sum(is.na(metrics_df))/(nrow(metrics_df)*(ncol(metrics_df) - 1)) * 100 
mis_dat <- round(mis_dat, 3)

# Change fips from column to rowname so we can impute without losing it
metrics_df <- metrics_df %>% 
  column_to_rownames('fips')
get_str(metrics_df)

# Impute missing variables
set.seed(42)
mf_out <- metrics_df %>%
  missForest(
    ntree = 200,
    mtry = 10,
    verbose = FALSE,
    variablewise = FALSE
  )
# get_str(mf_out)
(oob <- mf_out$OOBerror)
# NRMSE 0.603

# Check missing again
skimr::skim(mf_out$ximp)
# Looks good

# Save just imputed data
imp_dat <- mf_out$ximp
```

We had `r mis_dat`% missing data, which is rather little, and gives us flexibility in handling it. The out of bag error estimate from the missForest imputation algorithm was `r oob`.

# Normalization

We are normalizing our data using three methods: min-max, Box-Cox, and Z-scores. (We might also consider Winsorizing at some point.) Results will be saved to a list of three normalized datasets so we can compare outcomes of each one and see what the consequences are.

**Min Max** [@oecdHandbookConstructingComposite2008]

Min-maxing scales all the data from 0 to 1 by subtracting the minimum value of each variable from all cases and dividing by the range of all cases in the variable. It is rather intuitive, as 1 is the best score, and 0 is the worst. This is a linear transformation, so the relationships between the values should not change.

\begin{equation}
I^t_qc = \frac{x^t_qc - min_c(x^{t_0}_q)}{max_c(x^{t_0}_q)-min_c(x^{t_0}_q)}
\end{equation}

Where $x^t_qc$ is the metric $q$ for state $c$ at time $t$. 

**Z-Scores** [@oecdHandbookConstructingComposite2008]

Z-scores are stardized to have a mean of 0 and a standard deviation of 1. Larger numbers are better, but there are no caps on the highest or lowest values. A value of 2 would mean that it is 2 standard deviations greater than the mean. Again, this is a linear transformation, so relationships between variables should not change.  

\begin{equation}
I^t_{qc} = \frac{x^t_{qc}-x^t_{qc=\overline{c}}}{\sigma^t_{qc=\overline{c}}}
\end{equation}

Where $x^t_qc$ is the metric $q$ for state $c$ at time $t$.

**Box Cox** [@bickel1981]

Box-Cox transformations are non-linear transformations that use an optimal value of lambda to make the distribution as normal as possible. This has some strengths in that the data are easier to work with in further analyses. It also effectively pulls outliers inward toward the center of the distribution. However, it also changes relationships between the variables, so it will distort any bivariate correlations.


\begin{equation}
{\rm For}\ \lambda\neq0,\ f\lambda(x) = (sign(x)|x|^\lambda-1)/\lambda
\end{equation}

\begin{equation}
{\rm For}\ \lambda = 0,\ f_0(x) = log(x)
\end{equation}



```{r}
#| label: normalization
#| warnings: false
pacman::p_load(
  forecast
)

# List of results
normed <- list()
# get_str(imp_dat)

# Z scores
normed$zscore <- imp_dat %>% 
  mutate(across(everything(), ~ as.numeric(scale(.x, scale = TRUE, center = TRUE))))

# Min Max
min_max <- function(x) {
  (x - min(x)) / (max(x) - min(x))
}
normed$minmax <- imp_dat %>% 
  mutate(across(everything(), min_max))

# Box Cox. Adding 1 as constant to remove zeroes
normed$boxcox <- imp_dat %>% 
  mutate(across(everything(), ~ BoxCox(.x + 1, lambda = 'auto')))
# map(normed, get_str)
```

# Directional Values

Here, we are assuming that each metric has a direction that is more sustainable than the opposite. Either more of it is better, or less of it is better. This is rather problematic in that just about any metric becomes negative with too much or too little of it. What might make more sense in the long run would be to consult the expertise of our teams and develop acceptable ranges for some metrics once they are settled. Still, just about every sustainability indicator framework does some variation of this one-way value system [@schneider2023StateFoodSystems; @bene2019GlobalMapIndicators; @nicolettiSummaryIndicatorsProduct2000; @jacobi2020NewUnderstandingEvaluation; @gomez-limon2010EmpiricalEvaluationAgricultural].

Alas, for now, we will invert variables in each of the transformed datasets as necessary so that larger numbers are more sustainable, and smaller numbers are less sustainable. The table below shows this assignment in the `desired_direction` column. For couple of variables (vacancy rate and animal sales as a percentage of all agricultural sales) I was not comfortable assigning one direction as better than the other, so I have removed them from the refined framework.

```{r}
#| label: directional_values
#| warnings: false
pacman::p_load(
  reactable
)

# map(normed, get_str)
# names(normed[[1]])

# Higher numbers should be better. Reverse metrics that are the opposite, where lower numbers are better:
reverse <- c(
  'unemploymentRate',
  'gini',
  'lowBirthweight',
  'teenBirths',
  'uninsured',
  'incomeInequality',
  'injuryDeaths',
  'drinkingWaterViolations',
  'prematureAgeAgjustedMortality',
  'infantMortality',
  'foodInsecurity',
  'drugOverdoseDeaths',
  'disconnectedYouth',
  'residentialSegregationBlackWhite',
  'motorVehicleCrashDeaths',
  'severeHousingCostBurden',
  'schoolSegregation',
  'foodInsecOverall',
  'foodInsecChild',
  'droughtMeanPercArea',
  'expChemicalPct',
  'waterIrrSrcOffFarmExpPerAcreFt',
  'ageProducers' # Could be better to use age diversity?
)

# Some are unclear - without clear direction, better to remove:
remove <- c(
  'vacancyRate',
  'salesAnimalPctSales'
)

# Remove from all three datasets
normed <- map(normed, ~ {
  .x %>% 
    select(-matches(remove))
})
# map(normed, get_str)

## Show table of which metrics were set in which direction
meta <- readRDS('data/sm_data.rds')[['metadata']]

# Reactable table showing var, metric, source, and direction
table <- meta %>% 
  filter(variable_name %in% names(imp_dat)) %>% 
  mutate(desired_direction = case_when(
    variable_name %in% reverse ~ 'Lower',
    variable_name %in% remove ~ 'Removed',
    .default = 'Higher'
  )) %>% 
  select(metric, definition, variable_name, desired_direction, source)
  
table %>% 
  reactable(
    sortable = TRUE,
    resizable = TRUE,
    filterable = TRUE,
    searchable = TRUE,
    pagination = TRUE,
    bordered = TRUE,
    wrap = TRUE,
    rownames = FALSE,
    onClick = 'select',
    striped = TRUE,
    pageSizeOptions = c(5, 10, 25, 50, 100),
    defaultPageSize = 5,
    showPageSizeOptions = TRUE,
    highlight = TRUE,
    style = list(fontSize = "14px"),
    compact = TRUE,
    fullWidth = TRUE
  )
```

# Aggregation

Here we are combining values in each indicator, index, and dimension using both arithmetic and geometric means [@oecdHandbookConstructingComposite2008]. Arithmetic means are fully compensable, in that a strong score in one area can make up for a weak score in another. Geometric means are only somewhat compensable - it effectively applies a penalty for unbalanced scores.

We might also consider PCA here, as we have done with the preliminary dimension metrics previously. But the n:p ratio is not in our favor for PCA as we have more metrics than states. Will revisit this, perhaps by splitting it up into dimensions again rather than trying the whole framework at once, or possible using a sparse PCA procedure that incorporates variable selection.

We will end up with 6 iterations of our data (3 normalization methods \* 2 aggregation methods).

Indicator Means:

```{r}
#| label: arithmetic_means
#| output: false
# We need to attach these back to framework from metadata
# Filter frame from earlier down to our current metrics
frame <- readRDS('data/frame.rds')
filtered_frame <- frame %>% 
  filter(variable_name %in% names(normed[[1]])) %>% 
  select(variable_name, indicator, index, dimension)
get_str(filtered_frame)

# Save this for later - use in regression and variable selection 
saveRDS(filtered_frame, 'data/filtered_frame.rds')

# Make a list where we hold scores for indicators, indices, and dimensions
scores <- list()

# Function for geometric mean
geometric_mean = function(x, na.rm = TRUE){
  exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))
}

# Get indicator scores across all three normalization methods
indicator_scores <- map(normed, \(df) {
  
  # For each df, calculate indicator means
  indicators_out <- map(unique(filtered_frame$indicator), \(ind) {
  
    # Column name based on indicator
    ind_snake <- ind
    
    # Split into groups by indicator, with one or more metrics each
    variables <- filtered_frame %>% 
      dplyr::filter(indicator == ind) %>% 
      pull(variable_name) %>% 
      unique()
    indicator_metrics <- df %>% 
      select(all_of(variables))
    
    # Get arithmetic and geo means for each indicator
    dfs <- list()
    dfs$arithmetic <- indicator_metrics %>%
      rowwise() %>%
      mutate(
        !!sym(ind_snake) := mean(c_across(everything())),
      ) %>%
      select(!!sym(ind_snake))
    dfs$geometric <- indicator_metrics %>% 
      rowwise() %>% 
      mutate(
        !!sym(ind_snake) := geometric_mean(c_across(everything())),
      ) %>%
      select(!!sym(ind_snake))
    return(dfs) 
  })
  
  # Rearrange so we put each aggregation method (arith, geo) together
  norm_out <- list()
  norm_out$arithmetic <- map(indicators_out, ~ {
    .x[grep("arithmetic", names(.x))]
  }) %>% 
    bind_cols()
  norm_out$geometric <- map(indicators_out, ~ {
    .x[grep("geometric", names(.x))]
  }) %>% 
    bind_cols()
  return(norm_out) 
})
  
get_str(indicator_scores, 4)
```

Index Means:

```{r}
#| label: index_means
#| warnings: false
#| output: false
# For each set of indicator scores, calculate index scores
# get_str(indicator_scores, 4)
indices <- unique(filtered_frame$index)

# Choose aggregation function based on agg_type
agg_function <- function(x, agg_type) {
   if (agg_type == 'geometric') {
    geometric_mean(x)
  } else if (agg_type == 'arithmetic') {
    mean(x)
  }
}

index_scores <- map(indicator_scores, \(norm_type) {
  imap(norm_type, \(agg_df, agg_type) {
    map(indices, \(index_) {
      # Get names of indicators for this index
      index_indicators <- filtered_frame %>% 
        filter(index == index_) %>% 
        pull(indicator) %>% 
        unique()
      # Get DF of indicators for this index
      index_indicator_df <- agg_df %>% 
        select(all_of(index_indicators))
      # Get arithmetic or geometric mean, based on agg_type
      index_indicator_df %>% 
        rowwise() %>% 
        # mutate(mean = across(everything(), agg_function(agg_type)))
        mutate(!!sym(index_) := agg_function(c_across(everything()), agg_type)) %>% 
        select(!!sym(index_))
    }) %>% 
      bind_cols()
  })
})
get_str(index_scores, 4)
```

Dimension Means:

```{r}
#| label: dimension_means
#| warnings: false
#| output: false
get_str(index_scores, 4)

# Same process for dimensions
dimensions <- unique(filtered_frame$dimension)

dimension_scores <- map(index_scores, \(norm_type) {
  imap(norm_type, \(agg_df, agg_type) {
    map(dimensions, \(dimension_) {
      # Get names of indices for this dimension
      dimension_indices <- filtered_frame %>% 
        filter(dimension == dimension_) %>% 
        pull(index) %>% 
        unique()
      # Get DF of indice for this dimension
      dimension_index_df <- agg_df %>% 
        select(all_of(dimension_indices))
      # Get arithmetic or geometric mean, based on agg_type
      dimension_index_df %>% 
        rowwise() %>% 
        mutate(!!sym(dimension_) := agg_function(
          c_across(everything()), 
          agg_type
        )) %>% 
        select(!!sym(dimension_))
    }) %>% 
      bind_cols()
  })
})
get_str(dimension_scores, 4)
```

# Wrangle

Organize arithmetic and geometric means for each level of the framework (indicator, index, dimension) in a way that is easier to work with.

```{r}
#| label: wrangle
#| warnings: false
#| output: false
pacman::p_load(
  purrr
)

get_str(indicator_scores, 4)
get_str(index_scores, 4)
get_str(dimension_scores, 4)

# Want to end up with 6 lists: 3 norm types * 2 mean types
# Put them all together in one list to work with
all_scores <- mget(c(
  'indicator_scores',
  'index_scores',
  'dimension_scores'
))
get_str(all_scores, 3)

# Function to pull out the pieces we want
# Also put state names back in as a column and with real names, not codes
get_output <- function(norm_type, agg_type) {
  # Get list of each df (dimension, index, indicator) for combo
  dfs <- all_scores %>% 
    map(\(level) level[[norm_type]]) %>% 
    map(\(norm) norm[[agg_type]])
  # Get state back into a proper column for each df
  out <- map(dfs, ~ {
    .x %>% 
      # Note that we are binding fips back in - this is hinky, note to fix
      bind_cols(
        metrics_df %>% 
          rownames_to_column('fips') %>% 
          select(fips)
      ) %>% 
      left_join(
        select(sm_data$state_key, state, state_code),
        by = join_by(fips == state_code) 
      ) %>% 
      select(-fips)
  })
  return(out)
}

# All combinations, also a name
combos <- expand.grid(
  c('zscore', 'minmax', 'boxcox'), 
  c('arithmetic', 'geometric')
) %>% 
  mutate(name = paste0(Var1, '_', Var2))

# Map to pull them all out
scores <- map2(combos[[1]], combos[[2]], ~ {
  get_output(.x, .y)
}) %>% 
  setNames(c(combos$name))
get_str(scores, 4)


## Add averages for New England states and US[]
final_scores <- map(scores, \(method) {
  map(method, \(level) {
    
    # Mean of every US state and DC
    us_means <- level %>%
      select(-state) %>% 
      colMeans() %>% 
      as.list()
    us_means$state <- 'US_mean'
    
    # Median of every US state and DC
    us_medians <- level %>% 
      select(-state) %>% 
      map_dbl(median) %>% 
      as.list()
    us_medians$state <- 'US_median'
    
    # Mean of just New England states
    ne_means <- level %>% 
      filter(state %in% c('VT', 'NH', 'ME', 'MA', 'CT', 'RI')) %>% 
      select(-state) %>% 
      colMeans() %>% 
      as.list()
    ne_means$state <- 'NewEng'
    
    # Return the level + US + NewEng means
    level %>% 
      bind_rows(us_means) %>% 
      bind_rows(us_medians) %>% 
      bind_rows(ne_means)
  })
})
get_str(final_scores, 4)

# Save this for use elsewhere
saveRDS(final_scores, 'data/state_score_iterations.rds')
```

This gives us a list of 6 elements, one for each combination of normalization method and aggregation method. Each element has three data frames, one for indicator, index, and dimension. Now we can compare these 6 outputs to see how the methodological differences affect scores and ranks.

Could consider aggregating the 6 New England states here by population as well? Or by arithmetic / geometric mean. TBD

# References
