---
title: Correlations
---

## Introduction {#sec-intro}

* Kate Schneider [@schneider2023StateFoodSystems] 
* Allen and Prosperi [@allen2016ModelingSustainableFood].

## Correlation Heatmap

First we have some data wrangle to do. Here, we choose a selection of 35 variables to work with. We also filter for the Connecticut governing regions rather than counties. Finally, we arrange the variables in sensible order so they appear in similar blocks on the correlation plot.

```{r}
#| label: clean_data

pacman::p_load(
  dplyr,
  tidyr,
  tibble,
  stringr,
  purrr
)

source('dev/data_pipeline_functions.R')
source('dev/filter_fips.R')
dat <- readRDS('data/sm_data.rds')[['metrics']]

# What variables should we use?
# First let's just take the last year of everything
dat <- dat %>%
  filter_fips(scope = 'new') %>% 
  get_latest_year()

# Put together a matching pattern for a selection of relevant variables
pattern <- paste0(c(
  '^agri', 'd2c', '^edu', '^groc', 'insecurity', 'median_rent$', '^female',
  'median_rent_as_perc', '^n_house', '^number_', 'refrig', 'pth$', '_pct$',
  '^wic', '^hired', '^total', '^womens_earnings_as_perc', 'vacancy'
  ), collapse = '|')

# Filter by variables, break out variables into separate columns, and make some variable names shorter so they fit in figures
dat <- dat %>%
  filter(str_detect(variable_name, pattern)) %>%
  pivot_wider(
    names_from = 'variable_name',
    values_from = 'value'
  ) %>%
  dplyr::rename(
    womens_earnings_perc_men_fff_2023 = womens_earnings_as_perc_of_men_farming_fishing_forestry_2023,
    womens_earnings_perc_men_service_2023 = 
    womens_earnings_as_perc_of_men_food_prep_and_serving_2023
  )

# Arrange variables in a sensible order by group
# Housing, income, education, food security, infrastructure, localness, total sales, expenses
dat <- dat %>% 
  select(
    matches('_rent_|vacancy'),
    matches('income|earnings'),
    matches('education'),
    matches('insecurity|^wic|^snap'),
    matches('^number|^groc'),
    matches('agritourism|market|_csa_|d2c|valueadded|local_sales'),
    matches('total_|^hired|producer')
  )
```

```{r fig.align='center'}
#| label: correlation_plot
#| fig-cap: Interactive Correlation Plot
#| warning: false

pacman::p_load(
  dplyr,
  ggplot2,
  plotly,
  reshape,
  Hmisc,
  viridisLite
)

# Make a correlation matrix using all the selected variables
cor <- dat %>% 
  as.matrix() %>% 
  rcorr()

# Melt correlation values and rename columns
cor_r <- melt(cor$r) %>% 
  setNames(c('var_1', 'var_2', 'value'))

# Save p values
cor_p <- melt(cor$P) 
p.value <- cor_p$value

# Make heatmap with custom text aesthetic for tooltip
plot <- cor_r %>% 
  ggplot(aes(var_1, var_2, fill = value, text = paste0(
  'Var 1: ', var_1, '\n',
  'Var 2: ', var_2, '\n',
  'Correlation: ', format(round(value, 3), nsmall = 3), '\n',
  'P-Value: ', format(round(p.value, 3), nsmall = 3)
))) + 
  geom_tile() + 
  scale_fill_viridis_c() + 
  theme(axis.text.x = element_text(hjust = 1, angle = 45)) +
  labs(
    x = NULL,
    y = NULL,
    fill = 'Correlation'
  )

# Convert to interactive plotly figure with text tooltip
ggplotly(
  plot, 
  tooltip = 'text',
  width = 1000,
  height = 800
)
```

## References

