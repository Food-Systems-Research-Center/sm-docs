---
title: "Metric Counts"
format:
  html:
    fig-dpi: 200
editor_options: 
  chunk_output_type: console
warnings: false
eval: false
---

```{r}
#| label: setup
#| echo: false
source('dev/get_vt_spiders.R')
source('dev/get_aggregations.R')
source('dev/get_reactable.R')
pacman::p_load(
  dplyr,
  purrr,
  reactable,
  fmsb,
  snakecase,
  conflicted,
  tibble,
  stringr
)
conflicts_prefer(
  dplyr::select(),
  dplyr::filter(),
  dplyr::arrange(),
  dplyr::summarize(),
  dplyr::as_data_frame(),
  dplyr::pull(),
  .quiet = TRUE
)
```

Here we will see how much the dimension scores for Vermont change when we reduce certain indicators with many metrics to a single metric. We do this for an indicator in every dimension except social, which really doesn't have any metrics to spare currently. 

Note that this should be redone more systematically and across all metrics to compare them at some point, rather than a picking just a few. On to-do list. 

```{r}
#| label: explore
#| output: false
# Load data for aggregations
state_key <- readRDS('data/sm_data.rds')[['state_key']]
metrics_df <- readRDS('data/metrics_df.rds')
normed_data <- readRDS('data/normalized_metrics_df.rds')
framework <- readRDS('data/filtered_frame.rds')

# Test out process
original_scores <- get_all_aggregations(
  normed_data = normed_data['minmax'],
  framework = framework,
  state_key = state_key,
  metrics_df = metrics_df
)
```

# Reduce Physical Health Metrics

First let's take the `physical health tbd` indicator and reduce it to only `lifeExpectancy`.

```{r}
#| label: life_expectancy
#| output: false
# Remove everything from physical health tbd except life expectancy
to_remove <- framework %>% 
  dplyr::filter(
    indicator == 'physical health tbd', 
    variable_name != 'lifeExpectancy'
  ) %>% 
  dplyr::pull(variable_name)

# Get dimension scores
to_life <- get_all_aggregations(
  normed_data = normed_data['minmax'],
  framework = framework,
  state_key = state_key,
  metrics_df = metrics_df,
  to_remove = to_remove
)
```

Now the same for `drugOverdoseDeaths`

```{r}
#| label: overdose
#| output: false
# Remove everything from physical health tbd except life expectancy
to_remove <- framework %>% 
  dplyr::filter(
    indicator == 'physical health tbd', 
    variable_name != 'drugOverdoseDeaths'
  ) %>% 
  pull(variable_name)

# Get dimension scores
to_overdose <- get_all_aggregations(
  normed_data = normed_data['minmax'],
  framework = framework,
  state_key = state_key,
  metrics_df = metrics_df,
  to_remove = to_remove
)
```

Finally, we can compare the health dimension score and rank for the original framework against the `physical health tbd` indicator as represented by only life expectancy or only drug overdoses.

```{r}
#| label: compare
#| output: false
df <- map_dfr(list(original_scores, to_life, to_overdose), ~ {
  .x$minmax_geometric$dimension_scores %>% 
    as.data.frame() %>%
    dplyr::filter(str_length(state) == 2) %>% 
    mutate(
      rank = dense_rank(health),
    ) %>% 
    dplyr::filter(state == 'VT') %>% 
    dplyr::select(health, rank)
}) %>% 
  mutate(
    health = round(health, 3),
    iteration = c('Original', 'Life Exp Only', 'Overdoses Only')
  )
```

```{r}
#| label: health_comparison
#| class: centered-table
#| echo: false
get_reactable(
  df, 
  fullWidth = FALSE,
  searchable = FALSE,
  filterable = FALSE
)
```

# Reduce Crop Failure Metrics

For `production`, we will reduce the `crop failure` indicator to only the value of dairy margin protection payments and then income from insurance indemnities.

```{r}
#| label: reduce_crop_failure
#| output: false
get_str(normed_data)
get_str(framework)

## Reduce crop failure indicator to totalValueDairyMarginProtPayments
to_remove <- framework %>% 
  dplyr::filter(
    indicator == 'crop failure', 
    variable_name != 'totalValueDairyMarginProtPayments'
  ) %>% 
  pull(variable_name)

# Get dimension scores
to_dairy <- get_all_aggregations(
  normed_data = normed_data['minmax'],
  framework = framework,
  state_key = state_key,
  metrics_df = metrics_df,
  to_remove = to_remove
)


## Reduce crop failure indicator to totalIncomeInsuranceIndemnities
to_remove <- framework %>% 
  dplyr::filter(
    indicator == 'crop failure', 
    variable_name != 'totalIncomeInsuranceIndemnities'
  ) %>% 
  pull(variable_name)

# Get dimension scores
to_insurance <- get_all_aggregations(
  normed_data = normed_data['minmax'],
  framework = framework,
  state_key = state_key,
  metrics_df = metrics_df,
  to_remove = to_remove
)


## Put them together
prod_df <- map_dfr(list(original_scores, to_dairy, to_insurance), ~ {
  .x$minmax_geometric$dimension_scores %>% 
    as.data.frame() %>%
    dplyr::filter(str_length(state) == 2) %>% 
    mutate(
      rank = dense_rank(production),
    ) %>% 
    dplyr::filter(state == 'VT') %>% 
    dplyr::select(production, rank)
}) %>% 
  mutate(
    production = round(production, 3),
    iteration = c('Original', 'Dairy Only', 'Insurance Only')
  )
```

```{r}
#| label: production_comparison
#| class: centered-table
#| echo: false
get_reactable(
  prod_df, 
  fullWidth = FALSE,
  searchable = FALSE,
  filterable = FALSE
)
```

# Reduce Biodiversity Metrics

Now for the `environment` dimension, we will reduce the `biodiversity` indicator from its current set of 8 species down to the percentage of animal species at risk and the percentage of plant species at risk. 

```{r}
#| label: reduce_biodiversity
#| output: false
get_str(normed_data)
get_str(framework)

## Reduce crop failure indicator to pctAtRiskAnimalSpp
to_remove <- framework %>% 
  dplyr::filter(
    indicator == 'biodiversity', 
    variable_name != 'pctAtRiskAnimalSpp'
  ) %>% 
  pull(variable_name)

# Get dimension scores
to_animal <- get_all_aggregations(
  normed_data = normed_data['minmax'],
  framework = framework,
  state_key = state_key,
  metrics_df = metrics_df,
  to_remove = to_remove
)


## Reduce biodiversity indicator to pctAtRiskPlantSpp
to_remove <- framework %>% 
  dplyr::filter(
    indicator == 'crop failure', 
    variable_name != 'pctAtRiskPlantSpp'
  ) %>% 
  pull(variable_name)

# Get dimension scores
to_plant <- get_all_aggregations(
  normed_data = normed_data['minmax'],
  framework = framework,
  state_key = state_key,
  metrics_df = metrics_df,
  to_remove = to_remove
)


## Put them together
env_df <- map_dfr(list(original_scores, to_animal, to_plant), ~ {
  .x$minmax_geometric$dimension_scores %>% 
    as.data.frame() %>%
    dplyr::filter(str_length(state) == 2) %>% 
    mutate(
      rank = dense_rank(environment),
    ) %>% 
    dplyr::filter(state == 'VT') %>% 
    dplyr::select(environment, rank)
}) %>% 
  mutate(
    environment = round(environment, 3),
    iteration = c('Original', 'Animal Spp Only', 'Plant Spp Only')
  )
```

```{r}
#| label: environment_comparison
#| class: centered-table
#| echo: false
get_reactable(
  env_df, 
  fullWidth = FALSE,
  searchable = FALSE,
  filterable = FALSE
)
```

# Reduce Wealth/Income Metrics

For the `economics` dimension, we will reduce the `wealth/income distribution` indicator down to unemployment rate and then gini index.

```{r}
#| label: reduce_economics
#| output: false
get_str(normed_data)
get_str(framework)

## Reduce wealth/income indicator to unemploymentRate
to_remove <- framework %>% 
  dplyr::filter(
    indicator == 'wealth/income distribution', 
    variable_name != 'unemploymentRate'
  ) %>% 
  pull(variable_name)

# Get dimension scores
to_unemployment <- get_all_aggregations(
  normed_data = normed_data['minmax'],
  framework = framework,
  state_key = state_key,
  metrics_df = metrics_df,
  to_remove = to_remove
)


## Reduce wealth/income indicator to gini index
to_remove <- framework %>% 
  dplyr::filter(
    indicator == 'wealth/income distribution', 
    variable_name != 'gini'
  ) %>% 
  pull(variable_name)

# Get dimension scores
to_gini <- get_all_aggregations(
  normed_data = normed_data['minmax'],
  framework = framework,
  state_key = state_key,
  metrics_df = metrics_df,
  to_remove = to_remove
)


## Put them together
econ_df <- map_dfr(list(original_scores, to_unemployment, to_gini), ~ {
  .x$minmax_geometric$dimension_scores %>% 
    as.data.frame() %>%
    dplyr::filter(str_length(state) == 2) %>% 
    mutate(
      rank = dense_rank(economics),
    ) %>% 
    dplyr::filter(state == 'VT') %>% 
    dplyr::select(economics, rank)
}) %>% 
  mutate(
    economics = round(economics, 3),
    iteration = c('Original', 'Unemployment', 'Gini')
  )
```

```{r}
#| label: economics_comparison
#| class: centered-table
#| echo: false
get_reactable(
  env_df, 
  fullWidth = FALSE,
  searchable = FALSE,
  filterable = FALSE
)
```
