---
title: Visualization
---

## Introduction

This is a first pass at making some interactive visualizations with metrics from secondary data.

## Time Series

Exploring the metrics that are clean and have 5 or more time points. First let's clean up data and get it into the right format

```{r}
#| label: wrangle_ts_data

pacman::p_load(
  dplyr,
  ggplot2,
  plotly,
  purrr,
  RColorBrewer,
  stringr
)

dat <- readRDS('data/aggregated_metrics.rds')
fips_key <- readRDS('data/fips_key.rds')


## Select metrics
# Start with variables with >= 5 time points
ts_vars <- dat %>% 
  group_by(variable_name) %>% 
  dplyr::summarize(n_years = length(unique(year))) %>% 
  filter(n_years >= 5) %>% 
  pull(variable_name)

# Select a subset of them
ts_vars <- str_subset(ts_vars, 'child|overall|^wic|^women')

# Add a clean name for graphs
ts_vars <- data.frame(
  variable = ts_vars,
  yaxis = c(
    'Insecurity Rate',
    'Insecurity Rate',
    'Coverage Rate',
    'Eligibility Rate',
    'Percent',
    'Percent'
  ),
  title = c(
    'Child Food Insecurity Rate',
    'Overall Food Insecurity Rate',
    'WIC Coverage Rate',
    'WIC Eligibility Rate',
    'Womens Earnings as % of Men, Farming',
    'Womens Earnings as % of Men, Food Service'
  )
)

## Clean data frame
dat <- dat %>% 
  mutate(
    across(c(year, value), as.numeric),
    state = str_sub(fips, end = 2),
  ) %>% 
  left_join(fips_key, by = 'fips') %>% 
  mutate(county_name = str_remove(county_name, ' County'))
```

Now we can plot a series of 6 metrics for which we have data for 5 or more years at the state level. Hover over the joints to see specific values for each state.

```{r fig.dim=c(10, 12), fig.align='center'}
#| label: time_series
#| fig-cap: Interactive time series plots

# Mapping over our time series variables to make a list of plots
plots <- map(1:nrow(ts_vars), \(row) {
  sub_plot <- dat %>% 
    filter(variable_name == ts_vars$variable[row], str_length(fips) == 2) %>% 
    ggplot(aes(
      x = year, 
      y = value, 
      group = state_name, 
      color = state_name,
      text = paste0(
        'State: ', state_name, '\n',
        'Value: ', round(value, 3)
      )
    )) +
    geom_line(
      lwd = 1,
      alpha = 0.6
    ) +
    theme_bw() +
    scale_y_continuous(n.breaks = 10) +
    labs(
      x = 'Year',
      y = ts_vars$yaxis[row],
      color = 'State'
    ) + 
    scale_color_manual(values = brewer.pal(6, 'Dark2'))
  
  ggplotly(sub_plot, tooltip = 'text') %>% 
    add_annotations(
      text = ~unique(ts_vars$title[row]),
      x = 0,
      y = 1.25,
      yref = "paper",
      xref = "paper",
      xanchor = "left",
      yanchor = "top",
      showarrow = FALSE,
      font = list(size = 15)
    )
})

# Arrange the plots together in one frame
subplot(
  plots[[1]],
  style(plots[[2]], showlegend = FALSE),
  style(plots[[3]], showlegend = FALSE),
  style(plots[[4]], showlegend = FALSE),
  style(plots[[5]], showlegend = FALSE),
  style(plots[[6]], showlegend = FALSE),
  nrows = 3,
  margin = 0.06,
  shareY = FALSE,
  titleY = TRUE
) %>% 
  plotly::layout(
    autosize = FALSE,
    width = 900, 
    height= 700
  )
```


## Distributions

Taking an exploratory look at the distributions of our variables at the county level. We are only using the latest years available for each metric. Note that y-axes are indepednent 


```{r}
#| label: distributions
#| fig-cap: Distributions of all metrics at the county level.
#| fig-height: 25
#| fig-width: 10
#| warning: false
#| fig-align: center
#| code-annotations: select

pacman::p_load(
  dplyr,
  purrr,
  ggplot2,
  rlang,
  ggpubr,
  tidyr
)

source('dev/data_pipeline_functions.R')
dat <- readRDS('data/aggregated_metrics.rds')
# get_str(dat)

# Get names of all vars
vars <- dat$variable_name %>% unique

# DF with only final years of all vars, states only, CT governing regions
dat_latest <- dat %>% 
  dplyr::filter(
    !str_detect(fips, '^09.*[1-9]$'), # <1>
    str_length(fips) == 5 # <2>
  ) %>% 
  get_latest_year() %>%
  mutate(
    variable_name = str_sub(variable_name, end = 60),
    variable_name = paste0(variable_name, '_', year), .keep = 'unused'
  ) %>%
  unique() %>% 
  tidyr::pivot_wider(
    id_cols = fips,
    names_from = 'variable_name',
    values_from = 'value'
  ) %>% 
  mutate(across(everything(), as.numeric))
# get_str(dat_latest)

plots <- map(names(dat_latest)[-1], \(var){
  dat_latest %>% 
    ggplot(aes(x = !!sym(var))) + 
    geom_density() +
    theme_classic()
})

ggarrange(
  plotlist = plots,
  ncol = 3,
  nrow = 23
)
```
1. Here we are filtering out old county codes for CT which start with "09" and end in a "0". We are left with only the governing regions. 
2. Fips codes are a 2 digit state identifier plus a 3 digit county identifier. By removing any 2-digit fips codes, we are filtering to keep only counties.

## Bivariate Plots

Taking a look at bivariate scatter plots for a selection fo variables at the county level. 

